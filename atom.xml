<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-27T14:03:35.327Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Effective_Cpp笔记</title>
    <link href="http://example.com/blogs/2b7e9eb2.html"/>
    <id>http://example.com/blogs/2b7e9eb2.html</id>
    <published>2023-10-27T05:45:59.000Z</published>
    <updated>2023-10-27T14:03:35.327Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png" alt="image-20231027152734799"></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>构造函数：ctor</p><p>析构函数：dtor</p><p>left-hand side(左手端)：lhs</p><p>right-hand side(右手端)：rhs</p><p>对于成员函数，左侧实参由this指针表现出来，所以有时我单独使用参数名称rhs。</p><p>“指向一个T型对象”的指针命名为pt，意思是“pointer to T”。</p><p>对于references使用类似习惯：rw可能是个reference to Widget，ra则是个reference to Airplane。</p><h2 id="TR1和Boost"><a href="#TR1和Boost" class="headerlink" title="TR1和Boost"></a>TR1和Boost</h2><ul><li>Tr1（“Technical Report 1”）是一份规范，描述加入C++标准程序库的诸多新机能。这些技能以新的class templates和function templates形式体现，针对的题目有hash tables，reference-counting smart pointers，regular expressions，以及更多。所有TR1组件都被置于命名空间tr1内，后者嵌套与命名空间std内。</li><li>Boost是个组织，亦是一个网站（<a href="http://boost.org),提供可移植、同僚复审、源码开放的c++程序库.大多数tr1机能是以boost的工作为基础.在编译器厂商于其c++程序库中含入tr1之前,对那些搜寻tr1实现品的开发人员而言,boost网站可能是第一个逗留点.boost提供比tr1更多的东西,所以无论如何值得了解它./">http://boost.org），提供可移植、同僚复审、源码开放的C++程序库。大多数TR1机能是以Boost的工作为基础。在编译器厂商于其C++程序库中含入TR1之前，对那些搜寻TR1实现品的开发人员而言，Boost网站可能是第一个逗留点。Boost提供比TR1更多的东西，所以无论如何值得了解它。</a></li></ul><h1 id="一、让自己习惯C"><a href="#一、让自己习惯C" class="headerlink" title="一、让自己习惯C++"></a>一、让自己习惯C++</h1><h2 id="1-1-视C-为一个语言联邦"><a href="#1-1-视C-为一个语言联邦" class="headerlink" title="1.1 视C++为一个语言联邦"></a>1.1 视C++为一个语言联邦</h2><p>将C++视为一个由语言组成的联邦而非单一语言。C++主要的4个次语言：</p><ul><li>C。C++仍是以C为基础。许多时候C++对问题的解法其实不过就是较高级的C解法，但当你以C++内的C成分工作时，高效编程守则映照出C语言的局限：没有模板（templates），没有异常（exceptions），没有重载（overloading）。</li><li>Object-Oriented C++。这部分也就是C with Classes所诉求的：classes（包括构造函数和析构函数），封装、继承、多态、virtual函数（动态绑定）等等。</li><li>Template C++。实际上由于templates威力强大，它们带来崭新的编程泛型，也就是所谓的template metaprogramming（TMP，模板元编程）。</li><li>STL。STL是个template程序库，看名称也知道，但它是非常特殊的一个。STL有自己特殊的办事方式，当你伙同STL一起工作，你必须遵守它的规约。</li></ul><p>C++并不是一个带有一组守则的一体语言，它是从四个次语言组成的联邦政府，每个次语言都有自己的规约。</p><h2 id="1-2尽量以const，enum，inline替换-define"><a href="#1-2尽量以const，enum，inline替换-define" class="headerlink" title="1.2尽量以const，enum，inline替换#define"></a>1.2尽量以const，enum，inline替换#define</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ASPECT_RATIO 1.653</span></span><br></pre></td></tr></table></figure><p>​记号名称ASPECT_RATIO也许从未被编译器看见；也许在编译器开始处理源码之前它就被预处理器移走了。于是记号名称ASPECT_RATIO有可能没进入记号表（symbol table）。</p><p>​以常量替换#define，有两种特殊情况：①定义常量指针。由于常量定义式通常被放在头文件内（以便被不同的源码含入），因此有必要将指针（而不是指针所指之物）声明为const。②class专属常量。为了将常量的作用域（scope）限制于class内，你必须让它成为class的一个成员（member）；而为确保此常量至多只有一份实体，你必须让它成为一个static成员。</p><p>​无法利用#define创建一个class专属常量，因为#define并不重视作用域（scope）。一旦宏被定义，它就在其后的编译过程中有效（除非在某处被#undef）。这意味着#define不仅不能够用来定义class专属常量，也不能够提供任何封装性。</p><p>​enum hack的行为某方面说比较像#define而不像const。取一个const的地址是合法的，但取一个enum的地址不合法，而取一个#define的地址通常也不合法。</p><p>Remember：</p><ul><li>对于单纯常量，最好以const对象或enum替换#define。</li><li>对于形似函数的宏，最好改用inline函数替换#define。</li></ul><h2 id="1-3尽可能使用const"><a href="#1-3尽可能使用const" class="headerlink" title="1.3尽可能使用const"></a>1.3尽可能使用const</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png&quot; alt=&quot;image-20231027152734799&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    
    <category term="Effective_Cpp" scheme="http://example.com/tags/Effective-Cpp/"/>
    
  </entry>
  
</feed>
