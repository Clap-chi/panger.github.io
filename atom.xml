<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-19T15:42:19.976Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cpp设计模式</title>
    <link href="http://example.com/blogs/1155b381.html"/>
    <id>http://example.com/blogs/1155b381.html</id>
    <published>2023-11-18T11:10:38.000Z</published>
    <updated>2023-11-19T15:42:19.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><h2 id="深入理解面向对象"><a href="#深入理解面向对象" class="headerlink" title="深入理解面向对象"></a>深入理解面向对象</h2><p>向下：深入理解三大面向对象机制</p><ul><li>封装，隐藏内部实现</li><li>继承，复用现有代码</li><li>多态，改写对象行为</li></ul><p>向上：深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。</p><p>解决复杂性：</p><ul><li><strong>分解</strong><ul><li>分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。</li></ul></li><li><strong>抽象</strong><ul><li>由于不能掌握全部的复杂对象，选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。</li></ul></li></ul><h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><h2 id="重新认识面向对象"><a href="#重新认识面向对象" class="headerlink" title="重新认识面向对象"></a>重新认识面向对象</h2><ul><li><p>理解隔离变化</p><ul><li>从<code>宏观层面</code>来看，面向对象的构建方式更能适应软件的变化，能将变化所带来的影响减为最小</li></ul></li><li><p>各司其职</p><ul><li>从<code>微观层面</code>来看，面向对象的方式更强调各个类的“责任”</li><li>由于需求变化导致的新增类型不应该影响原来类型的实现——是所谓<code>各负其责</code></li></ul></li><li><p>对象是什么?</p><ul><li>从<code>语言实现</code>层面来看，对象封装了代码和数据</li><li>从<code>规格层面</code>讲，对象是一系列可被使用的公共接口</li><li>从<code>概念层面</code>讲，对象是某种拥有责任的抽象</li></ul></li></ul><h2 id="面向对象设计原则-1"><a href="#面向对象设计原则-1" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><p><code>依赖倒置原则</code>（<em>DIP</em>）：</p><ul><li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）</li><li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li></ul><p><code>开放封闭原则</code>（<em>OCP</em>）：</p><ul><li>对扩展开放，对更改封闭</li><li>类模块应该是可扩展的，但是不可修改</li></ul><p><code>单一职责原则</code>（<em>SRP</em>）：</p><ul><li>一个类应该仅有一个引起它变化的原因</li><li>变化的方向隐含着类的责任</li></ul><p><code>Liskov替换原则</code>（<em>LSP</em>）：</p><ul><li>子类必须能够替换它们的基类（IS-A）</li><li>继承表达类型抽象</li></ul><p><code>接口隔离原则</code>（<em>ISP</em>）：</p><ul><li>不应该强迫客户程序依赖它们不用的方法</li><li>接口应该小而完备</li></ul><p><code>优先使用对象组合，而不是类继承</code>：</p><ul><li>类继承通常为”白箱复用“，对象组合通常为”黑箱复用“</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高</li><li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低</li></ul><p><code>封装变化点</code>：</p><ul><li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对令另一侧产生不良的影响，从而实现层次间的松耦合</li></ul><p><code>针对接口编程，而不是针对实现编程</code>：</p><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口</li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口</li><li>减少系统中各部分的依赖关系，从而实现“高聚内、松耦合”的类型设计方案</li></ul><h1 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h1><h2 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h2><p>​<code>框架</code>与<code>应用程序</code>的划分，”组件协作”模式通过<code>晚期绑定</code>，来实现框架与应用程序之间的<code>松耦合</code>，是二者之间协作时常用的模式。</p><p>典序模式：</p><ul><li><strong>Template Method</strong></li><li><strong>Strategy</strong></li><li><strong>Observer&#x2F;Event</strong></li></ul><h3 id="Template-Method模式"><a href="#Template-Method模式" class="headerlink" title="Template Method模式"></a>Template Method模式</h3><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>​在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><p>​定义一个操作中的算法的<code>骨架</code>（稳定），而将一些步骤<code>延迟</code>（变化）到子类中。Template Method使得子类可以不改变（复用）一个算法的结构即可重定义（override重写）该算法的某些特定步骤。</p><h4 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Template Method模式说一种非常<code>基础性</code>的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（<code>虚函数的多态性</code>）为很多应用程序框架提供了灵活的<code>扩展点</code>，是代码复用的方面的基本实现结构。</li><li>除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你” 的<code>反向控制结构</code>是Template Method的典型应用。</li><li>在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般推荐将它们设置为<code>protected</code>方法。</li></ul><h3 id="Strategy策略模式"><a href="#Strategy策略模式" class="headerlink" title="Strategy策略模式"></a>Strategy策略模式</h3><h4 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂，而且有时候支持不使用的算法也是一个性能负担。</p><h4 id="模式定义-1"><a href="#模式定义-1" class="headerlink" title="模式定义"></a>模式定义</h4><p>定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子类化）。</p><h4 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在<code>运行时</code>方便地根据需要在各个算法之间进行切换。</li><li>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在<code>解耦合</code>。含有<code>许多条件判断语句</code>的代码通常都需要Strategy模式。</li><li>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</li></ul><h3 id="Observer观察者模式"><a href="#Observer观察者模式" class="headerlink" title="Observer观察者模式"></a>Observer观察者模式</h3><h4 id="动机-2"><a href="#动机-2" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系”——一个对象（目标对象）的状态发生改变，<code>所有的依赖对象</code>（观察者对象）都将得到<code>通知</code>。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。</p><p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的<code>松耦合</code>。</p><h4 id="模式定义-2"><a href="#模式定义-2" class="headerlink" title="模式定义"></a>模式定义</h4><p>定义对象间的一种<code>一对多</code>（变化）的依赖关系，以便当<code>一个对象</code>（<em>Subject</em>）的状态发生改变时，<code>所有依赖于它的对象</code>都得到通知并自动更新。</p><h4 id="要点总结-2"><a href="#要点总结-2" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>使用面向对象的抽象，Observer模式使得我们可以<code>独立地改变</code>目标与观察者，从而使二者之间的依赖关系达致松耦合。</li><li>目标发送通知时，<code>无需指定观察者</code>，通知（可以携带通知信息作为参数）会自动传播。</li><li>观察者自己决定是否需要订阅通知，目标对象对此一无所知。</li><li>Observer模式是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。</li></ul><h2 id="“单一职责”模式"><a href="#“单一职责”模式" class="headerlink" title="“单一职责”模式"></a>“单一职责”模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。</p><p>典型模式：</p><ul><li><strong>Decorator</strong></li><li><strong>Bridge</strong></li></ul><h3 id="Decorator装饰模式"><a href="#Decorator装饰模式" class="headerlink" title="Decorator装饰模式"></a>Decorator装饰模式</h3><h4 id="动机-3"><a href="#动机-3" class="headerlink" title="动机"></a>动机</h4><ul><li>在某些情况下我们可能会“过度地使用继承来扩展对象的功能”，由于<code>继承</code>为类型引入的<code>静态特质</code>，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</li></ul><h4 id="模式定义-3"><a href="#模式定义-3" class="headerlink" title="模式定义"></a>模式定义</h4><p><code>动态</code>（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（<code>消除重复代码</code>&amp;<code>减少子类个数</code>）。</p><h4 id="要点总结-3"><a href="#要点总结-3" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>通过采用组合而非继承的手法，Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的“灵活性差”和“多子类衍生问题”。</li><li>Decorator类在接口上表现为<code>is-a Component</code>的<code>继承</code>关系，即 Decorator类继承了Component类所具有的接口。但在实现上又表现为<code>has-a Component</code>的<code>组合</code>关系，即Decorator类又使用了另外一个Component类。</li><li>Decorator模式的目的并非解决“多子类衍生的多继承”问题，Decorator模式应用的要点在于解决<code>“主体类在多个方向上的扩展功能”</code>——是为<code>“装饰”</code>的含义。</li></ul><h3 id="Bridge桥模式"><a href="#Bridge桥模式" class="headerlink" title="Bridge桥模式"></a>Bridge桥模式</h3><h4 id="动机-4"><a href="#动机-4" class="headerlink" title="动机"></a>动机</h4><p>由于某些类型的固有的实现逻辑，使得它们具有两个变化的维度，乃至多个维度的变化。</p><h4 id="模式定义-4"><a href="#模式定义-4" class="headerlink" title="模式定义"></a>模式定义</h4><p>将抽象部分（业务功能）与实现部分（平台实现）分离，使它们都可以独立地变化。</p><h4 id="结构类图"><a href="#结构类图" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231119233730329.png" alt="image-20231119233730329"></p><h4 id="要点总结-4"><a href="#要点总结-4" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Bridge模式使用“对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自纬度的变化，即“子类化”它们。</li><li>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单—职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。</li><li>Bridge模式的应用一般在“两个非常强的变化维度”，有时一个类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。</li></ul><h2 id="对象创建模式"><a href="#对象创建模式" class="headerlink" title="对象创建模式"></a>对象创建模式</h2><p>通过”对象创建“模式绕开new，来避免对象创建（new）过程中所导致的紧耦合（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><p>典型模式：</p><ul><li><strong>Factory Method</strong></li><li><strong>Abstract Factory</strong></li><li><strong>Prototype</strong></li><li><strong>Builder</strong></li></ul><h3 id="Factory-Method工厂方法"><a href="#Factory-Method工厂方法" class="headerlink" title="Factory Method工厂方法"></a>Factory Method工厂方法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式简介&quot;&gt;&lt;a href=&quot;#设计模式简介&quot; class=&quot;headerlink&quot; title=&quot;设计模式简介&quot;&gt;&lt;/a&gt;设计模式简介&lt;/h1&gt;&lt;h2 id=&quot;深入理解面向对象&quot;&gt;&lt;a href=&quot;#深入理解面向对象&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>STL</title>
    <link href="http://example.com/blogs/3006dc10.html"/>
    <id>http://example.com/blogs/3006dc10.html</id>
    <published>2023-11-18T08:21:04.000Z</published>
    <updated>2023-11-18T11:06:27.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h2><h3 id="STL六大部件"><a href="#STL六大部件" class="headerlink" title="STL六大部件"></a>STL六大部件</h3><p>容器，分配器，算法，迭代器，适配器，仿函数。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231028111900946.png" alt="image-20231028111900946"></p><ul><li>容器通过内存分配器分配空间</li><li>容器和算法分离</li><li>算法通过迭代器访问容器</li><li>仿函数协助算法完成不同的策略变化</li><li>适配器套接仿函数</li></ul><h3 id="容器的分类与各种测试"><a href="#容器的分类与各种测试" class="headerlink" title="容器的分类与各种测试"></a>容器的分类与各种测试</h3><p>​vector扩展内存时，两倍扩展。</p><p>​容器list，内部有一个sort()，标准库全局也有一个sort()。容器自我提供的sort()会更快一些。</p><p>​容器deque，分段连续。客户使用是完整连续（假象）。</p><p>​有序关联式容器（set&#x2F;multiset，map&#x2F;multimap），底层设计是红黑树，容器自我查找（find()）快。</p><p>​无序关联式容器（unordered_multiset&#x2F;unordered_set，unordered_multimap&#x2F;unordered_map），底层设计是hash table，容器自我查找（find()）快。</p><h2 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h2><p>源码之前，了无秘密。</p><p>GNU C++ 2.91。</p><p>OOP（<em>Object-Oriented programming</em>）企图将datas和methods关联在一起；GP（<em>Generic Programming</em>）欲是将datas和methods分开来。</p><p>​采用GP：</p><p>​Containers和Algorithms内随可各自闭门造车，其间以Iterator沟通即可。</p><p>​Algorithms通过Iterators确定操作范围，并通过Iterators取用Container元素。</p><p>所有algorithms，其内最终<strong>涉及元素本身</strong>的操作，无非就是<strong>比大小</strong>。</p><h3 id="分配器allocator"><a href="#分配器allocator" class="headerlink" title="分配器allocator"></a>分配器allocator</h3><p>operator new会调用malloc()。</p><p>operator delete会调用free()。</p><p>​VC6的allocator只是以::operator new和::operator delete完成allocate()和deallocate()，没有任何特殊设计。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配512ints</span></span><br><span class="line"><span class="type">int</span>* p = <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">512</span>,(<span class="type">int</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>(p,<span class="number">512</span>);<span class="comment">//归还512ints</span></span><br></pre></td></tr></table></figure><p>​GCC2.9allocator只是以::operator new和::operator delete完成allocate()和deallocate()，没有任何特殊设计。但是G2.9并没有用这个分配器，而是用的alloc分配器，可以省下很多内存。</p><p>​G4.9的allocator分配器又用回了VC6的allocator，但是依然有alloc分配器。</p><p>postfix form：（i++）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self <span class="keyword">operator</span>++(<span class="type">int</span>)<span class="comment">//(i++)++ 不能这么做</span></span><br></pre></td></tr></table></figure><p>prefix form：（++i）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self&amp; <span class="keyword">operator</span>++()<span class="comment">//++(++i)</span></span><br></pre></td></tr></table></figure><h3 id="迭代器的设计原则和Iterator-Traits的作用与设计"><a href="#迭代器的设计原则和Iterator-Traits的作用与设计" class="headerlink" title="迭代器的设计原则和Iterator Traits的作用与设计"></a>迭代器的设计原则和Iterator Traits的作用与设计</h3><p>​<code>Iterator Traits</code>（萃取机）萃取出Iterator的特性。</p><p>​算法提问，迭代器回答。iterators必须有能力回答algorithms的提问。</p><p>​Iterator必须提供的5种associated types：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iterator_category;</span><br><span class="line">value_type;</span><br><span class="line">difference_type;</span><br><span class="line">pointer;<span class="comment">//这两种在STL里面没见过</span></span><br><span class="line">reference;  <span class="comment">//但是需要</span></span><br></pre></td></tr></table></figure><p>​Non class（template）iterators亦即native pointer，无法定义associated types。但它的associated types其实很直观。</p><p>​class（template）iterators都有能力定义自己的associated types。</p><p>​<code>Iterator Traits</code>用以分离<code>class</code> iterators和<code>non-class </code>iterators。</p><p>​这个traits机器（看成中间层）必须有能力分辨它所获得的iterator是（1）class iterator T或是（2）native pointer to T。利用partial specialization（偏特化）可连到目标。</p><p>​<code>value_type</code>的主要目的是用来声明变量，而声明一个<code>无法被赋值</code>的变量没什么用，所以iterator（即便是constant iterator）的value type不应加上const。iterator若是const int*，其<code>value_type</code>应该是int，而非const int。</p><h3 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h3><p>​stack或queue都<code>不允许</code>遍历，也<code>不提供</code>iterator。</p><p>​stack和queue都<code>可</code>选择list或deque做为底层结构。</p><p>​stack<code>可</code>选择vector做为底层结构。queue<code>选择</code>vector做为底结构。</p><p>​stack和queue都<code>不可</code>选择set或map做为底层结构。</p><h3 id="RB树"><a href="#RB树" class="headerlink" title="RB树"></a>RB树</h3><p>​<code>Red-Black tree</code>（红黑树）是平衡二元（分）搜索树中常被使用的一种。平衡二元搜索树的特征：排列规则有利search和insert，并保持适度平衡—无任何节点过深。</p><p>​rb_tree提供“遍历”操作及iterators。按正常规则（++ite）遍历，便能获得排序状态。</p><p>​我们<code>不应</code>使用rb_tree 的 iterators改变元素值（因为元素有其严谨排列规则）。编程层面（<em>programming leve</em>）<code>并未阻绝此事</code>。如此设计是正确的，因为 rb_tree 即将为 set 和 map 服务（做为其底部支持），而map允许<code>元素的data</code> 被改变，只有<code>元素的key</code>才是不可被改变的。</p><p>​rb_tree 提供两种 insertion 操作：<code>insert_unique() </code>和 <code>insert_equal() </code>。前者表示节点的key一定在整个 tree 中独一无二，否则安插失败；后者表示节点的key可重复。</p><h3 id="set、multiset"><a href="#set、multiset" class="headerlink" title="set、multiset"></a>set、multiset</h3><p>​set&#x2F;multiset 以rb_tree 为底层结构，因此有「元素自动排序」特性 排序的依据是key，而 <code>set/multiset元素的value 和key合一：value就是key</code>。</p><p>​set&#x2F;multiset 提供“遍历”操作及 iterators。按正常规则(++ite)遍历，便能获得排序状态(sorted)。</p><p>​我们<code>无法</code>使用 set&#x2F;multiset 的 iterators 改变元素值（因为key有其严谨排列规则） 。 set&#x2F;multiset的iterator是其底部的RB tree 的 const-iterator，就是为了<code>禁止</code> user 对元素赋值。</p><p>​set元素的key必须独一无二，因此其 insert()用的是rb_tree的<code>insert_unique()</code>。 multiset元素的key可以重复，因此其 insert()用的是rb_tree的<code>insert_equal()</code>。</p><h3 id="map、multimap"><a href="#map、multimap" class="headerlink" title="map、multimap"></a>map、multimap</h3><p>​map&#x2F;multimap 以rb_tree 为底层结构，因此有「元素自动排序」特性。排序的依据是 key 。</p><p>​map&#x2F;multimap 提供“遍历”操作及 iterators。按正常规则（*++ite<em>）遍历，便能获得排序状态（</em>sorted*）。</p><p>​我们<code>无法</code>使用 map&#x2F;multimap 的 iterators 改变元素的key（因为key有其严谨排列规则），但<code>可以</code>用它来改变元素的data。因此 map&#x2F;multimap内部自动将<code> user指定的key type</code> 设为 <code>const</code>，如此便能<code>禁止</code>user对<code>元素的key</code>赋值。</p><p>​map元素的 key 必须独一无二，因此其insert()用的是rb_tree的insert_unique()。multimap 元素的key可以重复，因此其 insert()用的是rb_tree的insert_equal()。</p><p>​multimap不可使用[]做insertion，map可以。</p><h3 id="hashtable（哈希表、散列表）"><a href="#hashtable（哈希表、散列表）" class="headerlink" title="hashtable（哈希表、散列表）"></a>hashtable（哈希表、散列表）</h3><p>​存储方式（拉链法，单链表）：<code>Separate Chaining</code>。虽然list是线性搜寻时间，如果list够小，搜寻速度仍然很快。</p><p>​可以使用hashtable iterators改变元素的data，但不能改变元素的key（因为hashtable根据key实现严谨的元素排列）。</p><p>​如果元素总量超过当时buckets vector大小，将rehashing。</p><p>​C++ 11将hash改成unordered。</p><h2 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h2><h3 id="算法的形式"><a href="#算法的形式" class="headerlink" title="算法的形式"></a>算法的形式</h3><p>从语言层面讲：</p><ul><li>容器 Container 是个 class template</li><li>算法 Algorithm 是个 function template</li><li>迭代器 Iterator 是个 class template</li><li>仿函数 Functor 是个 class template</li><li>适配器 Adapter 是个class template</li><li>分配器 Allocator 是个 class template</li></ul><p></p><p>​Algorithms 看不见 Containers，对其一无所知；所以，它所需要的一切信息都必须从 Iteratrors 取得，而 Iterators（由 Containers 供应）必须能够回答 Algorithm 的所有提问，才能搭配该 Algorithm 的所有操作。</p><h3 id="算法源代码剖析"><a href="#算法源代码剖析" class="headerlink" title="算法源代码剖析"></a>算法源代码剖析</h3><p>​容器<code>不带</code>成员函数 count()：array, vector, list, forward_list, deque。</p><p>​容器<code>带有</code>成员函数 count()：set&#x2F;multiset，map&#x2F;multimap，unordered_set&#x2F;unordered_multiset，unordered_map&#x2F;unordered_multimap。</p><p>​容器<code>不带</code>成员函数 find()：array, vector, list, forward_list, deque。</p><p>​容器<code>带有</code>成员函数 find()：set&#x2F;multiset，map&#x2F;multimap，unordered_set&#x2F;unordered_multiset，unordered_map&#x2F;unordered_multimap。</p><p>​容器<code>不带</code>成员函数 sort()：array, vector, deque，set&#x2F;multiset，map&#x2F;multimap，unordered_set&#x2F;unordered_multiset，unordered_map&#x2F;unordered_multimap。</p><p>​容器<code>带有</code>成员函数 sort()：list, forward_list。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rbegin</span>() — <span class="built_in">reverse_iterator</span>(<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">rend</span>() — <span class="built_in">reverse_iterator</span>(<span class="built_in">begin</span>());</span><br></pre></td></tr></table></figure><h3 id="仿函数functors"><a href="#仿函数functors" class="headerlink" title="仿函数functors"></a>仿函数functors</h3><p>​算术类（Arithmetic），逻辑运算类（Logical），相对关系类（Relational）。</p><p>​typename( )，创建临时对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Arg</span>, <span class="keyword">class</span> <span class="title class_">Result</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">unary_function</span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> Arg argument_type;</span><br><span class="line"><span class="keyword">typedef</span> Result result_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Arg1</span>, <span class="keyword">class</span> <span class="title class_">Arg2</span>, <span class="keyword">class</span> <span class="title class_">Result</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binary_function</span>&#123;</span><br><span class="line"><span class="keyword">typedef</span> Arg1 first_argument_type;</span><br><span class="line"><span class="keyword">typedef</span> Arg2 second_argument_type;</span><br><span class="line"><span class="keyword">typedef</span> Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​仿函数functors的<code>可适配</code>（<em>adaptable</em>）条件：STL规定每个Adaptable Function都应挑选<code>适当者</code>继承之（因为Function Adapter将会提问）。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">less</span> : <span class="keyword">public</span> binary_function&lt;T, T, <span class="type">bool</span>&gt;&#123;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T&amp; x, <span class="type">const</span> T&amp; y)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span> x &lt; y;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​于是<code>less&lt;int&gt;</code>便有了三个typedef，分别是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> first_argument_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> second_argument_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">bool</span> result_type;</span><br></pre></td></tr></table></figure><h3 id="适配器Adapters"><a href="#适配器Adapters" class="headerlink" title="适配器Adapters"></a>适配器Adapters</h3><h4 id="函数适配器：binder1st，binder2nd，not1。"><a href="#函数适配器：binder1st，binder2nd，not1。" class="headerlink" title="函数适配器：binder1st，binder2nd，not1。"></a>函数适配器：binder1st，binder2nd，not1。</h4><h4 id="新型适配器bind取代binder1st、binder2nd。"><a href="#新型适配器bind取代binder1st、binder2nd。" class="headerlink" title="新型适配器bind取代binder1st、binder2nd。"></a>新型适配器bind取代binder1st、binder2nd。</h4><p>​bind只能绑定一个模板参数。</p><p>​std::bind可以绑定：</p><ol><li>functions</li><li>function objects</li><li>member functions，_1必须是某个object地址。</li><li>data members，_1必须是某个object地址。</li></ol><h4 id="迭代器适配器：reverse-iterator"><a href="#迭代器适配器：reverse-iterator" class="headerlink" title="迭代器适配器：reverse_iterator"></a>迭代器适配器：reverse_iterator</h4><p>逆向迭代器的5种associated types都和其对应的正向迭代器相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Iterator iterator_type;<span class="comment">//代表正向迭代器</span></span><br><span class="line"><span class="keyword">typedef</span> reverse_iterator&lt;Iterator&gt; self;<span class="comment">//代表逆向迭代器</span></span><br></pre></td></tr></table></figure><p>对逆向迭代器取值，就是将对应的正向迭代器退一位取值。</p><p>前进变成后退，后退变成前进。</p><h4 id="迭代器适配器：inserter"><a href="#迭代器适配器：inserter" class="headerlink" title="迭代器适配器：inserter"></a>迭代器适配器：inserter</h4><p>这个adapter将iterator的赋值（<em>assign</em>）操作改变为安插（<em>insert</em>）操作，并将iterator右移一个位置。如此便可让user连续执行<code>表面上assign而实际上insert</code>的行为。</p><h4 id="X适配器：ostream-iterator"><a href="#X适配器：ostream-iterator" class="headerlink" title="X适配器：ostream_iterator"></a>X适配器：ostream_iterator</h4><h4 id="X适配器：istream-iterator"><a href="#X适配器：istream-iterator" class="headerlink" title="X适配器：istream_iterator"></a>X适配器：istream_iterator</h4><h2 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h2><p>​type traits实现is_class，is_union，is_enum，is_pod这些未曾出现于C++标准库源代码。</p><p>​moveable元素对于vector速度效能的影响：存储时间差别很大，有时候更是巨大得多；copy跟move copy差别巨大。</p><p>​moveable元素对于list、deque、multiset、unordered_multiset速度效能的影响：存储时间差别不大；copy跟move copy差别巨大。</p><p>​元素：move copy之后，原来的东西不可使用；确保不再使用原来的东西，才使用move copy。</p><p>​std::string带着moveable功能。</p><h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><h3 id="模板观念与函数模板"><a href="#模板观念与函数模板" class="headerlink" title="模板观念与函数模板"></a>模板观念与函数模板</h3><p>​模板（Templates）是C++的一种特性，允许函数或类（对象）通过泛型（generic types）的形式表现或运行。</p><p>​模板可以使得函数或类在对应不同的型别（types）的时候正常工作，而无需为每一个型别都写一份代码。</p><p>​模板被编译了两次：</p><ol><li>没有实例化之前，检查模板代码本身是否有语法错误</li><li>实例化期间，检查对模板代码的调用是否合法</li></ol><h3 id="泛型编程-1"><a href="#泛型编程-1" class="headerlink" title="泛型编程"></a>泛型编程</h3><h4 id="特化（Traits）"><a href="#特化（Traits）" class="headerlink" title="特化（Traits）"></a>特化（Traits）</h4><p>​型别T与其trait的关系推演如下：</p><blockquote><p>T -&gt; association -&gt; characteristic of T -&gt; another type -&gt; trait!</p></blockquote><p>​Traits可以实现模板类，而关联（association）则是针对每个具体型别T的特化。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li><p>迭代器是指针的泛化。</p><ul><li><p>迭代器本身是一个对象，指向另外一个（可以被迭代的）对象。</p></li><li><p>用来迭代一组对象，即如果迭代器指向一组对象中的某个元素，则通过increment以后它就可以指向这组对象中的下一个元素。</p></li></ul></li><li><p>在STL中迭代器是容器与算法之间的接口。</p><ul><li>算法通常以迭代器做为输入参数。</li><li>容器只要提供一种方式，可以让迭代器访问容器中的元素即可。</li></ul></li></ul><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><p>​仿函数又称为函数对象（<em>Function Object</em>），其作用相当于一个函数指针。</p><p>​STL中将这种行为函数指针定义为所谓的仿函数，其实现是一个class，再以该仿函数产生一个对象做为算法参数。</p><p>​仿函数的类别定义中必须重载函数调用运算子operator()，从而使得仿函数对象可以像函数一样被调用。</p><p>​自定义的仿函数必须重载operator()。</p><p>​为什么要用仿函数而不是普通函数指针作为算法的行为参数？</p><ul><li>普通函数指针不能满足STL的抽象要求</li><li>函数指针无法和STL其他组件交互</li></ul><h3 id="仿函数适配器"><a href="#仿函数适配器" class="headerlink" title="仿函数适配器"></a>仿函数适配器</h3><p>​仿函数适配器（Functor Adapter），目的在于将无法匹配的仿函数“套接”成可以匹配的型别。</p><p>​仿函数适配器（mem_fun&#x2F;mem_fun_ref）：用来适配对象的成员函数。</p><p>​对于函数f以及对象obj，在obj上调用f的形式可以有3种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">f</span>(obj)<span class="comment">// f是全局函数（非obj成员函数）</span></span><br><span class="line">obj.<span class="built_in">f</span>()<span class="comment">// f是obj的成员函数，obj非指针</span></span><br><span class="line">obj-&gt;<span class="built_in">f</span>()<span class="comment">// f是obj的成员函数，obj是指针</span></span><br></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>（1）std::string&#x2F;std::wstring与<code>vector&lt;char&gt;</code>&#x2F;<code>vector&lt;wchar_t&gt;</code></p><ul><li>单线程情况下涉及对字符串的操作，首选std::string&#x2F;std::wstring</li><li>多线程情况下需注意string是否带引用计数（reference count）<ul><li>原本reference count的目的是避免不必要的内存分配和字符拷贝</li><li>在多线程环境下，避免分配和拷贝所节省下的开销转嫁到了并发控制上</li><li>可考虑使用<code>vector&lt;char&gt;</code>&#x2F;<code>vector&lt;wchar_t&gt;</code>替代，而vector的实现是不带引用计数的</li></ul></li></ul><p>（2）当new出对象并放入容器时，要在销毁容器前delete那些对象。</p><p>（3）尽量用算法调用代替手写循环。例：</p><ul><li><p>使用for_each而不是for循环</p></li><li><p>定义DeleteElement对象并重载operator()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteElement</span>&#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TElement&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> TElement* p)</span> <span class="type">const</span></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用for_each销毁容器中对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">DeleteElement</span>());</span><br></pre></td></tr></table></figure></li></ul><p>（4）通过swap为容器“缩水”</p><p>（5）在有对象继承情况下，建立指针的容器而不是对象的容器</p><ul><li><p>STL容器装入的对象是原始对象的一个拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;Object&gt; v;</span><br><span class="line"><span class="function">Object <span class="title">obj</span><span class="params">(...)</span></span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(obj);<span class="comment">//push进去的不是原始obj，而是obj的一个拷贝</span></span><br></pre></td></tr></table></figure></li><li><p>如果对象很大，拷贝需要大量性能开销</p></li><li><p>由于继承的存在，拷贝会发生slicing，即：如果以基类对象建立一个容器而插入派生类对象， 那么当对象通过基类的拷贝构造函数拷入容器的时候对象的派生部分会被切割</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubObject</span>:<span class="keyword">public</span> Object&#123;...&#125;<span class="comment">//继承Object的对象</span></span><br><span class="line">std::vector&lt;Object&gt; v;</span><br><span class="line">SubObject subObj;</span><br><span class="line">v.<span class="built_in">push_back</span>(subObj);<span class="comment">//slicing! subObj被当作基类拷贝进vector</span></span><br></pre></td></tr></table></figure></li><li><p>在有对象继承情况下，建立指针的容器而不是对象的容器</p><ul><li><p>一个好的做法是建立指针的容器而不是对象的容器</p><ul><li><p>拷贝指针总是很快，开销小</p></li><li><p>不会产生slicing问题</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubObject</span>:<span class="keyword">public</span> Object&#123;...&#125;<span class="comment">//继承Object的对象</span></span><br><span class="line">std::vector&lt;Object*&gt; v;</span><br><span class="line">Object* ptrSubObj = <span class="keyword">new</span> <span class="built_in">SubObject</span>();</span><br><span class="line">v.<span class="built_in">push_back</span>(ptrSubObj);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h3><h4 id="非变易算法"><a href="#非变易算法" class="headerlink" title="非变易算法"></a>非变易算法</h4><p>​<code>非变易算法</code>是一系列模板函数，在<code>不改变</code>操作对象的前提下对元素进行处理，诸如：查找、子序列搜索、统计、匹配等等。</p><p>​具体包括：for_each、find、find_if、adjacent_find、find_first_of、count、count_if、mismatch、equal、search。</p><h4 id="变易算法"><a href="#变易算法" class="headerlink" title="变易算法"></a>变易算法</h4><p>​<code>变易算法</code>是指那些<code>改变</code>容器中对象的操作。</p><p>​具体包括：copy、swap、transform、replace、fill、generate、remove、unique、reserve、rotate、random_shuffle、partition。</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>sort、partial_sort、binary_search、merge。</p><p>基于堆的算法：make_heap（大根堆）、push_heap、pop_heap（堆顶弹出）、sort_heap。</p><h4 id="泛型数值算法"><a href="#泛型数值算法" class="headerlink" title="泛型数值算法"></a>泛型数值算法</h4><p>​<code>泛型数值算法</code>包含在<code>&lt;numeric&gt;</code>头文件中，包括：accumulate、inner_product、partial_sum、adjacent_difference。</p><h4 id="内存分配器"><a href="#内存分配器" class="headerlink" title="内存分配器"></a>内存分配器</h4><p>​如果需要自己写一个allocator，则需满足以下接口：</p><ul><li><p>一组typedef：</p><ul><li><p>allocator::<code>value_type</code></p></li><li><p>allocator::<code>pointer</code></p></li><li><p>allocator::<code>const_pointer</code></p></li><li><p>allocator::<code>reference</code></p></li><li><p>allocator::<code>const_reference</code></p></li><li><p>allocator::<code>size_type</code></p></li><li><p>allocator::<code>difference_type</code></p></li></ul></li><li><p>allocator::<code>rebind</code>：allocator的内嵌模板，需要定义other成员</p></li><li><p>allocator::<code>allocator</code>()：构造函数</p></li><li><p>allocator::<code>allocator</code>(const allocator&amp;)：拷贝构造函数</p></li><li><p><code>template&lt;typename T&gt; allocator::allocator(const allocator&lt;T&gt;&amp;)</code>：泛化的拷贝构造函数</p></li><li><p>allocator::<code>~allocator()</code>：析构函数</p></li><li><p>pointer allocator::<code>address</code>(reference x) const：返回对象地址，allocator.address(x)相当于&amp;x</p></li><li><p>pointer allocator::<code>address</code>(size_type n, const void* &#x3D; 0)：分配可以容纳n个对象的空间，对象型别是T</p></li><li><p>void allocator::<code>deallocator</code>(pointer p, size_type n)：释放空间</p></li><li><p>size_type allocator::<code>max_size</code>() const：可以分配的最大空间</p></li><li><p>void allocator::<code>construct</code>(pointer p, const T&amp;x)：相当于new(const void* p) T(x)</p></li><li><p>void allocator::<code>destory</code>(pointer p)：相当于p-&gt;~T()</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;STL&quot;&gt;&lt;a href=&quot;#STL&quot; class=&quot;headerlink&quot; title=&quot;STL&quot;&gt;&lt;/a&gt;STL&lt;/h1&gt;&lt;h2 id=&quot;第一讲&quot;&gt;&lt;a href=&quot;#第一讲&quot; class=&quot;headerlink&quot; title=&quot;第一讲&quot;&gt;&lt;/a&gt;第一讲&lt;/h</summary>
      
    
    
    
    
    <category term="STL" scheme="http://example.com/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>国科大移动互连网技术考试</title>
    <link href="http://example.com/blogs/22e916fa.html"/>
    <id>http://example.com/blogs/22e916fa.html</id>
    <published>2023-11-06T16:17:58.000Z</published>
    <updated>2023-11-08T10:26:15.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>1.移动互联网MI(Mobile Internet) 就是将<code>移动通信</code>和<code>互联网</code>二者结合起来，成为一体。</p><p>2.移动互联网三要素：<code>网络</code>、<code>应用</code>、<code>终端</code></p><p>3.移动互联网的主要特点：</p><ul><li>高便携性</li><li>终端移动性</li><li>业务、终端、网络的强关联性</li><li>业务使用的私密性</li><li>局限性：主要体现在网络能力和终端能力两方面的限制</li></ul><p>4.移动互联网的发展速度已远远超越<code>摩尔定律</code>。</p><p>5.Web3.0的关键技术有<code>区块链技术</code>、<code>去中心化应用</code>等。</p><p>6.Web发展简史：</p><ul><li>Web1.0是Web的“<code>可读取</code>”阶段</li><li>Web2.0是Web的“<code>可交互</code>”阶段</li><li>Web3.0是网络的“<code>可执行</code>”阶段</li></ul><p>7.移动网络类型：</p><ul><li>蜂窝网</li><li>无线局域网 (WLAN)</li><li>个人局域网(PAN)</li></ul><p>8.为什么需要蜂窝：<code>频率复用</code>。</p><p>9.蜂窝技术分类：</p><ul><li><code>宏蜂窝</code>技术</li><li><code>微蜂窝</code>技术</li><li><code>智能蜂窝</code>技术</li></ul><p>10.（4G）当前，被ITU所承认主流技术：</p><ul><li><code>LTE</code>（ Long Term Evolution，长期演进）</li><li><code>LTE-A</code>（ LTE-Advanced ）</li></ul><p>11.4G的主要技术：</p><ul><li>正交频分复用（OFDM） </li><li>多输入多输出技术（MIMO） </li><li>载波聚合技术 </li><li>多点协作传输技术 </li><li>无线中继技术 </li><li>上&#x2F;下行多天线增强技术</li></ul><p>12.（5G）从市场需求来看，<code>移动互联网</code>和<code>物联网</code>是下一代移动通信系统发展的两大主要驱动力。</p><p>13.无线网络的基本类型：</p><ul><li>无线广域网（WWAN）</li><li>无线城域网（WMAN）</li><li>无线局域网（WLAN）</li><li>无线个域网（WPAN）</li><li>无线体域网（WBAN）</li></ul><p>14.<code>不同类型</code>的无线网络所<code>重点关注</code>的协议<code>层次</code>是不一样的。</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="简单爬虫1"><a href="#简单爬虫1" class="headerlink" title="简单爬虫1"></a>简单爬虫1</h2><p>1.搜索引擎的工作过程：</p><ul><li>抓取网页信息</li><li>分析网页</li><li>找到相关文档</li></ul><p>2.搜索引擎并不真正搜索互联网，它搜索的实际上是预先整理好的<code>网页索引数据库</code>。</p><p>3.搜索引擎的发展阶段：</p><ul><li>第一代搜索引擎：集中式检索</li><li>第二代搜索引擎：分布式检索</li><li>第三代搜索引擎的代表是Google</li><li>第四代搜索引擎：主要的变化是从<code>信息检索到信息推送</code>的转变</li></ul><p>4.网络爬虫是一种通过既定<code>规则（网络爬虫算法）</code>，能够<code>自动提取</code>网页信息的<code>程序</code>，是<code>搜索引擎的重要组成部分</code>。</p><p>5.通用网络爬虫的基本工作流程：</p><ul><li>获取初始的URL</li><li>爬取网页，获取新的URL</li><li>将新的URL放入URL队列</li><li>从URL队列中读取新的URL进行网页下载</li><li>设置停止条件</li></ul><p>6.传统爬虫的基本流程：</p><ul><li>发起请求（Request）</li><li>获取响应内容（Response）</li><li>解析内容</li><li>保存数据</li></ul><p>7.HTTP（HyperText Transfer Protocol），即<code>超文本传输协议</code>。采用HTTP协议的程序默认使用的端口号为<code>80</code>。</p><p>8.HTTPS：<code>安全套接字层超文本传输协议</code>。采用HTTPS协议的程序默认使用的端口号为<code>443</code>。</p><p>9.GET和POST的简单比较：</p><blockquote><p>GET和POST的区别就是：请求的数据GET是在url中，POST则是存放在头部 </p><p><code>GET请求</code>：请求的数据会附加在URL之后，以<code>?</code>分割URL和传输数据，多个参数用<code>&amp;</code>连接。URL的编码格式采用的是ASCII编码，而不是unicode， 即是说所有的非ASCII字符都要编码之后再传输。 </p><p> <code>POST请求</code>：POST请求会把请求的数据放置在HTTP请求包的<code>包体</code>中，需要构造一个<code>表单</code>，通过表单提交得到POST请求。 </p><p><code>GET请求的数据会暴露(明文)在地址栏中，而POST请求则不会</code>。 </p><p>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</p></blockquote><p>10.Request–请求头：</p><ul><li><code>Accept</code>请求头表示可接受的响应内容</li><li><code>User-Agent</code>属性表示客户端的身份标识字符串</li><li><code>Cookie</code>是请求报文中可用的属性，也是客户端最重要的请求头</li></ul><p>11.HTTP协议本身是 <code>无状态的</code>，实现状态保持需要 <code>Cookie</code>和<code>Session</code>。</p><p>12.HTTP状态码是用来表示网页服务器响应状态：</p><ul><li><strong>200：请求成功</strong></li><li><strong>400：request错误</strong></li><li><strong>403：服务器拒绝执行</strong></li><li><strong>404：请求的资源没发现</strong></li><li><strong>500：未知错误</strong></li><li><strong>503：服务器当前过载或维护</strong></li></ul><p>13.简单爬虫框架：</p><ul><li>爬虫调度</li><li>模块URL管理器</li><li>网页下载器</li><li>网页解析器</li></ul><h2 id="简单爬虫2"><a href="#简单爬虫2" class="headerlink" title="简单爬虫2"></a>简单爬虫2</h2><p>14.Python中提供了多种解析网页数据的技术，包括<code>正则表达式</code>、<code>XPath</code>、 <code>Beautiful Soup</code>、<code>JSONPath</code>。</p><p>15.什么是正则表达式？</p><ul><li>正则表达式是一种定义了搜索模式的<code>特征序列</code>，主要用于字符串的模式匹 配或字符的匹配</li><li><code>正则表达式就是其中一种进行数据筛选的表达式</code></li></ul><ol start="16"><li>贪婪模式就是<code>尽可能多</code>的匹配 ：<code> .*</code>；懒惰模式就是<code>尽可能少</code>的匹配: <code>.*?</code>。</li></ol><p>17.HTML就是网页源代码，是一种结构化的标记语言。HTML 可以描述一个网页的<code>结构信息</code>。</p><p>18.BeautifulSoup提供了<code>CSS选择器</code>来获取节点内容。</p><p>19.CSS（层叠样式表）的选择器用于选择网页元素，可以分为<code>标签选择器</code>、<code>类选择器</code>和<code>id选择器</code>三种。</p><p>20.Robots协议（也称为爬虫协议、机器人协议等）的全称是“<code>网络爬虫排除标准</code>”。</p><p>21.robots.txt 是存放在站点根目录下的一个纯文本文件。例如：<a href="https://www.baidu.com/robots.txt%E3%80%82">https://www.baidu.com/robots.txt。</a></p><p>22.图的遍历算法有两种， 即深度优先算法<code>DFS</code>和宽度优先算法<code>BFS</code>。</p><h2 id="动态爬虫"><a href="#动态爬虫" class="headerlink" title="动态爬虫"></a>动态爬虫</h2><p>23.动态页面的内容生成方式可以分成两类：<code>服务端生成</code>，<code>客户端生成</code>。</p><p>24.Web页面中经常使用的脚本语言有：<code>jsp</code>、<code>asp</code>、<code>php</code>等。</p><p>25.AJAX 最大的优点是<code>在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</code>。</p><p>26.爬取动态加载的内容方法：</p><ul><li>通过浏览器审查元素解析地址</li><li>通过Selenium模拟浏览器抓取</li></ul><p>27.模拟登录的两种主要方法：</p><ul><li>表单登录 </li><li>Cookie登录</li><li>使用Selenium模拟登录（第三种方法）</li></ul><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>28.Scrapy是一个使用Python语言编写的开源网络<code>爬虫框架</code>。</p><p>29.Scrapy爬虫框架主要由：</p><ul><li>引擎</li><li>调度器</li><li>下载器</li><li>Spiders</li><li>Item Pipelines</li><li>下载器中间件</li><li>Spider中间件</li></ul><p>30.Scrapy框架中三种数据流对象：<code>Request</code>、 <code>Response</code>和<code>Items</code></p><ul><li><code>Request</code>是Scrapy中的HTTP<code>请求对象</code></li><li><code>Response</code>是Scrapy中的HTTP<code>响应对象</code></li><li><code>Item</code>是种简单的容器，用于设置目标和<code>保存</code>爬取得到的数据</li></ul><p>31.<code>Basic：基本爬虫模板；Crawl：自动爬虫模板</code>。</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>32.所谓<code>分词</code>，指的就是将一个中文文本分割成若干个<code>独立的</code>、<code>有意义</code>的基本单位的过程。</p><p>33.一般分词方法：</p><ul><li>基于<code>词典</code>的分词方法</li><li>基于<code>理解</code>的分词方法：语义信息</li><li>基于<code>统计</code>的分词方法：频率</li></ul><p>34.正向最大匹配法（FMM）：从<code>句子开头</code>开始处理，没有匹配成功就从<code>段末尾</code>减去一个字。</p><p>35.逆向最大匹配法（BMM）：从<code>句子末尾</code>开始处理，匹配不成功时去掉的是<code>前面</code>的一个汉字。</p><p>36.逆向匹配的切分精度略高于正向匹配。</p><p>37.Jieba分词三种分词模式：</p><ul><li>精确模式（默认）</li><li>全模式</li><li>搜索引擎模式</li></ul><p>38.分词匹配效率：<code>Trie树</code>常用于加速分词查找词典问题。</p><p>39.基于统计分词的步骤：</p><ul><li>建立<code>统计语言模型</code></li><li>对句子进行<code>单词</code>划分，然后对划分结果进行<code>概率计算</code>，获得概率最大的分词方式</li></ul><p>40.概率语言模型是一种基于统计的分词方法，主要思想：<code>词是稳定的组合</code>。</p><p>41.分词方法中所应用的统计模型有：条件随机场模型<code>CRF </code>、隐Markov 模型<code>HMM</code>、<code>最大熵</code>模型、<code>N-gram</code>模型</p><p>42.HMM用来描述一个含有<code>隐含未知参数</code>的马尔可夫过程。</p><p>43.HMM的三个基本问题：</p><ul><li>评估问题</li><li>解码问题</li><li>学习问题</li></ul><p>44.HMM是将分词作为<code>字</code>在<code>字符串</code>中的<code>序列标注</code>来实现的。</p><p>45.Jieba分词算法：<code>有向无环图（DAG)</code>。</p><h2 id="文本相似性"><a href="#文本相似性" class="headerlink" title="文本相似性"></a>文本相似性</h2><p>46.文本相似度计算的常用模型：<code>词袋</code>模型、<code>词向量</code>模型。</p><p>47.文本表示：</p><ul><li>文本表示的意思是把<code>字词</code>处理成<code>向量</code>或<code>矩阵</code>，以便计算机能进行处理。 </li><li>文本表示按照粗细粒度划分，一般可分为<code>字</code>级别、<code>词语</code>级别和<code>句子</code>级别的文本表示。</li><li>文本表示分为<code>离散表示</code>（代表是词袋模型）和<code>分布式（词嵌入）表示</code>。</li></ul><p>48.<code>TF-IDF</code>（词频-逆文件频率）是一种统计方法，用以评估一<code>字词</code>对于文件的重要程度。</p><p>49.TF（词频）：<code>衡量⼀个词在⽂档中出现的频繁程度，但是没有考虑到该词对文档的区分能力</code>。</p><p>50.IDF（逆向文件频率 ）：<code>强调词的区分能力</code>。</p><p>51.TextRank算法能够从一个给定的文本中提取出该文本的<code>关键词</code>、<code>关键词组</code>。</p><p>52.PageRank算法构造的网络中的边是<code>有向无权边</code>，而TextRank算法构造的网络中的边是<code>无向有权边</code>。</p><p>53.进行文档<code>句子相似度</code>分析可以采用<code>词频统计</code>及<code>余弦相似性</code>分析，基本思想是<code>两个句子或文档越相似，则它们的内容（文本）也越相似</code>。</p><p>54.Simhash算法的简单过程：</p><blockquote><p>将每个字符串进行字符串二进制化</p><p>对字符串的二进制值进行加 权</p><p>将所有字符串的加权字符串进行累加，累加顺序按照各自位置进行</p><p>进行降维得到签名的二进制字符串</p></blockquote><p>55.词语是表达<code>语义</code>的基本单元。</p><p>56.神经网络语言模型NNLM有三层：<code>嵌入层</code>、<code>全连接层</code>、<code>输出层</code>。</p><p>57.Word2Vec是一种著名的<code>词嵌入</code>方法， 它可以计算每个单词在其给定语料库环境下的<code>分布式词向量</code>。</p><p>58.word2vec工具主要包含两个模型：<code>跳字模型</code>（skip-gram） 和<code>连续词袋模型</code>（CBOW）。</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>1.Android系统架构采用了软件堆层的架构，主要分为四部分：</p><ul><li>Linux核心层</li><li>Android 运行环境</li><li>应用程序框架层</li><li>应用程序层</li></ul><p>2.AVD（Android Virtual Device，安卓虚拟设备），一般称其为<code> Android模拟器</code>，可以用来模拟一个Android手机或平板电脑。</p><p>3.<code>AndroidManifest.xml</code>是每个应用程序都需要的系统配置文件，它位于应用程序根目录下。<code>入口为MainActivity</code>。</p><h2 id="应用界面"><a href="#应用界面" class="headerlink" title="应用界面"></a>应用界面</h2><p>4.在手机上设计用户界面必须满足以下两点基本要求：</p><ul><li>界面与程序分离</li><li>自适应手机屏幕</li></ul><p>5.Android布局的类型：</p><ul><li>线性布局</li><li>相对布局</li><li>表格布局</li><li>层布局（帧布局）</li><li>网格布局（Android4.0新增的布局管理器）</li><li>约束布局</li></ul><p>6.Android UI都是由<code>布局</code>和<code>控件</code>组成。</p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>7.Android应用程序包括：<code>逻辑控制层</code>与<code>表现层</code>。分开设计。</p><p>8.Android程序的四大组件：</p><ul><li><code>Activity</code>（活动）：根本</li><li><code>Service</code>（服务）</li><li><code>Broadcast Receiver</code>（广播接收器）</li><li><code>Content Provider</code>（内容提供器）</li><li>Intent（意图）：是一个将要执行的操作的<code>抽象描述</code></li></ul><p>9.一个Android应用通常都会包含多个Activity，但<code>只有一个Activity会作为程序的入口</code>。</p><p>10.Android系统是一个<code>多任务</code>的操作系统。</p><p>11.Activity主要有如下的四种状态：</p><ul><li>Running（运行）</li><li>Paused（暂停）</li><li>Stopped（停止）</li><li>Destroyed（销毁）</li></ul><h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><p>12.Android提供了以下三种数据存储方式：</p><ul><li>文件存储</li><li>SharedPreferences存储</li><li>SQLite数据库存储</li></ul><p>13.在TCP&#x2F;IP通信协议中，套接字（Socket）就是<code>IP地址</code>与<code>端口号</code>的组合。</p><h2 id="移动端机器学习"><a href="#移动端机器学习" class="headerlink" title="移动端机器学习"></a>移动端机器学习</h2><p>14.Tensorflow的设计目标是保证<code>灵活性</code>、 <code>高效性</code>、良好的<code>可扩展性</code>以及<code>可移植性</code>。</p><p>15.TensorFlow有两种编程模式：<code>图模式</code>与<code>eager execution模式</code>。</p><p>16.TensorFlow Lite包括两个主要组件：<code>转换器</code>和<code>解释器</code>。</p><p>17.卷积神经网络：借助<code>卷积核</code>提取特征后，送入全连接网络。</p><p>18.卷积是什么？即特征提取器，就是CBAPD。</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p>1.移动通信系统的分类，按消息传送的方向与时间分类：<code>单工制</code>、<code>半双工制</code>、<code>双工制</code>（目前基本采用）。</p><p>2.双工制分类：</p><ul><li>频分双工 （FDD）：GSM使用</li><li>时分双工 （TDD）：TD-SCDMA使用</li></ul><p>3.TDD的优势：<code>频谱利用效率更高，系统地容量更大</code>。</p><p>4.通信系统的主要性能指标是<code>有效性</code>和<code>可靠性</code>。</p><p>5.移动通信的特点：</p><ul><li>远近效应</li><li>多普勒效应：当移动台以恒定的速率沿某一方向移动时，由于<code>传播路程差的原因</code>，会出现合成频率在中心频率上下偏移的现象。<strong>速度越大，多普勒效应越明显</strong>。</li><li>电波传播存在多径衰落</li></ul><p>6.<code>信源编码</code>：在发送端，把经过<code>采样</code>和<code>量化</code>后的模拟信号变换成数字脉冲信号的过程</p><p>7.信源编码通常分为三类：</p><ul><li><code>波形编码</code>：语音波形</li><li><code>参数编码</code>：人的发音机制</li><li><code>混合编码</code>：波形编码+参数编码</li></ul><p>8.信道编码技术的目的是如何<code>以最小的监督码元，获得最大检错和纠错能力</code>。</p><p>9.在发送端被传送的信息中附加一些冗余比特（称为<code>监督码元</code>）。</p><p>10.主要的信道编码方式：</p><ul><li>奇偶校验码</li><li>线性分组码：卷积码（非分组码）和Turbo码</li><li>熵编码：香农(Shannon)编码、哈夫曼(Huffman)编码和算术编码 (arithmetic coding)</li></ul><p>11.Turbo码， 又称<code>并行级联卷积码(PCCC)</code>，为2个卷积码的并联，它巧妙地将<code>卷积码</code>和<code>随机交织器</code>结合 在一起， 实现了<code>随机编码</code>的思想。</p><p>12.交织器和删余器的主要作用</p><blockquote><p>把可能存在的连续差错比特分散，以便于信道解码时纠错。 </p><p>从两个校验序列中周期地删除一些校验位，形成校验位序列。</p></blockquote><h2 id="调制和接入"><a href="#调制和接入" class="headerlink" title="调制和接入"></a>调制和接入</h2><p>13.待传输的信号称为<code>调制信号</code>，调制之后的信号称为<code>已调信号</code>。</p><p>14.调制方式可分为<code>模拟调制</code>和<code>数字调制</code>。</p><p>15.模拟调制又可分为<code>幅度调制 </code>（AM）、<code>频率调制</code>（FM）和<code>相位调制</code>（PM）。</p><p>16.数字调制三种方式：<code>幅移键控</code>（ASK）、<code>频移键控</code>（FSK）和<code>相移键控</code>（PSK）。</p><p>17.各种调制之间的差别都反映在<code>同相分量</code>I(t)和<code>正交分量</code>Q(t)上。</p><p>18.二进制振幅键控是利用<code>载波的幅度</code>变化来传递数字信息的，其<code>频率</code>和<code>初始相位</code>保持不变。</p><p>19.星座图中的点，可以指示调制信号<code>幅度</code>和<code>相位</code>的可能状态。</p><p>20.常见的多址技术：</p><ul><li><strong>FDMA：不同的用户分配在频率不同的信道上</strong></li><li><strong>TDMA：不同的信号被分配到不同时隙里</strong></li><li><strong>CDMA：码分多址技术</strong></li><li><strong>SDMA：空分多址技术</strong></li></ul><h2 id="4G-5G"><a href="#4G-5G" class="headerlink" title="4G-5G"></a>4G-5G</h2><p>21.4G（IMT-Advanced系统的俗称）是一种<code>宽带接入</code>和分布式的<code>全IP构架</code>网络，是<code>集成多功能</code>的宽带移动通信系统。</p><p>22.移动通信网由三大部分组成：接入网、承载网、核心网。</p><p>23.<code>多载波传输</code>是将<code>高速串行</code>的数据码流转换为N路<code>并行的低速</code>数据码流，然后调制到等频率间隔的N个<code>相互正交的子载波</code>上同时进行传输。</p><p>24.OFDM系统中，需要考虑两种类型的干扰：</p><ul><li>符号间干扰ISI：通过引入<code>保护间隔</code>几乎可以完全消除<code>符号间干扰</code>（保护间隔长度大于无线信道的最大时延扩展）</li><li>载波间干扰ICI：在保护间隔内填入循环前缀信号可消除载波间干扰</li></ul><p>25.OFDM技术的缺点：存在较高的<code>峰值平均功率比</code>。</p><p>26.多天线技术通过在发送端和接收端同时使用<code>多根天线</code>，扩展了<code>空间域</code>。</p><p>27.多天线构成的信道称为<code>MIMO</code>(Multiple Input Multiple Output) 信道，使用多天线技术的系统称为 MIMO无线通信系统。</p><p>28.MIMO系统利用各发送接收天线间的<code>通道响应的独立性</code>. 通过空时编码创造出多个<code>并行的传输空间</code>。</p><p>29.LTE的基本MIMO模型是：</p><ul><li><strong>上行采用单发双收的1×2配置</strong></li><li><strong>下行采用双发双收的2×2配置</strong></li></ul><p>30.<code>MIMO系统中，信道容量随着天线数的增加而线性增大</code>。</p><p>31.LTE最终采用了 统一的多址技术</p><ul><li><strong>上行使用SC-FDMA（单载波频分多址）</strong>：OFDMA峰均比高，在上行使用会增加终端的功放成本和终端功耗</li><li><strong>下行使用OFDMA（正交频分多址）</strong></li></ul><p>32.OFDMA：以OFDM技术为基础，<code>通过为用户分配不同的子载波来区分用户的多址方式</code>。</p><p>33.LTE中，1ms作为<code>LTE的一个调度时间单位</code>，称为一个<code>TTI</code>（transmission time-interval）。</p><p>34.OFDMA的主要思想是从<code>时域</code>和<code>频域</code>两个维度将系统的无线资源划分成<code>资源块RB</code>，<code>每个用户占用其中一个或多个资源块</code>。</p><p>35.LTE的<code>空中接口资源分配的基本单位是物理资源块</code>（Physical RB，PRB）。</p><p>36.<code>带宽的动态配置是通过调整资源块RB数目的多少来完成</code>。</p><p>37.SC-FDMA兼有单载波传输技术<code>峰均比低</code>和频分多址技术<code>频谱利用率高</code>的优点。</p><p>38.LTE-A（Advanced）关键技术：</p><ul><li>载波聚合技术</li><li>增强的MIMO技术</li><li>协作多点传输技术</li></ul><p>39.5G关键技术：</p><ul><li>提高速率技术</li><li>降低时延技术</li><li>提升覆盖技术</li></ul><h2 id="短距离无线通信-wifi"><a href="#短距离无线通信-wifi" class="headerlink" title="短距离无线通信-wifi"></a>短距离无线通信-wifi</h2><p>40.WiFi是一个国际无线局域网（WLAN）标准，全称为Wireless Fidelity（无线保真），又称IEEE802.11b标准。</p><p>41.跳频扩频 (Frequency Hopping Spread Spectrum，简称 FHSS) ，就是载波可以在一个很宽的频带上按照伪随机码的定义从一 个频率<code>跳变</code>到另一个频率。</p><p>42.直接序列扩频 (Direct Sequence Spread Spectrum，简称DSSS)就是<code>使用具有高码率的扩频序列</code>。</p><p>43.RF传输标准是<code>跳频扩频</code>（FHSS）和<code>直接序列扩频</code>（DSSS）。</p><p>44.ALOHA的最大吞吐量为<code>0.184</code> ；时隙ALOHA的最大吞吐量为<code>0.368</code>。</p><p>45.CSMA&#x2F;CD比CSMA又增加了一个功能， <code>“边说边听”</code>。这种边发送边监听的功能称为<code>冲突检测</code>。</p><p>46.802.11 就使用 CSMA&#x2F;CA （<code>碰撞避免</code>）协议。而在使用 CSMA&#x2F;CA 的同时， 还增加使用<code>停止等待协议</code>。</p><p>47.<code>DCF（分布式协调功能）</code>是IEEE802.11 MAC 的基本接入方法，所有要传输数据的用户拥有平等接入网络的机会，通过<code>CSMA/CA</code>和<code>随机退避时间</code>来完成接入。</p><p>48.<code>帧间间隔IFS</code>：所有的站在完成发送后，必须再等待一段很短的时间（继续监听）才能发送下一帧。</p><p>49.帧间间隔类型：</p><ul><li>SIFS（Short IFS）：最高优先级</li><li>PIFS（PCF IFS）：中等优先级</li><li>DIFS（DCF IFS）：最低优先级</li></ul><p>50.SIFS等于节点从<code>发送状态切换到接收状态并能正确解码所需要的时间</code>，或者<code>从接收状态转为发送状态所需要的时间</code>。</p><p>51.信道从忙态变为空闲时，任何一个站要发送数据帧时，不仅都必须<code>等待一个IFS 的间隔</code>，而且还要进入<code>竞争窗口</code>，并计算<code>随机退避时间</code>以便再次重新试图接入到信道。</p><p>52.短距离无线通信主要工作在<code>高频段</code>。</p><p>53.分组传输采用<code>先听后说</code>的思想。</p><p>54.802.11MAC中的载波侦听有<code>物理载波侦听</code>和<code>虚拟载波侦听</code>两种方式。</p><p>55.802.11MAC 中的载波侦听有两种方式：</p><ul><li>物理载波侦听，由物理层提供</li><li>虚拟载波侦听，由 MAC 层提供</li></ul><h2 id="移动自组织网络"><a href="#移动自组织网络" class="headerlink" title="移动自组织网络"></a>移动自组织网络</h2><p>56.移动自组织网络的节点间可通过<code>空中接口</code>直接通信，且具有<code>分组转发</code>能力。</p><p>57.移动Ad Hoc网络由一组<code>无线移动节点</code>组成，是一种<code>不需要</code>依靠现有固定通信网络基础设施的、能够迅速展开使用的网络体系， 所需人工干预最少，是<code>没有任何中心实体</code>、<code>自组织</code>、<code>自愈</code>的网络。</p><p>58.DSDV（destination-sequenced distance-vector）<code>带目的地序列号的距离向量协议</code>。</p><p>59.DV算法不能直接用于Ad Hoc网络。</p><p>60.节点周期在DSDV协议中，每个节点的路由表包括4部分：</p><ul><li>目的节点：序列号保持为<code>偶数</code></li><li>下一跳节点</li><li>度量值（距离值）</li><li>目的节点的序列号</li></ul><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>1.移动互联网和发展特征：</p><ul><li>网络ALL-IP</li><li>终端智能化</li><li>宽带百&#x2F;千兆</li></ul><p>2.移动终端安全性：</p><ul><li>代码安全</li><li>接入权限</li><li>数字签名</li><li>沙箱隔离</li><li>Android应用典型安全问题</li></ul><p>3.应用程序签名机制：<code>规定APK文件必须被开发者进行数字签名，以便标识应用程序作者和应用程序之间的信任关系</code>。</p><p>4.<code>沙箱</code>（sandbox）为运行中的程序提供<code>隔离环境</code>，它通常严格控制其中的程序所能访问的资源。</p><p>5.防止反编译：</p><ul><li>尽量将敏感信息不放在客户端</li><li>自定义加载器</li><li>增加无用代码进行混淆</li></ul><p>5.在AndroidManifest.xml中利用<code>sharedUserId</code>属性给不同的 package分配相同的userID，通过这样做，两个package可以被当做同一个程序。</p><p>6.新型隐私信息：窃取应用程序内部的用户数据以及通过<code>侧信道攻击技术</code>获取一些敏感数据。</p><p>7.侧信道攻击方法</p><ul><li>功耗攻击（最强有力）</li><li>电磁场攻击</li><li>时间攻击</li></ul><p>8.界面劫持，顾名思义就是正常应用的界面<code>被恶意攻击者劫持</code>，替换上仿冒的恶意界面作恶。</p><p>9.<code>点击劫持是一种视觉上的欺骗手段</code>。</p><p>10.UID的权限：</p><ul><li>声明：&lt; permission&gt;</li><li>使用：&lt; uses-permission&gt;</li></ul><p>11.浏览器设计中使用的最重要的一个安全策略叫做<code>同源策略</code>。</p><p>12.源（origin）就是协议、域名和端口号。<code>若地址里面的协议、域名和端口号均相同则属于同源</code>。</p><blockquote><p>例如： <a href="http://www.a.com/test/index.html">http://www.a.com/test/index.html</a> 的同源检测 </p><p><a href="http://www.a.com/dir/page.html">http://www.a.com/dir/page.html</a> —-成功 </p><p><a href="http://www.child.a.com/test/index.html">http://www.child.a.com/test/index.html</a> —-失败，域名不同 </p><p><a href="https://www.a.com/test/index.html">https://www.a.com/test/index.html</a> —-失败，协议不同 </p><p><a href="http://www.a.com:8080/test/index.html">http://www.a.com:8080/test/index.html</a> —-失败，端口号不同</p></blockquote><p>13.一个域内的脚本仅仅具有本域内的权限，可以理解为<code>本域脚本只能读写本域内的资源</code>，而无法访问其它域的资源。</p><p>14.<code>SQL注入</code>（SQL Injection）就是把SQL命令插入到Web表单然 后提交到所在页面请求（查询字符串），从而达到欺骗服务器执行恶意的SQL命令。</p><p>15.SQL注入可以分为：<code>平台层注入</code>和<code>代码注入</code>。</p><h1 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h1><p>1.PageRank算法：对于某个页面u，<code>Bu</code>表示指向u的所有页面的集合，即u的<code>入链</code>集合，<code>L(v)</code>为页面v所指向的页面个数，即v的<code>出链</code>集合。</p><p>PageRank–算法1：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001147243.png" alt="image-20231108001147243"></p><p>PageRank–算法2：引入参数d，称为阻尼因子，指通过链接点击进入该网页的概率， 那么通过地址栏输入而跳转的概率就是1-d。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001311358.png" alt="image-20231108001311358"></p><p>PageRank算法3：一个页面被访问的随机性应当来自其他所有页面。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001358516.png" alt="image-20231108001358516"></p><p>2.4g和5g各种指标：</p><blockquote><p>峰值数据传输速率：这是网络能够提供的最高数据传输速率。在4G中，峰值速率通常为100 Mbps至1 Gbps，而在5G中，可以达到10 Gbps以上。<br>延迟：延迟是指数据从发送到接收所需的时间。在4G中，延迟通常为10毫秒至50毫秒，而在5G中，延迟可以降低到1毫秒以下。<br>频谱效率：频谱效率是指在特定频段内传输的数据量。5G比4G更高效，可以实现更高的频谱效率，从而在相同的频谱资源下提供更多的数据传输。<br>连接密度：连接密度是指网络可以同时支持的设备数量。5G相对于4G具有更高的连接密度，可以同时连接更多的设备。<br>覆盖范围：覆盖范围是指网络信号可以传播的距离。尽管5G的覆盖范围较4G更小，但5G可以通过使用更多的小型基站来提供更广泛的覆盖。<br>流量密度。</p></blockquote><p>3.4g和5g带宽、速率、间隔长度：</p><blockquote><p>带宽：4G网络的带宽通常为20 MHz，而5G网络的带宽可以达到100 MHz或更高。这意味着5G网络具有更大的带宽，可以支持更多的数据传输。<br>速率：4G网络的理论最高下载速率为100 Mbps（兆比特每秒），而5G网络的理论最高下载速率可以达到10 Gbps（千兆比特每秒）。 这意味着5G网络具有更快的传输速度，可以更快地下载和上传数据。<br>间隔长度：4G网络的子载波间隔长度为15 kHz，而5G网络的子载波间隔长度为15 kHz或更小。这意味着5G网络可以在更小的频谱间隔内传输更多的数据，从而提高了频谱利用率。</p></blockquote><p>4.什么是隐藏节点？什么是暴露节点？CSMA&#x2F;CD协议为什么不能用于WLAN？</p><blockquote><p>隐藏节点：在接收者的通信范围内而在发送者的通信范围外的终端。</p><p>暴露节点：在发送者的通信范围之内而在接收者的通信范围之外的终端。</p><p>无线系统中很难实现冲突检测（CD）：</p><p>难以同时收发</p><p>同时收发时，发送方难以实现冲突检测</p><p>发送方实现CD时，由于隐藏节点和暴露节点，即使发送方检测到信道空闲，在接收端仍可能存在冲突</p><p>并非所有站都能侦听到一个站的发送</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;p&gt;1.移动互联网MI(Mobile Internet) 就是将&lt;code&gt;移动通信&lt;/code&gt;和&lt;code&gt;互联网&lt;/code&gt;二者</summary>
      
    
    
    
    
    <category term="移动互连网技术" scheme="http://example.com/tags/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%BF%9E%E7%BD%91%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Effective_Cpp笔记</title>
    <link href="http://example.com/blogs/2b7e9eb2.html"/>
    <id>http://example.com/blogs/2b7e9eb2.html</id>
    <published>2023-10-27T05:45:59.000Z</published>
    <updated>2023-11-17T09:05:55.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png" alt="image-20231027152734799"></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><ul><li><p>构造函数：ctor</p></li><li><p>析构函数：dtor</p></li><li><p>left-hand side(左手端)：lhs</p></li><li><p>right-hand side(右手端)：rhs</p></li><li><p>成员函数：左侧实参由this指针表现出来，单独使用参数名称rhs。</p></li></ul><blockquote><p>“指向一个T型对象”的指针命名为pt，意思是“pointer to T”。</p><p>对于references使用类似习惯：rw可能是个reference to Widget，ra则是个reference to Airplane。</p></blockquote><h2 id="TR1和Boost"><a href="#TR1和Boost" class="headerlink" title="TR1和Boost"></a>TR1和Boost</h2><ul><li><code>Tr1（“Technical Report 1”）</code>是一份规范，描述加入C++标准程序库的诸多新机能。这些技能以新的class templates和function templates形式体现，针对的题目有<code>hash tables</code>，<code>reference-counting smart pointers</code>，regular expressions，以及更多。所有TR1组件都被置于命名空间tr1内，后者嵌套与命名空间std内。</li><li><code>Boost</code>是个组织，亦是一个网站<a href="http://boost.org/">Boost</a>，提供可移植、同僚复审、源码开放的C++程序库。大多数TR1机能是以Boost的工作为基础。在编译器厂商于其C++程序库中含入TR1之前，对那些搜寻TR1实现品的开发人员而言，Boost网站可能是第一个逗留点。Boost提供比TR1更多的东西，所以无论如何值得了解它。</li></ul><h1 id="让自己习惯C"><a href="#让自己习惯C" class="headerlink" title="让自己习惯C++"></a>让自己习惯C++</h1><h2 id="条款1：-视C-为一个语言联邦"><a href="#条款1：-视C-为一个语言联邦" class="headerlink" title="条款1： 视C++为一个语言联邦"></a>条款1： 视C++为一个语言联邦</h2><p>将C++视为一个由语言组成的联邦而非单一语言。C++主要的4个次语言：</p><ul><li><code>C</code>。C++仍是以C为基础。许多时候C++对问题的解法其实不过就是较高级的C解法，但当你以C++内的C成分工作时，高效编程守则映照出C语言的局限：没有模板（<em>templates</em>），没有异常（<em>exceptions</em>），没有重载（<em>overloading</em>）。</li><li><code>Object-Oriented C++</code>。这部分也就是C with Classes所诉求的：classes（包括构造函数和析构函数），封装、继承、多态、virtual函数（动态绑定）等等。</li><li><code>Template C++</code>。实际上由于templates威力强大，它们带来崭新的编程泛型，也就是所谓的template metaprogramming（TMP，模板元编程）。</li><li><code>STL</code>。STL是个template程序库，看名称也知道，但它是非常特殊的一个。STL有自己特殊的办事方式，当你伙同STL一起工作，你必须遵守它的规约。</li></ul><p>C++并不是一个带有一组守则的一体语言，它是从四个次语言组成的联邦政府，每个次语言都有自己的规约。</p><h2 id="条款2：尽量以const，enum，inline替换-define"><a href="#条款2：尽量以const，enum，inline替换-define" class="headerlink" title="条款2：尽量以const，enum，inline替换#define"></a>条款2：尽量以const，enum，inline替换#define</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ASPECT_RATIO 1.653</span></span><br></pre></td></tr></table></figure><p>​记号名称ASPECT_RATIO也许从未被编译器看见；也许在编译器开始处理源码之前它就被预处理器移走了。于是记号名称ASPECT_RATIO有可能没进入记号表（<em>symbol table</em>）。</p><p>​以常量替换#define，有两种特殊情况：</p><ol><li><strong>定义常量指针</strong>。由于常量定义式通常被放在头文件内（以便被不同的源码含入），因此有必要将指针（而不是指针所指之物）声明为const。</li><li><strong>class专属常量</strong>。为了将常量的作用域（scope）限制于class内，你必须让它成为class的一个成员（member）；而为确保此常量至多只有一份实体，你必须让它成为一个static成员。</li></ol><p>​<strong>无法利用#define创建一个class专属常量，因为#define并不重视作用域（<em>scope</em>）</strong>。一旦宏被定义，它就在其后的编译过程中有效（除非在某处被#undef）。这意味着#define不仅不能够用来定义class专属常量，也不能够提供任何封装性。</p><p>​<strong>enum hack的行为某方面说比较像#define而不像const</strong>。取一个const的地址是合法的，但取一个enum的地址不合法，而取一个#define的地址通常也不合法。</p><h5 id="Remember："><a href="#Remember：" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>对于单纯常量，最好以const对象或enum替换#define。</p><p>对于形似函数的宏，最好改用inline函数替换#define。</p></blockquote><h2 id="条款3：尽可能使用const"><a href="#条款3：尽可能使用const" class="headerlink" title="条款3：尽可能使用const"></a>条款3：尽可能使用const</h2><p>​const的一件奇妙事情是，它允许你指定一个语义约束（也就是指定一个“不该被改动”的对象），而编译器会强制实施这项约束。它允许你告诉编译器和其他程序员某值应该保持不变。只要这（某值保持不变）是事实，你就该确实说出来，因为说出来可以获得编译器的襄助，确保这条约束不被违反。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* p = greeeting;<span class="comment">//non-const pointer,const data</span></span><br><span class="line"><span class="type">char</span>* <span class="type">const</span> p = greeeting;    <span class="comment">//const pointer,non-const data</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> p = greeting;<span class="comment">//const pointer,const data</span></span><br></pre></td></tr></table></figure><p>​以下两种写法意义相同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">const</span> Widget* pw)</span></span>;<span class="comment">//f1获得一个指针，指向一个常量的Widget对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(Widget <span class="type">const</span> * pw)</span></span>; <span class="comment">//f2也是</span></span><br></pre></td></tr></table></figure><p>​在一个函数声明式内，const可以和函数返回值、各参数、函数自身（如果是成员函数）产生关联。令函数返回一个常量值，往往可以降低因客户错误而造成的意外，而又不至于放弃安全性和高效性。</p><h3 id="const成员函数"><a href="#const成员函数" class="headerlink" title="const成员函数"></a>const成员函数</h3><ol><li>它们使class接口比较容易被理解。得知哪个函数可以改动对象内容而哪个函数不行，很重要。</li><li>使“操作const对象”成为可能。</li></ol><p>​两个成员函数如果只是常量性不同，可以被重载。</p><p>​<code>bitwise const</code>阵营的人相信，成员函数只有在不更改对象之任何成员变量（static除外）时才可以说是const。也就是说它不更改对象内的任何一个bit。</p><p>​<code>logical constness</code>这一派拥护者主张，一个const成员函数可以修改它所处理的对象内的某些bits，但只有在客户端侦测不出的情况下才得如此。</p><p>​利用C++的一个与const相关的摆动场：<code>mutable</code>（可变的）。mutable释放掉non-static成员变量的bitwise constness约束。</p><h3 id="在const和non-const成员函数中避免重复"><a href="#在const和non-const成员函数中避免重复" class="headerlink" title="在const和non-const成员函数中避免重复"></a>在const和non-const成员函数中避免重复</h3><p>​对于”bitwise-constness非我所欲”的问题，mutable是个解决办法，但它不能解决所有的const相关难题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextBlock</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> ...</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position) <span class="type">const</span></span><br><span class="line"> &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> text[position];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position)<span class="comment">//现在只调用 const op[]</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">     <span class="built_in">const_cast</span>&lt;<span class="type">char</span>&amp;&gt;(<span class="comment">//将op[]返回值的const转除</span></span><br><span class="line">       <span class="built_in">static_cast</span>&lt;<span class="type">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)    <span class="comment">//为*this加上const</span></span><br><span class="line">          [position]    <span class="comment">//调用const op[]</span></span><br><span class="line">     );</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​共有两次转型：第一次用来为*this添加const（这使接下来调用operator[]时得以调用const版本），第二次则是以const operator[]的返回值中移除const。</p><p>​添加const的那一次转型强迫进行了一次安全转型（将non-const对象转为const对象），所以我们使用static_cast。移除const的那个动作只可以藉由const_cast完成，没有其他选择。</p><h5 id="Remember：-1"><a href="#Remember：-1" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>将某些东西声明为const可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。</p><p>编译器强制实施bitwise constness，但你编写程序时应该使用“概念上的常量性”（<em>conceptual constness</em>）。</p><p>当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。</p></blockquote><h2 id="条款4：确定对象被使用前已先被初始化"><a href="#条款4：确定对象被使用前已先被初始化" class="headerlink" title="条款4：确定对象被使用前已先被初始化"></a>条款4：确定对象被使用前已先被初始化</h2><p>​永远在使用对象之前先将它初始化。无任何成员的内置类型，手工完成此事。内置类型以外，确保每一个构造函数都将对象的每一个成员初始化。别混淆<strong>赋值（<em>assignment</em>）</strong>和<strong>初始化（<em>initialization</em>）</strong>。</p><p>​C++规定，对象的成员变量的初始化动作发生在进入构造函数本体之前。</p><p>​C++有着十分固定的“成员初始化次序”。次序总是相同：base classes更早于其derived classes被初始化，而class的成员变量总是以其声明次序被初始化。</p><p>​ <code>static 对象</code>，其寿命从被构造出来直到程序结束为止，因此 stack 和 heap-based 对象都被排除。这种对象包括global 对象、定义于 namespace 作用域内的对象、在 classes 内、在函数内，以及在file作用域内被声明为static的对象。 函数内的 static 对象称为local static 对象（因为它们对函数而言是local），其他static 对象称为 non-local static 对象。程序结束时 static 对象会被自动销毁，也就是它们的析构函数会在main()结束时被自动调用。</p><p>​<code>编译单元</code>（<em>translation unit</em>）是指产出单一目标文件（<em>single object file</em>）的那些源码。基本上它是单一源码文件加上其所含入的头文件（*#include files*）。</p><p>​<code>Real problem</code>：如果某编译单元内的某个 non-local static 对象的初始化动作使用了另一编译单元内的某个 non-local static 对象，它所用到的这个对象可能尚未被初始化，因为<strong>C++对“定义于不同编译单元内的non-local static 对象”的初始化次序并无明确定义</strong>。</p><p>​<strong>Reason</strong>：决定它们的初始化次序相当困难，非常困难，根本无解。在其最常见形式，也就是<strong>多个编译单元内的non-local static对象经由“模板隐式具现化，implicit template instantiations”形成</strong>，不但不可能决定正确的初始化次序，甚至往往不值得寻找“可决定正确次序”的特殊情况。</p><p>​<strong>Eliminate the problem</strong>：将每个non-local static对象搬到自己的专属函数内（该对象在此函数内被声明为static）。这些函数返回一个reference指向它所含的对象。然后用户调用这些函数，而不直接指涉这些对象。换句话说，non-local static对象被local static对象替换了。这是<code>Singleton</code>模式的一个常见实现手法。</p><p>​任何一种non-const static对象，不论它是local或non-local，在多线程环境下“等待某事发生”都会有麻烦。处理这个麻烦的一种做法是：在程序的单线程启动阶段（<em>single-threaded startup portion</em>）手工调用所有reference-returning函数，这可消除与初始化有关的”竞速形势（<em>race conditions</em>）“。</p><h5 id="Remember：-2"><a href="#Remember：-2" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>为内置对象进行手工初始化，因为C++不保证初始化它们。</p><p>构造函数最好使用成员初值列（<em>member initialization list</em>），而不要在构造函数本体内使用赋值操作（<em>assignment</em>）。初值列列出的成员变量，其排列次序 应该和它们在class中的声明次序相同。</p><p>为免除”跨编译单元之初始化次序“问题，请以local static对象替换non-local static对象。</p></blockquote><h1 id="构造-析构-赋值运算"><a href="#构造-析构-赋值运算" class="headerlink" title="构造&#x2F;析构&#x2F;赋值运算"></a>构造&#x2F;析构&#x2F;赋值运算</h1><h2 id="条款5：了解C-默默编写并调用哪些函数"><a href="#条款5：了解C-默默编写并调用哪些函数" class="headerlink" title="条款5：了解C++默默编写并调用哪些函数"></a>条款5：了解C++默默编写并调用哪些函数</h2><p>​什么时候empty class（空类）不再是个empty class呢？<strong>当C++处理过它之后</strong>。</p><p>​<strong>notice</strong>：编译器产出的析构函数是个non-virtual，除非这个class的base class自身声明有virtual析构函数（这种情况下这个函数的虚属性virtualness主要来自base class）。</p><h5 id="Remember：-3"><a href="#Remember：-3" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>编译器可以暗自为class创建default构造函数、copy构造函数、copy assignment操作符，以及析构函数。</p></blockquote><h2 id="条款6：若不想使用编译器自动生成的函数，就该明确拒绝"><a href="#条款6：若不想使用编译器自动生成的函数，就该明确拒绝" class="headerlink" title="条款6：若不想使用编译器自动生成的函数，就该明确拒绝"></a>条款6：若不想使用编译器自动生成的函数，就该明确拒绝</h2><p>​要阻止copying，可以将copy构造函数或copy assignment操作符声明为private。藉由明确声明一个成员函数，你阻止了编译器暗自创建其专属版本；而令这些函数为private，使你得以成功阻止人们调用它。</p><p>​一般而言这个做法并不绝对安全，因为member函数和friend函数还是可以调用你的private函数。<strong>将成员函数声明为private而且故意不实现它们</strong>，将阻止copying行为，如果某些人不慎调用任何一个，会获得一个<strong>连接错误（<em>linkage error</em>）</strong>。</p><h5 id="Remember：-4"><a href="#Remember：-4" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>为驳回编译器自动（暗自）提供的机能，可将相应的成员函数声明为private并且不予实现。</p></blockquote><h2 id="条款7：为多态基类声明virtual析构函数"><a href="#条款7：为多态基类声明virtual析构函数" class="headerlink" title="条款7：为多态基类声明virtual析构函数"></a>条款7：为多态基类声明virtual析构函数</h2><p>​如果class不含virtual函数，通常表示它并不意图被用来做一个base class。</p><p>​欲实现出 virtual 函数，对象必须携带某些信息，主要用来在运行期决定哪一个 virtual 函数该被调用。这份信息通常是由一个所谓<code>vptr （virtual table pointer）</code>指针指 出。vptr 指向一个函数指针构成的数组，称为<code>vtbl（virtual table）</code>；每一个带有 virtual 函数的 class 都有一个相应的vtbl。当对象调用某一virtual函数，实际被调用的函数取决于该对象的vptr所指的那个vtbl——编译器在其中寻找适当的函数指针。</p><p>​只有当class内含至少一个virtual函数，才为它声明virtual析构函数。</p><p>​标准string不含任何virtual函数。不要企图继承一个标准容器或任何其他“带有non-virtual析构函数”的class。</p><p>​<code>pure virtual</code>函数导致<code>abstract</code>（抽象）classes——也就是不能被实体化（<em>instantiated</em>）的class。也就是说，你不能为那种类型创建对象。</p><p>​必须为pure virtual析构函数提供一份定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AWOV</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">AWOV</span>() = <span class="number">0</span>;<span class="comment">//声明pure virtual析构函数</span></span><br><span class="line">&#125;</span><br><span class="line">AWOV::~AWOV &#123; &#125;<span class="comment">//pure virtual析构函数的定义</span></span><br></pre></td></tr></table></figure><p>​析构函数的运作方式是，最深层派生（<em>most derived</em>）的那个class其析构函数最先被调用，然后是其每一个base class的析构函数被调用。</p><p>​“给base classes一个virtual析构函数”，这个规则只适用于<code>polymorphic</code>（带多态性质的）base classes身上。这种base classes的设计目的是为了用来“通过base class接口处理derived class对象”。</p><h5 id="Remember：-5"><a href="#Remember：-5" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>polymorphic（带多态性质的）base classes应该声明一个virtual析构函数。如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。</p><p>Classes的设计目的如果不是作为base classes使用，或不是为了具备多态性（<em>polymorphically</em>），就不该声明virtual析构函数。</p></blockquote><h2 id="条款8：别让异常逃离析构函数"><a href="#条款8：别让异常逃离析构函数" class="headerlink" title="条款8：别让异常逃离析构函数"></a>条款8：别让异常逃离析构函数</h2><h5 id="Remember：-6"><a href="#Remember：-6" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>析构函数绝对不要吐出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序。</p><p>如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数（而非在析构函数中）执行该操作。</p></blockquote><h2 id="条款9：绝不在构造和析构过程中调用virtual函数"><a href="#条款9：绝不在构造和析构过程中调用virtual函数" class="headerlink" title="条款9：绝不在构造和析构过程中调用virtual函数"></a>条款9：绝不在构造和析构过程中调用virtual函数</h2><p>​base class构造期间virtual函数绝不会下降到derived classes阶层。取而代之的是，对象的作为就像隶属base类型一样。非正式的说法或许比较传神：在base class构造期间，virtual函数不是virtual函数。</p><p>​确定你的构造函数和析构函数都没有（在对象被创建和被销魂期间）调用virtual函数，而它们调用的所有函数也都服从同一约束。</p><p>​你无法使用virtual函数从base classes向下调用，在构造期间，你可以藉由“令derived classes将必要的构造信息向上传递至base class构造函数”替换之而加以弥补。</p><p>​比起在成员初值列（<em>member initialization list</em>）内给予base class所需数据，利用辅助函数创建一个值传给base class构造函数往往比较方便（也比较可读）。令此函数为static，也就不可能意外指向“初期未成熟之对象内尚未初始化的成员变量”。这很重要，正是因为“那些成员变量处于未定义状态”，所以“在base class构造和析构期间调用的virtual函数不可下降至derived classes”。</p><h5 id="Remember：-7"><a href="#Remember：-7" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class（比起当前执行构造函数和析构函数的那层）。</p></blockquote><h2 id="条款10：令operator-返回一个reference-to-this"><a href="#条款10：令operator-返回一个reference-to-this" class="headerlink" title="条款10：令operator&#x3D;返回一个reference to *this"></a>条款10：令operator&#x3D;返回一个reference to *this</h2><p>​为了实现“连锁赋值”，赋值操作符必须返回一个reference指向操作符的左侧实参。</p><p>​这只是个协议，并无强制性。</p><h5 id="Remember：-8"><a href="#Remember：-8" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>令赋值（<em>assignment</em>）操作符返回一个reference to *this。</p></blockquote><h2 id="条款11：在operator-中处理”自我赋值”"><a href="#条款11：在operator-中处理”自我赋值”" class="headerlink" title="条款11：在operator&#x3D;中处理”自我赋值”"></a>条款11：在operator&#x3D;中处理”自我赋值”</h2><p>​并不明显的自我赋值，是<code>“别名”（aliasing）</code>带来的结果：所谓“别名”就是”有一个以上的方法指称（指涉）某对象“。</p><p>​在operator&#x3D;函数内手工排列语句（确保代码不但“异常安全”而且“自我赋值安全”）的一个替代方案是，使用所谓的 copy and swap 技术。</p><h5 id="Remember：-9"><a href="#Remember：-9" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>确保当对象自我赋值时 operator&#x3D; 有良好行为。其中技术包括比较“来源对象” 和“目标对象”的地址、精心周到的语句顺序、以及 copy-and-swap。</p><p>确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时，其行为仍然正确。</p></blockquote><h2 id="条款12：复制对象时勿忘其每一个成分"><a href="#条款12：复制对象时勿忘其每一个成分" class="headerlink" title="条款12：复制对象时勿忘其每一个成分"></a>条款12：复制对象时勿忘其每一个成分</h2><p>​copying函数：copy构造函数和copy assignment操作符。</p><p>​编写一个copying函数，（1）确保复制所有local成员变量，（2）调用所有base classes内的适当的copying函数。</p><p>​不该令copy assignment操作符调用copy构造函数。反方向，令copy构造函数调用copy assignment操作符同样无意义。构造函数来初始化新对象，而assignment操作符只施行于已初始化对象身上。</p><p>​如果copy构造函数和copy assignment操作符有相近的代码，消除重复代码的做法是，建立一个新的成员函数给两者调用。这样的函数往往是private而且常被命名为init。这个策略可以安全消除copy构造函数和copy assignment操作符之间的代码重复。</p><h5 id="Remember：-10"><a href="#Remember：-10" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>Copying 函数应该确保复制“对象内的所有成员变量”及“所有 base class 成分”。 </p><p>不要尝试以某个 copying 函数实现另一个copying 函数。应该将共同机能放进第三个函数中，并由两个coping 函数共同调用。</p></blockquote><h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><p>​资源一旦利用，将来必须归还给系统，不然将导致内存泄漏。</p><h2 id="条款13：以对象管理资源"><a href="#条款13：以对象管理资源" class="headerlink" title="条款13：以对象管理资源"></a>条款13：以对象管理资源</h2><p>​把资源放进对象内，我们便可依赖C++的“析构函数自动调用机制”确保资源被释放。</p><ul><li><strong>获得资源后立刻放进管理对象（<em>managing object</em>）内</strong>。“以对象管理资源”的观念被称为“资源取得时机便是初始化时机”（<em>Resource Acquisition Is Initialization</em>;<code>RAII</code>）。</li><li><strong>管理对象运用析构函数确保资源被释放</strong>。如果资源释放动作可能抛出异常，但[条款8](# 条款8：别让异常逃离析构函数)能解决问题。</li></ul><p>​<code>auto_ptr</code>是个“类指针对象”，即<strong>“智能指针”</strong>。auto_ptrs有一个性质：不能通过copy构造函数或copy assignment操作符复制它们，否则它们会变成null，而复制所得的指针将取得资源的唯一拥有权！</p><p>​<code>RCSP</code>（<em>reference-counting smart pointer</em>），“引用计数型智慧指针”，也是个智能指针，持续追踪共有多少对象指向某笔资源，并在无人指向它时自动删除该资源。提供的行为类似垃圾回收（<em>garbage collection</em>），不同的是无法打破环状引用（<em>cycles of reference</em>）。</p><h5 id="Remember：-11"><a href="#Remember：-11" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>为防止资源泄漏，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。</p><p>两个常被使用的RAII classes分别是<code>tr1::shared_ptr</code>和auto_ptr。前者通常是较佳选择，因为其copy行为比较直观。若选择auto_ptr，复制动作会使它（被复制物）指向null。</p></blockquote><h2 id="条款14：在资源管理类中小心coping行为"><a href="#条款14：在资源管理类中小心coping行为" class="headerlink" title="条款14：在资源管理类中小心coping行为"></a>条款14：在资源管理类中小心coping行为</h2><p>​当[RAII](# 条款13：以对象管理资源)对象被复制，选择有两种可能：</p><ul><li><strong>禁止复制</strong>。复制动作对RAII class并不合理，便应该禁止。</li><li><strong>对底层资源祭出“引用计数法”（reference-count）</strong>。内含一个<code>tr1::shared_ptr</code>成员变量，RAII classes便可实现出reference-counting copying行为。</li></ul><p>tr1::shared_ptr允许指定所谓的“删除器”（<em>deleter</em>），是一个函数或函数对象（<em>function object</em>），当引用次数为0时便被调用（此机能并不存在于auto_ptr——它总是将其指针删除）。删除器对tr1::shared_ptr构造函数而言是可有可无的第二参数。</p><ul><li><strong>复制底部资源</strong>。复制资源管理对象时，进行的是“深度拷贝”。</li><li><strong>转移底部资源的拥有权</strong>。这是auto_ptr奉行的复制意义。</li></ul><h5 id="Remember：-12"><a href="#Remember：-12" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>复制RAII对象必须一并复制它所管理的资源，所以资源的copying行为决定RAII对象的copying行为。</p><p>普遍而常见的RAII class copying行为是：抑制copying、施行引用计数法。不过其他行为也都可能被实现。</p></blockquote><h2 id="条款15：在资源管理类中提供对原始资源的访问"><a href="#条款15：在资源管理类中提供对原始资源的访问" class="headerlink" title="条款15：在资源管理类中提供对原始资源的访问"></a>条款15：在资源管理类中提供对原始资源的访问</h2><p>​tr1::shared_ptr和auto_ptr都提供一个<code>get成员函数</code>，用来执行显示转换，会返回智能指针内部的原始指针（的复件）。它们重载了指针取值（<em>pointer dereferencing</em>）操作符（operator-&gt;和operator*），允许隐式转换至底部原始指针。</p><p>​RAII classes并不是为了封装某物而存在，它们的存在是为了确保一个特殊行为——资源释放会发生。</p><h5 id="Remember：-13"><a href="#Remember：-13" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>APIs往往要求访问原始资源（<em>raw resource</em>），所以每一个RAII class应该提供一个“取得其所管理之资源”的办法</p><p>对原始资源的访问可能经由显式转换或隐式转换。一般而言显式转换比较安全，但隐式转换对客户比较方便。</p></blockquote><h2 id="条款16：成对使用new和delete时要采用相同形式"><a href="#条款16：成对使用new和delete时要采用相同形式" class="headerlink" title="条款16：成对使用new和delete时要采用相同形式"></a>条款16：成对使用new和delete时要采用相同形式</h2><h5 id="Remember：-14"><a href="#Remember：-14" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果你在 new 表达式中使用[ ]，必须在相应的 delete 表达式中也使用[]。如果你在 new 表达式中不使用[ ]，一定不要在相应的 delete 表达式中使用[ ]。</p></blockquote><h2 id="条款17：以独立语句将newed对象置入智能指针"><a href="#条款17：以独立语句将newed对象置入智能指针" class="headerlink" title="条款17：以独立语句将newed对象置入智能指针"></a>条款17：以独立语句将newed对象置入智能指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">priority</span><span class="params">()</span></span>;<span class="comment">//揭示处理程序的优先权</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processWidget</span><span class="params">(std::tr1::shared_ptr&lt;Widget&gt; pw, <span class="type">int</span> priority)</span></span>;<span class="comment">//用来在某动态分配所得的Widget上进行某些带有优先权的处理</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">processWidget</span>(std::tr1::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget), <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>​第一个实参<code>std::tr1::shared_ptr&lt;Widget&gt;(new Widget)</code>由两部分组成：</p><ul><li><strong>执行“new Widget”表达式</strong></li><li><strong>调用tr1::shared_ptr构造函数</strong></li></ul><p>于是在调用processWidget之前，编译器必须创建代码，做以下三件事：</p><ul><li><strong>调用priority</strong></li><li><strong>执行“new Widget”</strong></li><li><strong>调用tr1::shared_ptr</strong></li></ul><p>可以确定的是 “new Widget” 一定执行于trl::shared ptr构造函数调用之前，因为这个表达式的结果还要被传递作为trl::shared_ptr 构造函数的一个实参，但对 priority的调用则可以排在第一或第二或第三执行。</p><p>​在对processWidget的调用过程中可能引发资源泄漏，因为在<strong>“资源被创建（经由“new Widget”）”</strong>和<strong>“资源被转换为资源管理对象”</strong>两个时间点之间有可能发生异常干扰。</p><p>​使用<strong>分离语句</strong>，分别写出 (1) 创建widge, (2) 将它置入一个智能指针内，然后再把那个智能指针传给 processWidget：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="function">tr1::shared_ptr&lt;Widget&gt; <span class="title">pw</span><span class="params">(<span class="keyword">new</span> Widget)</span></span>;</span><br><span class="line"><span class="built_in">processWidget</span>(pw, <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>​编译器对于<strong>“跨越语句的各项操作”没有重新排列的自由</strong>(只有在同一语句内它才拥有那个自由度)。</p><h5 id="Remember：-15"><a href="#Remember：-15" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>以独立语句将 newed 对象存储于(置入)智能指针内。如果不这样做，一旦异常被抛出，有可能导致难以察觉的资源泄漏。</p></blockquote><h1 id="设计与声明"><a href="#设计与声明" class="headerlink" title="设计与声明"></a>设计与声明</h1><h2 id="条款18：让接口容易被正确使用，不易被误用"><a href="#条款18：让接口容易被正确使用，不易被误用" class="headerlink" title="条款18：让接口容易被正确使用，不易被误用"></a>条款18：让接口容易被正确使用，不易被误用</h2><p>​加上const可以限制类型内什么事可做，什么事不能做。</p><p>​“让types容易被正确使用，不容易被误用”的表现形式：“除非有好理由，否则应该尽量令你的types的行为与内置types一致”。</p><p>​tr1::shared_ptr提供的某个构造函数接受两个实参：一个是被管理的指针，另一个是引用次数变成0时将被调用的“删除器”。</p><h5 id="Remember：-16"><a href="#Remember：-16" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。</p><p>“促进正确使用”的办法包括接口的一致性，以及与内置类型的行为兼容。</p><p>“阻止误用”的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。</p><p>trl::shared_ptr 支持定制型删除器（<em>custom deleter</em>）。这可防范 DLL 问题，可被用来自动解除[互斥锁](# 条款14：在资源管理类中小心coping行为)（<em>mutexes</em>）等等。</p></blockquote><h2 id="条款19：设计class犹如设计type"><a href="#条款19：设计class犹如设计type" class="headerlink" title="条款19：设计class犹如设计type"></a>条款19：设计class犹如设计type</h2><p>​class设计规范：</p><ul><li><strong>新type的对象应该如何被创建和销毁？</strong></li><li><strong>对象的初始化和对象的赋值该有什么样的差别？</strong></li><li><strong>新type的对象如果被passed by value（以值传递），意味着什么？</strong></li><li><strong>什么是新type的“合法值”？</strong></li><li><strong>你的新type需要配合某个继承图系（inheritance graph）吗？</strong></li><li><strong>你的新type需要什么样的转换？</strong></li><li><strong>什么样的操作符和函数对此新type而言是合理的？</strong></li><li><strong>什么样的标准函数应该驳回？</strong></li><li><strong>谁该取用新type的成员？</strong></li><li><strong>什么是新type的“未声明接口”（<em>undeclared interface</em>）？</strong></li><li><strong>你的新type有多么一般化？</strong></li><li><strong>你真的需要一个新type吗？</strong></li></ul><h5 id="Remember：-17"><a href="#Remember：-17" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>Class的设计就是type的设计。在定义一个新type之前，请确定你已经考虑过本条款覆盖的所有讨论主题。</p></blockquote><h2 id="条款20：宁以pass-by-reference-to-const替换pass-by-value"><a href="#条款20：宁以pass-by-reference-to-const替换pass-by-value" class="headerlink" title="条款20：宁以pass-by-reference-to-const替换pass-by-value"></a>条款20：宁以pass-by-reference-to-const替换pass-by-value</h2><p>​pass by reference-to-const效率高，没有任何构造函数或析构函数被调用，因为没有任何新对象被创建。</p><p>​以by reference方式传递参数也可以避免<code>slicing</code>（对象切割）问题。</p><p>​references往往以<strong>指针实现</strong>出来，因此pass by reference通常意味着真正传递的是指针。</p><h5 id="Remember：-18"><a href="#Remember：-18" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>尽量以 pass-by-reference-to-const 替换 pass-by-value。前者通常比较高效，并可避免切割问题（<em>slicing problem</em>）。<br>以上规则并不适用于内置类型，以及 STL 的迭代器和函数对象。对它们而言， pass-by-value 往往比较适当。</p></blockquote><h2 id="条款21：必须返回对象时，别妄想返回其reference"><a href="#条款21：必须返回对象时，别妄想返回其reference" class="headerlink" title="条款21：必须返回对象时，别妄想返回其reference"></a>条款21：必须返回对象时，别妄想返回其reference</h2><p>​reference只是个名称，代表某个既有对象。</p><p>​函数有两种创建新对象的途径：<strong>在stack空间或在heap空间创建</strong>。如果定义一个local变量，就是在stack空间创建对象。</p><p>​任何函数如果返回一个reference指向某个local对象，都将一败涂地。（如果函数返回指针指向一个local对象，也是一样）。</p><h5 id="Remember：-19"><a href="#Remember：-19" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝不要返回pointer或reference指向一个local stack对象，或返回reference指向一个heap-allocated对象，或返回pointer或reference指向一个local static对象而有可能同时需要多个这样的对象。[条款4](# 条款4：确定对象被使用前已先被初始化)为“在单线程环境中合理返回reference指向一个local static对象”提供了设计实例。</p></blockquote><h2 id="条款22：将成员变量声明为private"><a href="#条款22：将成员变量声明为private" class="headerlink" title="条款22：将成员变量声明为private"></a>条款22：将成员变量声明为private</h2><p>​成员变量的封装性与”成员变量的内容改变时所破坏的代码数量”成反比。所谓改变，也许是从class中移除它。</p><p>​从封装的角度看，只有两种访问权限：<strong>private（提供封装）</strong>和<strong>其他（不提供封装）</strong>。</p><h5 id="Remember：-20"><a href="#Remember：-20" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>切记将成员变量声明为private。这可赋予客户访问数据的一致性、可细微划分访问控制、允诺约束条件获得保证，并提供class作者以充分的实现弹性。</p><p>protected并不比public更具封装性。</p></blockquote><h2 id="条款23：宁以non-member、non-friend替换member函数"><a href="#条款23：宁以non-member、non-friend替换member函数" class="headerlink" title="条款23：宁以non-member、non-friend替换member函数"></a>条款23：宁以non-member、non-friend替换member函数</h2><p>​推崇封装的原因：它使我们能够改变事物而只影响有限客户（能够看到改变的人）。</p><p>​考虑对象内的数据：越少代码可以看到数据（也就是访问它），越多的数据可被封装，越能自由地改变对象数据。</p><p>​对于“有多少代码可以看到某一块数据”的一种粗糙测量：<strong>越多函数可以访问，数据的封装性就越低</strong>。</p><p>​member函数不只可以访问class内的private数据，也可以取用private函数、enums、typedefs等等。non-member和non-friend函数无法访问上述任何东西。</p><h5 id="Remember：-21"><a href="#Remember：-21" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>宁可拿non-member non-friend函数替换member函数。这样做可以增加封装性、包裹弹性（<em>packaging flexibility</em>）和机能扩充性。</p></blockquote><h2 id="条款24：若所有参数皆需类型转换，请为此采用non-member函数"><a href="#条款24：若所有参数皆需类型转换，请为此采用non-member函数" class="headerlink" title="条款24：若所有参数皆需类型转换，请为此采用non-member函数"></a>条款24：若所有参数皆需类型转换，请为此采用non-member函数</h2><p>​在non-explicit构造函数的情况下，只有当参数被列于参数列（<em>parameter list</em>）内，这个参数才是隐式类型转换的合格参与者。地位相当于“被调用之成员函数所隶属的那个对象”——即this对象——的那个隐喻参数，绝不是隐式转换的合格参与者。</p><p>​member函数的反面是non-member函数，不是friend函数。</p><p>​不能够只因函数不该成为member，就自动让它成为friend。</p><h5 id="Remember：-22"><a href="#Remember：-22" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果你需要为某个函数的所有参数（包括被this指针所指的那个隐喻参数）进行类型转换，那么这个函数必须是个non-member。</p></blockquote><h2 id="条款25：考虑写出一个不抛异常的swap函数"><a href="#条款25：考虑写出一个不抛异常的swap函数" class="headerlink" title="条款25：考虑写出一个不抛异常的swap函数"></a>条款25：考虑写出一个不抛异常的swap函数</h2><p>​<code>pimpl</code>手法：以指针指向一个对象，内含真正数据。</p><p>​通常我们不能够（不被允许）改变std命名空间内的任何东西，但可以（被允许）为标准templates（如swap）制造特化版本，使它专属于我们自己的classes。</p><p>​所有STL容器都提供有public swap成员函数和std::swap<code>特化</code>版本（用以调用前者）。</p><p>​C++只允许对class templates<code>偏特化</code>（<em>partially specialize</em>），在function templates身上偏特化是行不通的。</p><p>​客户可以全特化std内的templates，但不可以添加新的templates（或classes或functions或其他任何东西）到std里头。std的内容完全由C++标准委员会决定，标准委员会禁止我们膨胀那些已经声明好的东西。</p><p>​C++<code>名称查找法则</code>（<em>name lookup rules</em>）：更具体地说是所谓argument-dependent lookup（实参取决之查找规则）或Koenig lookup法则。</p><p>​如果swap的缺省实现码对class或class template提供可接受的效率，不需要额外做任何事，任何尝试置换（<em>swap</em>）对象都会取得缺省版本。</p><p>​如果swap缺省实现版的效率不足（几乎总是意味着你的class或template使用了某种pimpl手法），可以做以下事情：</p><blockquote><p>1.提供一个public swap成员函数，让它高效地置换你的类型的两个对象值。这个函数绝不该抛出异常。</p><p>2.在你的class或template所在的命名空间内提供一个non-member swap，并令它调用上述swap成员函数。</p><p>3.如果你正编写一个class（而非class template），为你的class特化std::swap。并令他调用你的swap成员函数。</p><p>如果调用swap，确定包含一个using声明式，以便让std::swap在函数内曝光可见，然后不加任何namespace修饰符，赤裸裸地调用swap。</p></blockquote><p>​<code>成员版swap绝不可抛出异常</code>。因为swap的一个最好的应用是<strong>帮助classes（和class templates）提供强烈的异常安全性（<em>exception-safety</em>）保障</strong>。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="条款26：尽可能延后变量定义式的出现时间"><a href="#条款26：尽可能延后变量定义式的出现时间" class="headerlink" title="条款26：尽可能延后变量定义式的出现时间"></a>条款26：尽可能延后变量定义式的出现时间</h2><p>​延后变量的定义，直到非得使用该变量的前一刻为止，尝试延后这份定义直到能够给它初值实参为止。能够避免构造（和析构）非必要对象，还可以避免无意义的default构造行为。</p><h5 id="Remember：-23"><a href="#Remember：-23" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>尽可能延后变量定义式的出现。这样做可增加程序的清晰度并改善程序效率。</p></blockquote><h2 id="条款27：尽量少做转型动作"><a href="#条款27：尽量少做转型动作" class="headerlink" title="条款27：尽量少做转型动作"></a>条款27：尽量少做转型动作</h2><p>​C风格转型(<em>old-style casts</em>)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(T)expression<span class="comment">//将expression转型为T</span></span><br></pre></td></tr></table></figure><p>​函数风格转型动作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">T</span>(expression)<span class="comment">//将expression转型为T</span></span><br></pre></td></tr></table></figure><p>​C++还提供四种新式转型（<em>new-style</em>或<em>C++-style casts</em>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">const_cast</span>&lt;T&gt;( expression )</span><br><span class="line"><span class="built_in">dynamic_cast</span>&lt;T&gt;( expression )</span><br><span class="line"><span class="built_in">reinterpret_cast</span>&lt;T&gt;( expression )</span><br><span class="line"><span class="built_in">static_cast</span>&lt;T&gt;( expression )</span><br></pre></td></tr></table></figure><ul><li>const_cast 通常被用来将<code>对象的常量性转除</code>（<em>cast away the constness</em>） 。它也是<code>唯一</code>有此能力的C++-style 转型操作符。</li><li>dynamic_cast 主要用来执行<code>“安全向下转型”</code>(<em>safe downcasting</em>)，也就是用来决定某对象是否归属继承体系中的某个类型。它是<code>唯一无法由旧式语法执行的动作</code>，也是<code>唯一可能耗费重大运行成本</code>的转型动作。</li><li>reinterpret_cast 意图执行<code>低级转型</code>，实际动作（及结果）可能取决于编译器,，这也就表示它<code>不可移植</code>。例如将一个 pointer to int转型为一个int。这一类转型在低级代码以外很少见。</li><li>static_cast用来<code>强迫隐式转换</code>（<em>implicit conversions</em>），例如将 non-const 对象转为 const 对象（就像[条款3](# 条款3：尽可能使用const)所为），或将int转为double等等。它也可以用来执行上述<code>多种转换的反向转换</code>，例如将 void* 指针转为 typed 指针，将 pointer-to-base 转为 pointer-to-derived。但它无法将 const 转为 non-const——这个只有 const_cast 才办得到。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123; ... &#125;;</span><br><span class="line">Derived d;</span><br><span class="line">Base* pb = &amp;d;<span class="comment">//隐喻地将Derived*转换为Base*</span></span><br></pre></td></tr></table></figure><p>​建立一个base class指针指向一个derived class对象，但有时候这两个指针值并不相同。这种情况下（有时候）会有个<code>偏移量</code>（<em>offset</em>）在运行期被施行于<strong>Derived</strong><em>指针身上，用以取得正确的<strong>Base</strong></em>指针。对象的布局方式和它们的地址计算方式随编译器的不同而不同，那意味“由于知道对象如何布局”而设计的转型，在某一平台行得通，在其他平台并不一定行得通。</p><p>​之所以需要dynamic_cast，通常是因为想在derived class对象身上执行derived class操作函数，但只有一个“指向base”的pointer或reference，只能靠它们来处理对象。有两个一般性做法可以避免：</p><p>​1.使用容器并在其中存储直接指向derived class对象的指针（通常是智能指针，见[条款13](# 条款13：以对象管理资源)），消除了“通过base class接口处理对象”的需要。</p><blockquote><p>弊端：无法在同一个容器内存储指针“指向所有可能的各种派生类”。如果要处理多种窗口类型，需要多个容器，它们都必须具备类型安全性（<em>type-safe</em>）。</p></blockquote><p>​2.在base class内提供virtual函数，做你想对各个派生类做的事。</p><p>​绝对必须避免所谓的“连串dynamic_casts”。</p><h5 id="Remember：-24"><a href="#Remember：-24" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果可以，尽量避免转型，特别是在注重效率的代码中避免dynamic_casts。如果有个设计需要转型动作，试着发展无需转型的替代设计。</p><p>如果转型是必要的，试着将它隐藏于某个函数背后。客户随后可以调用该函数，而不需将转型放进他们自己的代码内。</p><p>宁可使用C++-style（新式）转型，不要使用旧式转型。前者很容易辨识出来，而且也比较有着分门别类的职掌。</p></blockquote><h2 id="条款28：避免返回handles指向对象内部成分"><a href="#条款28：避免返回handles指向对象内部成分" class="headerlink" title="条款28：避免返回handles指向对象内部成分"></a>条款28：避免返回handles指向对象内部成分</h2><ol><li>成员变量的封装性最多只等于”返回其reference“的函数的访问级别。</li><li>如果const成员函数传出一个reference，后者所指数据与对象自身有关联，而它又被存储于对象之外，那么这个函数的调用者可以修改那笔数据。</li></ol><p>如果返回的是指针或迭代器，相同的情况还是发生，原因也相同。</p><p>​Reference、指针和迭代器统统都是所谓的handles（号码牌，用来取得某个对象），而返回一个”代表对象内部数据“的handle，随之而来的便是”降低对象封装性“的风险。</p><p>​绝对不该令成员函数返回一个指针指向”访问级别较低“的成员函数。</p><p>​dangling handles（空悬的号码牌）：这种handles所指东西（的所属对象）不复存在。</p><h5 id="Remember：-25"><a href="#Remember：-25" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>避免返回handles（包括references、指针、迭代器）指向对象内部。遵守这个条款可增加封装性，帮助const成员函数的行为像个const，并将发生”虚吊号码牌“（<em>dangling handles</em>）的可能性降至最低。</p></blockquote><h2 id="条款29：为”异常安全“而努力是值得的"><a href="#条款29：为”异常安全“而努力是值得的" class="headerlink" title="条款29：为”异常安全“而努力是值得的"></a>条款29：为”异常安全“而努力是值得的</h2><p>​当异常被抛出时，带有<code>异常安全性</code>的函数会：</p><ul><li><strong>不泄露任何资源</strong>。</li><li><strong>不允许数据败坏</strong>。</li></ul><p> 解决资源泄漏：以对象（例如智能指针tr1::shared_ptr）管理资源。</p><p>​一般性规则：较少的码就是较好的码，因为出错机会比较少，而且一旦有所改变，被误解的机会也比较少。</p><p>​异常安全函数（<em>Exception-safe functions</em>）提供三个保证之一：</p><ul><li><strong>基本承诺</strong>：如果异常被抛出，程序内的任何事物仍然保持在有效状态下。没有任何对象或数据结构会因此而败坏，所有对象都处于一种内部前后一致的状态（例如所有的class约束条件都继续获得满足）。然而程序的现实状态（<em>exact state</em>）恐怕不可预料。</li><li><strong>强烈保证</strong>：如果异常被抛出，程序状态不改变。调用这样的函数需有这样的认知：如果函数成功，就是完全成功，如果函数失败，程序会回复到”调用函数之前“的状态。与基本承诺对比，如果调用一个只提供基本承诺的函数，而真的出现异常，程序有可能处于任何状态——只要那是个合法状态。</li><li><strong>不抛掷（<em>nothrow</em>）保证</strong>，承诺绝不抛出异常，因为它们总是能够完成它们原先承诺的功能。作用于内置类型（例如ints，指针等等）身上的所有操作都提供nothrow保证。这是异常安全码中一个必不可少的关键基础材料。</li></ul><p>异常安全码（<em>Exception-safe code</em>）必须提供上述三种保证之一。如果它不这样做，它就不具备异常安全性。</p><p>​可能的话请提供nothrow保证，但对大部分函数而言，抉择往往落在基本保证和强烈保证之间。</p><p>​<code>copy and swap</code>策略会导致强烈保证：</p><blockquote><p>原则：为你打算修改的对象（原件）做出一份副本，然后在那副本身上做一切必要修改。若有任何修改动作抛出异常，原对象仍保持未改变状态。待所有改变都成功后，再将修改过的那个副本和原对象在一个不抛出异常的操作中置换（<em>swap</em>）。</p></blockquote><p>​实现上通常是将所有”隶属对象的数据“从原对象放进另一个对象内，然后赋予原对象一个指针，指向那个所谓的实现对象（<em>implementation object</em>，即副本）。这种手法常被称为<code>pimpl idiom</code>，[条款31](# 条款31：将文件间的编译依存关系降至最低)详细描述了它。</p><p>​“copy-and-swap”策略是对对象状态做出”全有或全无“改变的一个很好办法，但一般而言它并不保证整个函数有强烈的异常安全性。原因：</p><blockquote><p>”连带影响“（<em>side effects</em>）：如果函数只操作局部性状态（local state），便相对容易地提供强烈保证。但是当函数对”非局部性数据“（non-local data）有连带影响时，提供强烈保证就困难得多。</p></blockquote><p>​“强烈保证”并非在任何时刻都显得实际。当”强烈保证“不切实际时，就必须提供”基本保证“。</p><p>​一个软件系统要不就具备异常安全性，要不就全然否定，没有所谓的”局部异常安全系统“。</p><h5 id="Remember：-26"><a href="#Remember：-26" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>异常安全函数（<em>Exception-safe functions</em>）即使发生异常也不会泄漏资源或允许任何数据结构败坏。这样的函数区分为三种可能的保证：基本型、强烈型、不抛异常型。</p><p>”强烈保证“往往能够以copy-and-swap实现出来，但”强烈保证“并非对所有函数都可实现或具备现实意义。</p><p>函数提供的”异常安全保证“通常最高只等于其所调用的各个函数的”异常安全保证“中的最弱者。</p></blockquote><h2 id="条款30：透彻了解inlining的里里外外"><a href="#条款30：透彻了解inlining的里里外外" class="headerlink" title="条款30：透彻了解inlining的里里外外"></a>条款30：透彻了解inlining的里里外外</h2><p>​inline函数，看起来像函数，动作像函数，比宏好得多，可以调用它们又不需要蒙受函数调用所招致的额外开销。</p><p>​编译器最优化机制通常被设计用来浓缩那些”不含函数调用”的代码，当inline某个函数，或许编译器就因此有能力对它（函数本体）执行<code>语境相关最优化</code>。</p><p>​inline函数，“对此函数的每一个调用”都以函数本体替换之。</p><p>​过度热衷inlining会造成程序体积太大（可用空间而言）。 即使拥有虚内存，inline造成的代码膨胀亦会导致额外的换页行为（<em>paging</em>），降低指令高速缓存装置的击中率（<em>instruction cache hit rate</em>）以及伴随这些而来的效率损失。</p><p>​如果inline函数的本体很小，编译器针对“函数本体”所产出的码可能比针对“函数调用”所产出的码更小。函数inlining确实可能导致较小的目标码（<em>object code</em>）和较高的指令高速缓存装置击中率。</p><p>​inline只是对编译器的一个申请，不是强制命令。</p><p>​inline申请：</p><ul><li>隐喻方式：将函数定义于class定义式内（通常是成员函数，friend函数也是）。</li><li>明确声明：在函数定义式前加上关键字inline。</li></ul><p>inline函数<code>通常</code>一定被置于头文件内，因为<code>大多数建置环境</code>（<em>build environments</em>）在编译过程中进行inlining，而为了将一个“函数调用”替换为“被调用函数的本体”，编译器必须知道那个函数长什么样子。Templates<code>通常</code>也被置于头文件内，因为它一旦被使用，编译器为了将它具现化，需要知道它长什么样子。<code>Template的具现化与inlining无关</code>。</p><p>​大部分编译器拒绝将太过复杂（例如带有循环或递归）的函数inlining，而所有对virtual函数的调用（除非是最平淡无奇的）也都会使inlining 落空。这不该令你惊讶，因为virtual意味“等待，直到运行期才确定调用哪个函数”，而inline意味“执行前，先将调用动作替换为被调用函数的本体”。</p><p>​一个表面上看似inline的函数是否真是inline，取决于你的建置环境，主要取决于编译器。幸运的是大多数编译器提供了一个诊断级别：如果它们无法将你要求的函数inline化，会给你一个警告信息（见<a href="#">条款53</a>）。</p><p>​编译器通常不对“函数指针而进行的调用”实施inlining。</p><p>​inline函数无法随着程序库的升级而升级。</p><p>​决定哪些函数该被声明为inline的<code>逻辑策略</code>：一开始先不要将任何函数声明为inline，或至少将inlining施行范围局限在那些“一定成为inline”（见<a href="#">条款46</a>）或“十分平淡无奇”的函数身上。</p><h5 id="Remember：-27"><a href="#Remember：-27" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>将大多数inlining限制在小型、被频繁调用的函数身上。这可使日后的调试过程和二进制升级（<em>binary upgradability</em>）更容易，也可使潜在的代码膨胀问题最小化，使程序的速度提升机会最大化。</p><p>不要只因为function templates出现在头文件，就将它们声明为inline。</p></blockquote><h2 id="条款31：将文件间的编译依存关系降至最低"><a href="#条款31：将文件间的编译依存关系降至最低" class="headerlink" title="条款31：将文件间的编译依存关系降至最低"></a>条款31：将文件间的编译依存关系降至最低</h2><p>​两个classes，一个只提供接口，另一个负责实现该接口。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span><span class="comment">//标准程序库组件不该被前置声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span><span class="comment">//含入tr1::shared_ptr</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span>;<span class="comment">//Person实现类的前置声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>;<span class="comment">//Person接口用到的classes的前置声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Date&amp; birthday, <span class="type">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::tr1::shared_ptr&lt;PersonImpl&gt; pImpl;<span class="comment">//指针, 指向实现物;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​在这里，main class（<em>Person</em>）只内含一个指针成员（这里使用std::tr1::shared_ptr，指向其实现类（<em>PersonImpl</em>）。<code>pimpl idiom</code>（pimpl是“pointer to implementation”的缩写）。</p><p>​<code>接口与实现分离</code>，分离的关键在于以“声明的依存性”替换“定义的依存性”，设计策略：</p><ul><li><strong>如果使用object reference或object pointers可以完成任务，就不要使用objects</strong>。可以只靠一个类型声明式就定义出指向该类型的references和pointers；但如果定义某类型的objects，就需要用到该类型的定义式。</li><li><strong>如果能够，尽量以class声明式替换class定义式</strong>。声明一个函数而它用到某个class时，并不需要该class的定义；纵使函数以by value方式传递该类型的参数（或返回值）亦然。</li><li><strong>为声明式和定义式提供不同的头文件</strong>。</li></ul><p>使用pimple idiom的classes，往往被称为<code>Handle classes</code>。让class变成一个Handle class并不会改变它做的事，只会改变它做事的方法。</p><p>另一个制作<code>Handle class</code>的办法是，令Person成为一种特殊的 abstract base class（抽象基类），称为<code>Interface class</code>。这种 class的目的是详细一一描述derived classes的接口（见<a href="#">条款34</a>），因此它通常不带成员变量，也没有构造函数，只有一个 virtual析构函数（见[条款7](# 条款7：为多态基类声明virtual析构函数)）以及一组pure virtual函数，用来叙述整个接口。</p><p>​Interface class的客户必须有办法为这种class创建新对象。它们通常调用一个特殊函数，此函数扮演“真正将被具现化”的那个derived classes的构造函数角色。这样的函数通常称为<code>factory（工厂）函数</code>或<code>virtual构造函数</code>。它们返回指针（或更为可取的智能指针，见[条款18](# 条款18：让接口容易被正确使用，不易被误用)），指向动态分配所得对象，而该对象支持interface class的接口。这样的函数又往往在interface class内被声明为<code>static</code>。</p><p>​支持interface class接口的那个具象类（<em>concrete classes</em>）必须被定义出来，而且真正的构造函数必须被调用。一切都在virtual构造函数实现码所在的文件内秘密发生。</p><p>​Handle classes和interface classes解除了接口和实现之间的耦合关系，从而降低文件间的编译依存性（<em>compilation dependencies</em>）。</p><p>​将会付出一些代价：运行期丧失若干速度，为每个对象超额付出若干内存。</p><p>​不论Handle classes或interface classes，一旦脱离inline函数都无法有太大做为。</p><p>​应该考虑以渐进方式使用这些技术。在程序发展过程中使用Handle classes或interface classes以求实现码有所变化时对其客户带来最小冲击。而当它们导致速度和&#x2F;或大小差异过于重大以至于classes之间的耦合相形之下不成为关键时，就以具象类（<em>concrete classes</em>）替换Handle classes或interface classes。</p><h5 id="Remember：-28"><a href="#Remember：-28" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>支持“编译依存性最小化”的一般构想是：相依于声明式，不要相依于定义式。基于此构想的两个手段是Handle classes或interface classes。</p><p>程序库头文件应该以“完全且仅有声明式”（<em>full and declaration-only formas</em>）的形式存在。这种做法不论是否涉及templates都适用。</p></blockquote><h1 id="继承与面向对象设计"><a href="#继承与面向对象设计" class="headerlink" title="继承与面向对象设计"></a>继承与面向对象设计</h1><p>​“public继承”意味”is-a”；virtual函数意味“接口必须被继承”，non-virtual函数意味“接口和实现都必须被继承”。</p><h2 id="条款32：确定你的public继承塑模出is-a关系"><a href="#条款32：确定你的public继承塑模出is-a关系" class="headerlink" title="条款32：确定你的public继承塑模出is-a关系"></a>条款32：确定你的public继承塑模出is-a关系</h2><p>​规则：<strong>public inheritance</strong>（公开继承）意味着<strong>“is-a”</strong>（是一种）的关系。</p><p>​令class D（“Derived”）以public形式继承class B（“Base”），则每一个类型为D的对象同时也是一个类型为B的对象，反之不成立。B比D表现出更一般化的概念，而D比B表现出更特殊化的概念。</p><p>​ 代码通过编译并不表示就可以正确运作。</p><h5 id="Remember：-29"><a href="#Remember：-29" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>“public继承”意味<strong>is-a</strong>。适用于base classes身上的没意见事情一定也适用于derived classes身上，因为每一个derived class对象也都是一个base class对象。</p></blockquote><h2 id="条款33：避免遮掩继承而来的名称"><a href="#条款33：避免遮掩继承而来的名称" class="headerlink" title="条款33：避免遮掩继承而来的名称"></a>条款33：避免遮掩继承而来的名称</h2><p>​内层作用域的名称会遮掩（遮蔽）外围作用域的名称。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231115192506634.png" alt="image-20231115192506634"></p><p>​当编译器处于SomeFunc的作用域内并遭遇名称x时，它在local作用域内查找是否有什么东西带着这个名称。 如果找到就不再找其他作用域。</p><p>​derived class作用域被嵌套在base class作用域内：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231115194625399.png" alt="image-20231115194625399"></p><p>​如果继承base class并加上重载函数，希望重新定义或覆写（推翻）其中一部分，则必须为那些原本会被遮掩的每个名称引入一个<code>using声明式</code>，否则某些希望继承的名称会被遮掩。</p><p>​inline<code>转交函数</code>（<em>forwarding function</em>）的另一个用途是为那些不支持using声明式（注：这并非正确行为）的老旧编译器另辟一条新路，将继承而得的名称汇入derived class作用域内。</p><h5 id="Remember：-30"><a href="#Remember：-30" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>derived classes内的名称会遮掩base classes内的名称。在public继承下从来没有人希望如此。</p><p>为了让被遮掩的名称再见天日，可使用using声明式或转交函数（<em>forwarding functions</em>）。</p></blockquote><h2 id="条款34：区分接口继承和实现继承"><a href="#条款34：区分接口继承和实现继承" class="headerlink" title="条款34：区分接口继承和实现继承"></a>条款34：区分接口继承和实现继承</h2><p>​public继承概念：函数接口（<em>function interfaces</em>）继承和函数实现（<em>function implementations</em>）继承。</p><p>​public形式继承：</p><ul><li><strong>成员函数的接口总是会被继承8</strong>。</li><li><strong>声明一个pure virtual函数的目的是为了让derived classes只继承函数接口</strong>。pure virtual函数有两个最突出的特性：它们必须被任何”继承了它们“的具象class重新声明，而且它们在抽象class中通常没有定义。可以为pure virtual函数提供定义，但调用它的唯一途径是”调用时明确指出其class名称“。</li><li><strong>声明简朴的（非纯）impure virtual函数的目的，是让derived classes继承该函数的接口和缺省实现</strong>。</li><li><strong>声明non-virtual函数的目的是为了令derived classes继承函数的接口及一份强制性实现</strong>。non-virtual函数代表的意义是不变性（<em>invariant</em>）凌驾特异性（<em>specialization</em>）。</li></ul><h5 id="Remember：-31"><a href="#Remember：-31" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>接口继承和实现继承不同。在public继承之下，derived classes总是继承base class的接口</p><p>pure virtual函数只具体指定接口继承。</p><p>简朴的（非纯）impure virtual函数具体指定接口继承及缺省实现继承。</p><p>non-virtual函数具体指定接口继承以及强制性实现继承。</p></blockquote><h2 id="条款35：考虑virtual函数以外的其他选择"><a href="#条款35：考虑virtual函数以外的其他选择" class="headerlink" title="条款35：考虑virtual函数以外的其他选择"></a>条款35：考虑virtual函数以外的其他选择</h2><h3 id="藉由Non-Virtual-Interface手法实现Template-Method模式"><a href="#藉由Non-Virtual-Interface手法实现Template-Method模式" class="headerlink" title="藉由Non-Virtual Interface手法实现Template Method模式"></a>藉由Non-Virtual Interface手法实现Template Method模式</h3><p>​<strong>Template Method</strong>设计模式（与C++ templates并无关联）的一个独特表现形式：令客户通过public non-virtual成员函数间接调用private virtual函数，称为<code>non-virtual interface（NVI）手法</code>。这个non-virtual函数称为virtual函数的外覆器（<em>wrapper</em>）。</p><p>​外覆器（<em>wrapper</em>）确保virtual函数被<code>调用之前</code>设定好适当场景，并在<code>调用结束之后</code>清理场景。</p><ul><li>“事前工作”可以包括：锁定互斥器（<em>locking a mutex</em>）、制造运转日志记录项（<em>log entry</em>）、验证class约束条件、验证函数先决条件。</li><li>“事后工作”可以包括：互斥器解除锁定（<em>unlocking a mutex</em>）、验证函数的事后条件、再次验证class约束条件。</li></ul><blockquote><p>使用non-virtual interface（NVI）手法，那是<strong>Template Method</strong>设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性（private或protected）的virtual函数。</p></blockquote><h3 id="藉由Function-Pointers实现Strategy模式"><a href="#藉由Function-Pointers实现Strategy模式" class="headerlink" title="藉由Function Pointers实现Strategy模式"></a>藉由Function Pointers实现Strategy模式</h3><blockquote><p>将virtual函数替换为”函数指针成员变量“，这是<strong>Strategy</strong>设计模式的一种分解表现形式。</p></blockquote><h2 id="藉由tr1-function完成Strategy模式"><a href="#藉由tr1-function完成Strategy模式" class="headerlink" title="藉由tr1::function完成Strategy模式"></a>藉由tr1::function完成Strategy模式</h2><p>​以tr1::function替换函数指针，将因此允许客户在计算人物健康指数时，使用任何兼容的可调用物（<em>callable entity</em>）。</p><blockquote><p>以tr1::function成员变量替换virtual函数，因而允许使用任何可调用物（<em>callable entity</em>）搭配一个兼容于需求的签名式。这也是<strong>Strategy</strong>设计模式的某种形式。</p></blockquote><h2 id="古典的Strategy模式"><a href="#古典的Strategy模式" class="headerlink" title="古典的Strategy模式"></a>古典的Strategy模式</h2><blockquote><p>将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是<strong>Strategy</strong>设计模式的传统实现手法。</p></blockquote><h5 id="Remember：-32"><a href="#Remember：-32" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>virtual函数的替代方案包括NVI手法及<strong>Strategy</strong>设计模式的多种形式。NVI手法自身是一个特殊形式的<strong>Template Method</strong>设计模式。</p><p>将机能从成员函数移到class外部函数，带来的一个缺点是，非成员函数无法访问class的non-public成员。</p><p>tr1::function对象的行为就像一般函数指针。这样的对象可接纳”与给定的目标签名式（<em>target signature</em>）兼容“的所有可调用物（<em>callable entity</em>）。</p></blockquote><h2 id="条款36：绝不重新定义继承而来的non-virtual函数"><a href="#条款36：绝不重新定义继承而来的non-virtual函数" class="headerlink" title="条款36：绝不重新定义继承而来的non-virtual函数"></a>条款36：绝不重新定义继承而来的non-virtual函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mf</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mf</span><span class="params">()</span></span>;<span class="comment">//遮掩了B::mf</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>public继承以为<strong>is-a</strong>（是一种）的关系。class内声明一个non-virtual函数会为该class建立起一个不变性凌驾其特异性。</p><ul><li>适用于B对象的每一件事，也适用于D对象，因为每个D对象都是一个B对象；</li><li>B的derived classes一定会继承mf的接口和实现，因为mf是B的一个non-virtual函数。</li></ul><p>任何情况下都不该重新定义一个继承而来的non-virtual函数。</p><h5 id="Remember：-33"><a href="#Remember：-33" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝对不要重新定义继承而来的non-virtual函数。</p></blockquote><h2 id="条款37：绝不重新定义继承而来的缺省参数值"><a href="#条款37：绝不重新定义继承而来的缺省参数值" class="headerlink" title="条款37：绝不重新定义继承而来的缺省参数值"></a>条款37：绝不重新定义继承而来的缺省参数值</h2><p>​<code>virtual函数</code>是<code>动态绑定</code>（<em>dynamically bound</em>），而<code>缺省参数值</code>是<code>静态绑定</code>（<em>statically bound</em>）。</p><p>​静态绑定又名前期绑定，early binding；动态绑定又名后期绑定，late binding。</p><p>​对象静态类型（<em>static type</em>）：对象在程序中被声明时所采用的类型。</p><p>​对象动态类型（<em>dynamic type</em>）：目前所指对象的类型。动态类型可以表现出一个对象将会有什么行为。可在程序执行过程中改变（通常是由赋值动作）。</p><p>​virtual函数是动态绑定而来，意思是调用一个virtual函数时，究竟调用哪一份函数实现代码，取决于发出调用的那个对象的动态类型。</p><p>​为何缺省参数值是静态绑定？为了程序的执行速度和编译器是实现上的简易度。如果缺省参数值是动态绑定，编译器就必须有某种办法在运行期为virtual函数决定适当的参数缺省值。</p><h5 id="Remember：-34"><a href="#Remember：-34" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝对不要重新定义一个继承而来的缺省参数值，因为缺省参数值都是静态绑定，而virtual函数——你唯一应该覆写的东西——却是动态绑定。</p></blockquote><h2 id="条款38：通过复合塑模出has-a或”根据某物实现出“"><a href="#条款38：通过复合塑模出has-a或”根据某物实现出“" class="headerlink" title="条款38：通过复合塑模出has-a或”根据某物实现出“"></a>条款38：通过复合塑模出has-a或”根据某物实现出“</h2><p>​<code>复合</code>（<em>composition</em>）：是类型之间的一种关系。某种类型的对象内含它种类型的对象。</p><p>​当复合发生于<code>应用域</code>内的对象之间，表现出<strong>has-a</strong>关系；当复合发生于<code>实现域</code>内则是表现出<strong>is-implemented-in-terms-of</strong>的关系。</p><p>​</p><p>​</p><p>​</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png&quot; alt=&quot;image-20231027152734799&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    
    <category term="Effective_Cpp" scheme="http://example.com/tags/Effective-Cpp/"/>
    
  </entry>
  
</feed>
