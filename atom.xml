<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-08T10:23:36.732Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>zy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动互连网技术考试</title>
    <link href="http://example.com/blogs/22e916fa.html"/>
    <id>http://example.com/blogs/22e916fa.html</id>
    <published>2023-11-06T16:17:58.000Z</published>
    <updated>2023-11-08T10:23:36.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>1.移动互联网MI(Mobile Internet) 就是将<code>移动通信</code>和<code>互联网</code>二者结合起来，成为一体。</p><p>2.移动互联网三要素：<code>网络</code>、<code>应用</code>、<code>终端</code></p><p>3.移动互联网的主要特点：</p><ul><li>高便携性</li><li>终端移动性</li><li>业务、终端、网络的强关联性</li><li>业务使用的私密性</li><li>局限性：主要体现在网络能力和终端能力两方面的限制</li></ul><p>4.移动互联网的发展速度已远远超越<code>摩尔定律</code>。</p><p>5.Web3.0的关键技术有<code>区块链技术</code>、<code>去中心化应用</code>等。</p><p>6.Web发展简史：</p><ul><li>Web1.0是Web的“<code>可读取</code>”阶段</li><li>Web2.0是Web的“<code>可交互</code>”阶段</li><li>Web3.0是网络的“<code>可执行</code>”阶段</li></ul><p>7.移动网络类型：</p><ul><li>蜂窝网</li><li>无线局域网 (WLAN)</li><li>个人局域网(PAN)</li></ul><p>8.为什么需要蜂窝：<code>频率复用</code>。</p><p>9.蜂窝技术分类：</p><ul><li><code>宏蜂窝</code>技术</li><li><code>微蜂窝</code>技术</li><li><code>智能蜂窝</code>技术</li></ul><p>10.（4G）当前，被ITU所承认主流技术：</p><ul><li><code>LTE</code>（ Long Term Evolution，长期演进）</li><li><code>LTE-A</code>（ LTE-Advanced ）</li></ul><p>11.4G的主要技术：</p><ul><li>正交频分复用（OFDM） </li><li>多输入多输出技术（MIMO） </li><li>载波聚合技术 </li><li>多点协作传输技术 </li><li>无线中继技术 </li><li>上&#x2F;下行多天线增强技术</li></ul><p>12.（5G）从市场需求来看，<code>移动互联网</code>和<code>物联网</code>是下一代移动通信系统发展的两大主要驱动力。</p><p>13.无线网络的基本类型：</p><ul><li>无线广域网（WWAN）</li><li>无线城域网（WMAN）</li><li>无线局域网（WLAN）</li><li>无线个域网（WPAN）</li><li>无线体域网（WBAN）</li></ul><p>14.<code>不同类型</code>的无线网络所<code>重点关注</code>的协议<code>层次</code>是不一样的。</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="简单爬虫1"><a href="#简单爬虫1" class="headerlink" title="简单爬虫1"></a>简单爬虫1</h2><p>1.搜索引擎的工作过程：</p><ul><li>抓取网页信息</li><li>分析网页</li><li>找到相关文档</li></ul><p>2.搜索引擎并不真正搜索互联网，它搜索的实际上是预先整理好的<code>网页索引数据库</code>。</p><p>3.搜索引擎的发展阶段：</p><ul><li>第一代搜索引擎：集中式检索</li><li>第二代搜索引擎：分布式检索</li><li>第三代搜索引擎的代表是Google</li><li>第四代搜索引擎：主要的变化是从<code>信息检索到信息推送</code>的转变</li></ul><p>4.网络爬虫是一种通过既定<code>规则（网络爬虫算法）</code>，能够<code>自动提取</code>网页信息的<code>程序</code>，是<code>搜索引擎的重要组成部分</code>。</p><p>5.通用网络爬虫的基本工作流程：</p><ul><li>获取初始的URL</li><li>爬取网页，获取新的URL</li><li>将新的URL放入URL队列</li><li>从URL队列中读取新的URL进行网页下载</li><li>设置停止条件</li></ul><p>6.传统爬虫的基本流程：</p><ul><li>发起请求（Request）</li><li>获取响应内容（Response）</li><li>解析内容</li><li>保存数据</li></ul><p>7.HTTP（HyperText Transfer Protocol），即<code>超文本传输协议</code>。采用HTTP协议的程序默认使用的端口号为<code>80</code>。</p><p>8.HTTPS：<code>安全套接字层超文本传输协议</code>。采用HTTPS协议的程序默认使用的端口号为<code>443</code>。</p><p>9.GET和POST的简单比较：</p><blockquote><p>GET和POST的区别就是：请求的数据GET是在url中，POST则是存放在头部 </p><p><code>GET请求</code>：请求的数据会附加在URL之后，以<code>?</code>分割URL和传输数据，多个参数用<code>&amp;</code>连接。URL的编码格式采用的是ASCII编码，而不是unicode， 即是说所有的非ASCII字符都要编码之后再传输。 </p><p> <code>POST请求</code>：POST请求会把请求的数据放置在HTTP请求包的<code>包体</code>中，需要构造一个<code>表单</code>，通过表单提交得到POST请求。 </p><p><code>GET请求的数据会暴露(明文)在地址栏中，而POST请求则不会</code>。 </p><p>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</p></blockquote><p>10.Request–请求头：</p><ul><li><code>Accept</code>请求头表示可接受的响应内容</li><li><code>User-Agent</code>属性表示客户端的身份标识字符串</li><li><code>Cookie</code>是请求报文中可用的属性，也是客户端最重要的请求头</li></ul><p>11.HTTP协议本身是 <code>无状态的</code>，实现状态保持需要 <code>Cookie</code>和<code>Session</code>。</p><p>12.HTTP状态码是用来表示网页服务器响应状态：</p><ul><li><strong>200：请求成功</strong></li><li><strong>400：request错误</strong></li><li><strong>403：服务器拒绝执行</strong></li><li><strong>404：请求的资源没发现</strong></li><li><strong>500：未知错误</strong></li><li><strong>503：服务器当前过载或维护</strong></li></ul><p>13.简单爬虫框架：</p><ul><li>爬虫调度</li><li>模块URL管理器</li><li>网页下载器</li><li>网页解析器</li></ul><h2 id="简单爬虫2"><a href="#简单爬虫2" class="headerlink" title="简单爬虫2"></a>简单爬虫2</h2><p>14.Python中提供了多种解析网页数据的技术，包括<code>正则表达式</code>、<code>XPath</code>、 <code>Beautiful Soup</code>、<code>JSONPath</code>。</p><p>15.什么是正则表达式？</p><ul><li>正则表达式是一种定义了搜索模式的<code>特征序列</code>，主要用于字符串的模式匹 配或字符的匹配</li><li><code>正则表达式就是其中一种进行数据筛选的表达式</code></li></ul><ol start="16"><li>贪婪模式就是<code>尽可能多</code>的匹配 ：<code> .*</code>；懒惰模式就是<code>尽可能少</code>的匹配: <code>.*?</code>。</li></ol><p>17.HTML就是网页源代码，是一种结构化的标记语言。HTML 可以描述一个网页的<code>结构信息</code>。</p><p>18.BeautifulSoup提供了<code>CSS选择器</code>来获取节点内容。</p><p>19.CSS（层叠样式表）的选择器用于选择网页元素，可以分为<code>标签选择器</code>、<code>类选择器</code>和<code>id选择器</code>三种。</p><p>20.Robots协议（也称为爬虫协议、机器人协议等）的全称是“<code>网络爬虫排除标准</code>”。</p><p>21.robots.txt 是存放在站点根目录下的一个纯文本文件。例如：<a href="https://www.baidu.com/robots.txt%E3%80%82">https://www.baidu.com/robots.txt。</a></p><p>22.图的遍历算法有两种， 即深度优先算法<code>DFS</code>和宽度优先算法<code>BFS</code>。</p><h2 id="动态爬虫"><a href="#动态爬虫" class="headerlink" title="动态爬虫"></a>动态爬虫</h2><p>23.动态页面的内容生成方式可以分成两类：<code>服务端生成</code>，<code>客户端生成</code>。</p><p>24.Web页面中经常使用的脚本语言有：<code>jsp</code>、<code>asp</code>、<code>php</code>等。</p><p>25.AJAX 最大的优点是<code>在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</code>。</p><p>26.爬取动态加载的内容方法：</p><ul><li>通过浏览器审查元素解析地址</li><li>通过Selenium模拟浏览器抓取</li></ul><p>27.模拟登录的两种主要方法：</p><ul><li>表单登录 </li><li>Cookie登录</li><li>使用Selenium模拟登录（第三种方法）</li></ul><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>28.Scrapy是一个使用Python语言编写的开源网络<code>爬虫框架</code>。</p><p>29.Scrapy爬虫框架主要由：</p><ul><li>引擎</li><li>调度器</li><li>下载器</li><li>Spiders</li><li>Item Pipelines</li><li>下载器中间件</li><li>Spider中间件</li></ul><p>30.Scrapy框架中三种数据流对象：<code>Request</code>、 <code>Response</code>和<code>Items</code></p><ul><li><code>Request</code>是Scrapy中的HTTP<code>请求对象</code></li><li><code>Response</code>是Scrapy中的HTTP<code>响应对象</code></li><li><code>Item</code>是种简单的容器，用于设置目标和<code>保存</code>爬取得到的数据</li></ul><p>31.<code>Basic：基本爬虫模板；Crawl：自动爬虫模板</code>。</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>32.所谓<code>分词</code>，指的就是将一个中文文本分割成若干个<code>独立的</code>、<code>有意义</code>的基本单位的过程。</p><p>33.一般分词方法：</p><ul><li>基于<code>词典</code>的分词方法</li><li>基于<code>理解</code>的分词方法：语义信息</li><li>基于<code>统计</code>的分词方法：频率</li></ul><p>34.正向最大匹配法（FMM）：从<code>句子开头</code>开始处理，没有匹配成功就从<code>段末尾</code>减去一个字。</p><p>35.逆向最大匹配法（BMM）：从<code>句子末尾</code>开始处理，匹配不成功时去掉的是<code>前面</code>的一个汉字。</p><p>36.逆向匹配的切分精度略高于正向匹配。</p><p>37.Jieba分词三种分词模式：</p><ul><li>精确模式（默认）</li><li>全模式</li><li>搜索引擎模式</li></ul><p>38.分词匹配效率：<code>Trie树</code>常用于加速分词查找词典问题。</p><p>39.基于统计分词的步骤：</p><ul><li>建立<code>统计语言模型</code></li><li>对句子进行<code>单词</code>划分，然后对划分结果进行<code>概率计算</code>，获得概率最大的分词方式</li></ul><p>40.概率语言模型是一种基于统计的分词方法，主要思想：<code>词是稳定的组合</code>。</p><p>41.分词方法中所应用的统计模型有：条件随机场模型<code>CRF </code>、隐Markov 模型<code>HMM</code>、<code>最大熵</code>模型、<code>N-gram</code>模型</p><p>42.HMM用来描述一个含有<code>隐含未知参数</code>的马尔可夫过程。</p><p>43.HMM的三个基本问题：</p><ul><li>评估问题</li><li>解码问题</li><li>学习问题</li></ul><p>44.HMM是将分词作为<code>字</code>在<code>字符串</code>中的<code>序列标注</code>来实现的。</p><p>45.Jieba分词算法：<code>有向无环图（DAG)</code>。</p><h2 id="文本相似性"><a href="#文本相似性" class="headerlink" title="文本相似性"></a>文本相似性</h2><p>46.文本相似度计算的常用模型：<code>词袋</code>模型、<code>词向量</code>模型。</p><p>47.文本表示：</p><ul><li>文本表示的意思是把<code>字词</code>处理成<code>向量</code>或<code>矩阵</code>，以便计算机能进行处理。 </li><li>文本表示按照粗细粒度划分，一般可分为<code>字</code>级别、<code>词语</code>级别和<code>句子</code>级别的文本表示。</li><li>文本表示分为<code>离散表示</code>（代表是词袋模型）和<code>分布式（词嵌入）表示</code>。</li></ul><p>48.<code>TF-IDF</code>（词频-逆文件频率）是一种统计方法，用以评估一<code>字词</code>对于文件的重要程度。</p><p>49.TF（词频）：<code>衡量⼀个词在⽂档中出现的频繁程度，但是没有考虑到该词对文档的区分能力</code>。</p><p>50.IDF（逆向文件频率 ）：<code>强调词的区分能力</code>。</p><p>51.TextRank算法能够从一个给定的文本中提取出该文本的<code>关键词</code>、<code>关键词组</code>。</p><p>52.PageRank算法构造的网络中的边是<code>有向无权边</code>，而TextRank算法构造的网络中的边是<code>无向有权边</code>。</p><p>53.进行文档<code>句子相似度</code>分析可以采用<code>词频统计</code>及<code>余弦相似性</code>分析，基本思想是<code>两个句子或文档越相似，则它们的内容（文本）也越相似</code>。</p><p>54.Simhash算法的简单过程：</p><blockquote><p>将每个字符串进行字符串二进制化</p><p>对字符串的二进制值进行加 权</p><p>将所有字符串的加权字符串进行累加，累加顺序按照各自位置进行</p><p>进行降维得到签名的二进制字符串</p></blockquote><p>55.词语是表达<code>语义</code>的基本单元。</p><p>56.神经网络语言模型NNLM有三层：<code>嵌入层</code>、<code>全连接层</code>、<code>输出层</code>。</p><p>57.Word2Vec是一种著名的<code>词嵌入</code>方法， 它可以计算每个单词在其给定语料库环境下的<code>分布式词向量</code>。</p><p>58.word2vec工具主要包含两个模型：<code>跳字模型</code>（skip-gram） 和<code>连续词袋模型</code>（CBOW）。</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>1.Android系统架构采用了软件堆层的架构，主要分为四部分：</p><ul><li>Linux核心层</li><li>Android 运行环境</li><li>应用程序框架层</li><li>应用程序层</li></ul><p>2.AVD（Android Virtual Device，安卓虚拟设备），一般称其为<code> Android模拟器</code>，可以用来模拟一个Android手机或平板电脑。</p><p>3.<code>AndroidManifest.xml</code>是每个应用程序都需要的系统配置文件，它位于应用程序根目录下。<code>入口为MainActivity</code>。</p><h2 id="应用界面"><a href="#应用界面" class="headerlink" title="应用界面"></a>应用界面</h2><p>4.在手机上设计用户界面必须满足以下两点基本要求：</p><ul><li>界面与程序分离</li><li>自适应手机屏幕</li></ul><p>5.Android布局的类型：</p><ul><li>线性布局</li><li>相对布局</li><li>表格布局</li><li>层布局（帧布局）</li><li>网格布局（Android4.0新增的布局管理器）</li><li>约束布局</li></ul><p>6.Android UI都是由<code>布局</code>和<code>控件</code>组成。</p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>7.Android应用程序包括：<code>逻辑控制层</code>与<code>表现层</code>。分开设计。</p><p>8.Android程序的四大组件：</p><ul><li><code>Activity</code>（活动）：根本</li><li><code>Service</code>（服务）</li><li><code>Broadcast Receiver</code>（广播接收器）</li><li><code>Content Provider</code>（内容提供器）</li><li>Intent（意图）：是一个将要执行的操作的<code>抽象描述</code></li></ul><p>9.一个Android应用通常都会包含多个Activity，但<code>只有一个Activity会作为程序的入口</code>。</p><p>10.Android系统是一个<code>多任务</code>的操作系统。</p><p>11.Activity主要有如下的四种状态：</p><ul><li>Running（运行）</li><li>Paused（暂停）</li><li>Stopped（停止）</li><li>Destroyed（销毁）</li></ul><h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><p>12.Android提供了以下三种数据存储方式：</p><ul><li>文件存储</li><li>SharedPreferences存储</li><li>SQLite数据库存储</li></ul><p>13.在TCP&#x2F;IP通信协议中，套接字（Socket）就是<code>IP地址</code>与<code>端口号</code>的组合。</p><h2 id="移动端机器学习"><a href="#移动端机器学习" class="headerlink" title="移动端机器学习"></a>移动端机器学习</h2><p>14.Tensorflow的设计目标是保证<code>灵活性</code>、 <code>高效性</code>、良好的<code>可扩展性</code>以及<code>可移植性</code>。</p><p>15.TensorFlow有两种编程模式：<code>图模式</code>与<code>eager execution模式</code>。</p><p>16.TensorFlow Lite包括两个主要组件：<code>转换器</code>和<code>解释器</code>。</p><p>17.卷积神经网络：借助<code>卷积核</code>提取特征后，送入全连接网络。</p><p>18.卷积是什么？即特征提取器，就是CBAPD。</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p>1.移动通信系统的分类，按消息传送的方向与时间分类：<code>单工制</code>、<code>半双工制</code>、<code>双工制</code>（目前基本采用）。</p><p>2.双工制分类：</p><ul><li>频分双工 （FDD）：GSM使用</li><li>时分双工 （TDD）：TD-SCDMA使用</li></ul><p>3.TDD的优势：<code>频谱利用效率更高，系统地容量更大</code>。</p><p>4.通信系统的主要性能指标是<code>有效性</code>和<code>可靠性</code>。</p><p>5.移动通信的特点：</p><ul><li>远近效应</li><li>多普勒效应：当移动台以恒定的速率沿某一方向移动时，由于<code>传播路程差的原因</code>，会出现合成频率在中心频率上下偏移的现象。<strong>速度越大，多普勒效应越明显</strong>。</li><li>电波传播存在多径衰落</li></ul><p>6.<code>信源编码</code>：在发送端，把经过<code>采样</code>和<code>量化</code>后的模拟信号变换成数字脉冲信号的过程</p><p>7.信源编码通常分为三类：</p><ul><li><code>波形编码</code>：语音波形</li><li><code>参数编码</code>：人的发音机制</li><li><code>混合编码</code>：波形编码+参数编码</li></ul><p>8.信道编码技术的目的是如何<code>以最小的监督码元，获得最大检错和纠错能力</code>。</p><p>9.在发送端被传送的信息中附加一些冗余比特（称为<code>监督码元</code>）。</p><p>10.主要的信道编码方式：</p><ul><li>奇偶校验码</li><li>线性分组码：卷积码（非分组码）和Turbo码</li><li>熵编码：香农(Shannon)编码、哈夫曼(Huffman)编码和算术编码 (arithmetic coding)</li></ul><p>11.Turbo码， 又称<code>并行级联卷积码(PCCC)</code>，为2个卷积码的并联，它巧妙地将<code>卷积码</code>和<code>随机交织器</code>结合 在一起， 实现了<code>随机编码</code>的思想。</p><p>12.交织器和删余器的主要作用</p><blockquote><p>把可能存在的连续差错比特分散，以便于信道解码时纠错。 </p><p>从两个校验序列中周期地删除一些校验位，形成校验位序列。</p></blockquote><h2 id="调制和接入"><a href="#调制和接入" class="headerlink" title="调制和接入"></a>调制和接入</h2><p>13.待传输的信号称为<code>调制信号</code>，调制之后的信号称为<code>已调信号</code>。</p><p>14.调制方式可分为<code>模拟调制</code>和<code>数字调制</code>。</p><p>15.模拟调制又可分为<code>幅度调制 </code>（AM）、<code>频率调制</code>（FM）和<code>相位调制</code>（PM）。</p><p>16.数字调制三种方式：<code>幅移键控</code>（ASK）、<code>频移键控</code>（FSK）和<code>相移键控</code>（PSK）。</p><p>17.各种调制之间的差别都反映在<code>同相分量</code>I(t)和<code>正交分量</code>Q(t)上。</p><p>18.二进制振幅键控是利用<code>载波的幅度</code>变化来传递数字信息的，其<code>频率</code>和<code>初始相位</code>保持不变。</p><p>19.星座图中的点，可以指示调制信号<code>幅度</code>和<code>相位</code>的可能状态。</p><p>20.常见的多址技术：</p><ul><li><strong>FDMA：不同的用户分配在频率不同的信道上</strong></li><li><strong>TDMA：不同的信号被分配到不同时隙里</strong></li><li><strong>CDMA：码分多址技术</strong></li><li><strong>SDMA：空分多址技术</strong></li></ul><h2 id="4G-5G"><a href="#4G-5G" class="headerlink" title="4G-5G"></a>4G-5G</h2><p>21.4G（IMT-Advanced系统的俗称）是一种<code>宽带接入</code>和分布式的<code>全IP构架</code>网络，是<code>集成多功能</code>的宽带移动通信系统。</p><p>22.移动通信网由三大部分组成：接入网、承载网、核心网。</p><p>23.<code>多载波传输</code>是将<code>高速串行</code>的数据码流转换为N路<code>并行的低速</code>数据码流，然后调制到等频率间隔的N个<code>相互正交的子载波</code>上同时进行传输。</p><p>24.OFDM系统中，需要考虑两种类型的干扰：</p><ul><li>符号间干扰ISI：通过引入<code>保护间隔</code>几乎可以完全消除<code>符号间干扰</code>（保护间隔长度大于无线信道的最大时延扩展）</li><li>载波间干扰ICI：在保护间隔内填入循环前缀信号可消除载波间干扰</li></ul><p>25.OFDM技术的缺点：存在较高的<code>峰值平均功率比</code>。</p><p>26.多天线技术通过在发送端和接收端同时使用<code>多根天线</code>，扩展了<code>空间域</code>。</p><p>27.多天线构成的信道称为<code>MIMO</code>(Multiple Input Multiple Output) 信道，使用多天线技术的系统称为 MIMO无线通信系统。</p><p>28.MIMO系统利用各发送接收天线间的<code>通道响应的独立性</code>. 通过空时编码创造出多个<code>并行的传输空间</code>。</p><p>29.LTE的基本MIMO模型是：</p><ul><li><strong>上行采用单发双收的1×2配置</strong></li><li><strong>下行采用双发双收的2×2配置</strong></li></ul><p>30.<code>MIMO系统中，信道容量随着天线数的增加而线性增大</code>。</p><p>31.LTE最终采用了 统一的多址技术</p><ul><li><strong>上行使用SC-FDMA（单载波频分多址）</strong>：OFDMA峰均比高，在上行使用会增加终端的功放成本和终端功耗</li><li><strong>下行使用OFDMA（正交频分多址）</strong></li></ul><p>32.OFDMA：以OFDM技术为基础，<code>通过为用户分配不同的子载波来区分用户的多址方式</code>。</p><p>33.LTE中，1ms作为<code>LTE的一个调度时间单位</code>，称为一个<code>TTI</code>（transmission time-interval）。</p><p>34.OFDMA的主要思想是从<code>时域</code>和<code>频域</code>两个维度将系统的无线资源划分成<code>资源块RB</code>，<code>每个用户占用其中一个或多个资源块</code>。</p><p>35.LTE的<code>空中接口资源分配的基本单位是物理资源块</code>（Physical RB，PRB）。</p><p>36.<code>带宽的动态配置是通过调整资源块RB数目的多少来完成</code>。</p><p>37.SC-FDMA兼有单载波传输技术<code>峰均比低</code>和频分多址技术<code>频谱利用率高</code>的优点。</p><p>38.LTE-A（Advanced）关键技术：</p><ul><li>载波聚合技术</li><li>增强的MIMO技术</li><li>协作多点传输技术</li></ul><p>39.5G关键技术：</p><ul><li>提高速率技术</li><li>降低时延技术</li><li>提升覆盖技术</li></ul><h2 id="短距离无线通信-wifi"><a href="#短距离无线通信-wifi" class="headerlink" title="短距离无线通信-wifi"></a>短距离无线通信-wifi</h2><p>40.WiFi是一个国际无线局域网（WLAN）标准，全称为Wireless Fidelity（无线保真），又称IEEE802.11b标准。</p><p>41.跳频扩频 (Frequency Hopping Spread Spectrum，简称 FHSS) ，就是载波可以在一个很宽的频带上按照伪随机码的定义从一 个频率<code>跳变</code>到另一个频率。</p><p>42.直接序列扩频 (Direct Sequence Spread Spectrum，简称DSSS)就是<code>使用具有高码率的扩频序列</code>。</p><p>43.RF传输标准是<code>跳频扩频</code>（FHSS）和<code>直接序列扩频</code>（DSSS）。</p><p>44.ALOHA的最大吞吐量为<code>0.184</code> ；时隙ALOHA的最大吞吐量为<code>0.368</code>。</p><p>45.CSMA&#x2F;CD比CSMA又增加了一个功能， <code>“边说边听”</code>。这种边发送边监听的功能称为<code>冲突检测</code>。</p><p>46.802.11 就使用 CSMA&#x2F;CA （<code>碰撞避免</code>）协议。而在使用 CSMA&#x2F;CA 的同时， 还增加使用<code>停止等待协议</code>。</p><p>47.<code>DCF（分布式协调功能）</code>是IEEE802.11 MAC 的基本接入方法，所有要传输数据的用户拥有平等接入网络的机会，通过<code>CSMA/CA</code>和<code>随机退避时间</code>来完成接入。</p><p>48.<code>帧间间隔IFS</code>：所有的站在完成发送后，必须再等待一段很短的时间（继续监听）才能发送下一帧。</p><p>49.帧间间隔类型：</p><ul><li>SIFS（Short IFS）：最高优先级</li><li>PIFS（PCF IFS）：中等优先级</li><li>DIFS（DCF IFS）：最低优先级</li></ul><p>50.SIFS等于节点从<code>发送状态切换到接收状态并能正确解码所需要的时间</code>，或者<code>从接收状态转为发送状态所需要的时间</code>。</p><p>51.信道从忙态变为空闲时，任何一个站要发送数据帧时，不仅都必须<code>等待一个IFS 的间隔</code>，而且还要进入<code>竞争窗口</code>，并计算<code>随机退避时间</code>以便再次重新试图接入到信道。</p><p>52.短距离无线通信主要工作在<code>高频段</code>。</p><p>53.分组传输采用<code>先听后说</code>的思想。</p><p>54.802.11MAC中的载波侦听有<code>物理载波侦听</code>和<code>虚拟载波侦听</code>两种方式。</p><p>55.802.11MAC 中的载波侦听有两种方式：</p><ul><li>物理载波侦听，由物理层提供</li><li>虚拟载波侦听，由 MAC 层提供</li></ul><h2 id="移动自组织网络"><a href="#移动自组织网络" class="headerlink" title="移动自组织网络"></a>移动自组织网络</h2><p>56.移动自组织网络的节点间可通过<code>空中接口</code>直接通信，且具有<code>分组转发</code>能力。</p><p>57.移动Ad Hoc网络由一组<code>无线移动节点</code>组成，是一种<code>不需要</code>依靠现有固定通信网络基础设施的、能够迅速展开使用的网络体系， 所需人工干预最少，是<code>没有任何中心实体</code>、<code>自组织</code>、<code>自愈</code>的网络。</p><p>58.DSDV（destination-sequenced distance-vector）<code>带目的地序列号的距离向量协议</code>。</p><p>59.DV算法不能直接用于Ad Hoc网络。</p><p>60.节点周期在DSDV协议中，每个节点的路由表包括4部分：</p><ul><li>目的节点：序列号保持为<code>偶数</code></li><li>下一跳节点</li><li>度量值（距离值）</li><li>目的节点的序列号</li></ul><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>1.移动互联网和发展特征：</p><ul><li>网络ALL-IP</li><li>终端智能化</li><li>宽带百&#x2F;千兆</li></ul><p>2.移动终端安全性：</p><ul><li>代码安全</li><li>接入权限</li><li>数字签名</li><li>沙箱隔离</li><li>Android应用典型安全问题</li></ul><p>3.应用程序签名机制：<code>规定APK文件必须被开发者进行数字签名，以便标识应用程序作者和应用程序之间的信任关系</code>。</p><p>4.<code>沙箱</code>（sandbox）为运行中的程序提供<code>隔离环境</code>，它通常严格控制其中的程序所能访问的资源。</p><p>5.防止反编译：</p><ul><li>尽量将敏感信息不放在客户端</li><li>自定义加载器</li><li>增加无用代码进行混淆</li></ul><p>5.在AndroidManifest.xml中利用<code>sharedUserId</code>属性给不同的 package分配相同的userID，通过这样做，两个package可以被当做同一个程序。</p><p>6.新型隐私信息：窃取应用程序内部的用户数据以及通过<code>侧信道攻击技术</code>获取一些敏感数据。</p><p>7.侧信道攻击方法</p><ul><li>功耗攻击（最强有力）</li><li>电磁场攻击</li><li>时间攻击</li></ul><p>8.界面劫持，顾名思义就是正常应用的界面<code>被恶意攻击者劫持</code>，替换上仿冒的恶意界面作恶。</p><p>9.<code>点击劫持是一种视觉上的欺骗手段</code>。</p><p>10.UID的权限：</p><ul><li>声明：&lt; permission&gt;</li><li>使用：&lt; uses-permission&gt;</li></ul><p>11.浏览器设计中使用的最重要的一个安全策略叫做<code>同源策略</code>。</p><p>12.源（origin）就是协议、域名和端口号。<code>若地址里面的协议、域名和端口号均相同则属于同源</code>。</p><blockquote><p>例如： <a href="http://www.a.com/test/index.html">http://www.a.com/test/index.html</a> 的同源检测 </p><p><a href="http://www.a.com/dir/page.html">http://www.a.com/dir/page.html</a> —-成功 </p><p><a href="http://www.child.a.com/test/index.html">http://www.child.a.com/test/index.html</a> —-失败，域名不同 </p><p><a href="https://www.a.com/test/index.html">https://www.a.com/test/index.html</a> —-失败，协议不同 </p><p><a href="http://www.a.com:8080/test/index.html">http://www.a.com:8080/test/index.html</a> —-失败，端口号不同</p></blockquote><p>13.一个域内的脚本仅仅具有本域内的权限，可以理解为<code>本域脚本只能读写本域内的资源</code>，而无法访问其它域的资源。</p><p>14.<code>SQL注入</code>（SQL Injection）就是把SQL命令插入到Web表单然 后提交到所在页面请求（查询字符串），从而达到欺骗服务器执行恶意的SQL命令。</p><p>15.SQL注入可以分为：<code>平台层注入</code>和<code>代码注入</code>。</p><h1 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h1><p>1.PageRank算法：对于某个页面u，<code>Bu</code>表示指向u的所有页面的集合，即u的<code>入链</code>集合，<code>L(v)</code>为页面v所指向的页面个数，即v的<code>出链</code>集合。</p><p>PageRank–算法1：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001147243.png" alt="image-20231108001147243"></p><p>PageRank–算法2：引入参数d，称为阻尼因子，指通过链接点击进入该网页的概率， 那么通过地址栏输入而跳转的概率就是1-d。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001311358.png" alt="image-20231108001311358"></p><p>PageRank算法3：一个页面被访问的随机性应当来自其他所有页面。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001358516.png" alt="image-20231108001358516"></p><p>2.4g和5g各种指标：</p><blockquote><p>峰值数据传输速率：这是网络能够提供的最高数据传输速率。在4G中，峰值速率通常为100 Mbps至1 Gbps，而在5G中，可以达到10 Gbps以上。<br>延迟：延迟是指数据从发送到接收所需的时间。在4G中，延迟通常为10毫秒至50毫秒，而在5G中，延迟可以降低到1毫秒以下。<br>频谱效率：频谱效率是指在特定频段内传输的数据量。5G比4G更高效，可以实现更高的频谱效率，从而在相同的频谱资源下提供更多的数据传输。<br>连接密度：连接密度是指网络可以同时支持的设备数量。5G相对于4G具有更高的连接密度，可以同时连接更多的设备。<br>覆盖范围：覆盖范围是指网络信号可以传播的距离。尽管5G的覆盖范围较4G更小，但5G可以通过使用更多的小型基站来提供更广泛的覆盖。<br>流量密度。</p></blockquote><p>3.4g和5g带宽、速率、间隔长度：</p><blockquote><p>带宽：4G网络的带宽通常为20 MHz，而5G网络的带宽可以达到100 MHz或更高。这意味着5G网络具有更大的带宽，可以支持更多的数据传输。<br>速率：4G网络的理论最高下载速率为100 Mbps（兆比特每秒），而5G网络的理论最高下载速率可以达到10 Gbps（千兆比特每秒）。 这意味着5G网络具有更快的传输速度，可以更快地下载和上传数据。<br>间隔长度：4G网络的子载波间隔长度为15 kHz，而5G网络的子载波间隔长度为15 kHz或更小。这意味着5G网络可以在更小的频谱间隔内传输更多的数据，从而提高了频谱利用率。</p></blockquote><p>4.什么是隐藏节点？什么是暴露节点？CSMA&#x2F;CD协议为什么不能用于WLAN？</p><blockquote><p>隐藏节点：在接收者的通信范围内而在发送者的通信范围外的终端。</p><p>暴露节点：在发送者的通信范围之内而在接收者的通信范围之外的终端。</p><p>无线系统中很难实现冲突检测（CD）：</p><p>难以同时收发</p><p>同时收发时，发送方难以实现冲突检测</p><p>发送方实现CD时，由于隐藏节点和暴露节点，即使发送方检测到信道空闲，在接收端仍可能存在冲突</p><p>并非所有站都能侦听到一个站的发送</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;p&gt;1.移动互联网MI(Mobile Internet) 就是将&lt;code&gt;移动通信&lt;/code&gt;和&lt;code&gt;互联网&lt;/code&gt;二者</summary>
      
    
    
    
    
    <category term="移动互连网技术" scheme="http://example.com/tags/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%BF%9E%E7%BD%91%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Effective_Cpp笔记</title>
    <link href="http://example.com/blogs/2b7e9eb2.html"/>
    <id>http://example.com/blogs/2b7e9eb2.html</id>
    <published>2023-10-27T05:45:59.000Z</published>
    <updated>2023-11-04T08:10:06.996Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png" alt="image-20231027152734799"></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><ul><li><p>构造函数：ctor</p></li><li><p>析构函数：dtor</p></li><li><p>left-hand side(左手端)：lhs</p></li><li><p>right-hand side(右手端)：rhs</p></li><li><p>成员函数：左侧实参由this指针表现出来，单独使用参数名称rhs。</p></li></ul><blockquote><p>“指向一个T型对象”的指针命名为pt，意思是“pointer to T”。</p><p>对于references使用类似习惯：rw可能是个reference to Widget，ra则是个reference to Airplane。</p></blockquote><h2 id="TR1和Boost"><a href="#TR1和Boost" class="headerlink" title="TR1和Boost"></a>TR1和Boost</h2><ul><li><code>Tr1（“Technical Report 1”）</code>是一份规范，描述加入C++标准程序库的诸多新机能。这些技能以新的class templates和function templates形式体现，针对的题目有<code>hash tables</code>，<code>reference-counting smart pointers</code>，regular expressions，以及更多。所有TR1组件都被置于命名空间tr1内，后者嵌套与命名空间std内。</li><li><code>Boost</code>是个组织，亦是一个网站<a href="http://boost.org/">Boost</a>，提供可移植、同僚复审、源码开放的C++程序库。大多数TR1机能是以Boost的工作为基础。在编译器厂商于其C++程序库中含入TR1之前，对那些搜寻TR1实现品的开发人员而言，Boost网站可能是第一个逗留点。Boost提供比TR1更多的东西，所以无论如何值得了解它。</li></ul><h1 id="让自己习惯C"><a href="#让自己习惯C" class="headerlink" title="让自己习惯C++"></a>让自己习惯C++</h1><h2 id="条款1：-视C-为一个语言联邦"><a href="#条款1：-视C-为一个语言联邦" class="headerlink" title="条款1： 视C++为一个语言联邦"></a>条款1： 视C++为一个语言联邦</h2><p>将C++视为一个由语言组成的联邦而非单一语言。C++主要的4个次语言：</p><ul><li><code>C</code>。C++仍是以C为基础。许多时候C++对问题的解法其实不过就是较高级的C解法，但当你以C++内的C成分工作时，高效编程守则映照出C语言的局限：没有模板（<em>templates</em>），没有异常（<em>exceptions</em>），没有重载（<em>overloading</em>）。</li><li><code>Object-Oriented C++</code>。这部分也就是C with Classes所诉求的：classes（包括构造函数和析构函数），封装、继承、多态、virtual函数（动态绑定）等等。</li><li><code>Template C++</code>。实际上由于templates威力强大，它们带来崭新的编程泛型，也就是所谓的template metaprogramming（TMP，模板元编程）。</li><li><code>STL</code>。STL是个template程序库，看名称也知道，但它是非常特殊的一个。STL有自己特殊的办事方式，当你伙同STL一起工作，你必须遵守它的规约。</li></ul><p>C++并不是一个带有一组守则的一体语言，它是从四个次语言组成的联邦政府，每个次语言都有自己的规约。</p><h2 id="条款2：尽量以const，enum，inline替换-define"><a href="#条款2：尽量以const，enum，inline替换-define" class="headerlink" title="条款2：尽量以const，enum，inline替换#define"></a>条款2：尽量以const，enum，inline替换#define</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ASPECT_RATIO 1.653</span></span><br></pre></td></tr></table></figure><p>​记号名称ASPECT_RATIO也许从未被编译器看见；也许在编译器开始处理源码之前它就被预处理器移走了。于是记号名称ASPECT_RATIO有可能没进入记号表（<em>symbol table</em>）。</p><p>​以常量替换#define，有两种特殊情况：</p><ol><li><strong>定义常量指针</strong>。由于常量定义式通常被放在头文件内（以便被不同的源码含入），因此有必要将指针（而不是指针所指之物）声明为const。</li><li><strong>class专属常量</strong>。为了将常量的作用域（scope）限制于class内，你必须让它成为class的一个成员（member）；而为确保此常量至多只有一份实体，你必须让它成为一个static成员。</li></ol><p>​<strong>无法利用#define创建一个class专属常量，因为#define并不重视作用域（<em>scope</em>）</strong>。一旦宏被定义，它就在其后的编译过程中有效（除非在某处被#undef）。这意味着#define不仅不能够用来定义class专属常量，也不能够提供任何封装性。</p><p>​<strong>enum hack的行为某方面说比较像#define而不像const</strong>。取一个const的地址是合法的，但取一个enum的地址不合法，而取一个#define的地址通常也不合法。</p><h5 id="Remember："><a href="#Remember：" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>对于单纯常量，最好以const对象或enum替换#define。</p><p>对于形似函数的宏，最好改用inline函数替换#define。</p></blockquote><h2 id="条款3：尽可能使用const"><a href="#条款3：尽可能使用const" class="headerlink" title="条款3：尽可能使用const"></a>条款3：尽可能使用const</h2><p>​const的一件奇妙事情是，它允许你指定一个语义约束（也就是指定一个“不该被改动”的对象），而编译器会强制实施这项约束。它允许你告诉编译器和其他程序员某值应该保持不变。只要这（某值保持不变）是事实，你就该确实说出来，因为说出来可以获得编译器的襄助，确保这条约束不被违反。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* p = greeeting;<span class="comment">//non-const pointer,const data</span></span><br><span class="line"><span class="type">char</span>* <span class="type">const</span> p = greeeting;    <span class="comment">//const pointer,non-const data</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> p = greeting;<span class="comment">//const pointer,const data</span></span><br></pre></td></tr></table></figure><p>​以下两种写法意义相同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">const</span> Widget* pw)</span></span>;<span class="comment">//f1获得一个指针，指向一个常量的Widget对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(Widget <span class="type">const</span> * pw)</span></span>; <span class="comment">//f2也是</span></span><br></pre></td></tr></table></figure><p>​在一个函数声明式内，const可以和函数返回值、各参数、函数自身（如果是成员函数）产生关联。令函数返回一个常量值，往往可以降低因客户错误而造成的意外，而又不至于放弃安全性和高效性。</p><h3 id="const成员函数"><a href="#const成员函数" class="headerlink" title="const成员函数"></a>const成员函数</h3><ol><li>它们使class接口比较容易被理解。得知哪个函数可以改动对象内容而哪个函数不行，很重要。</li><li>使“操作const对象”成为可能。</li></ol><p>​两个成员函数如果只是常量性不同，可以被重载。</p><p>​<code>bitwise const</code>阵营的人相信，成员函数只有在不更改对象之任何成员变量（static除外）时才可以说是const。也就是说它不更改对象内的任何一个bit。</p><p>​<code>logical constness</code>这一派拥护者主张，一个const成员函数可以修改它所处理的对象内的某些bits，但只有在客户端侦测不出的情况下才得如此。</p><p>​利用C++的一个与const相关的摆动场：<code>mutable</code>（可变的）。mutable释放掉non-static成员变量的bitwise constness约束。</p><h3 id="在const和non-const成员函数中避免重复"><a href="#在const和non-const成员函数中避免重复" class="headerlink" title="在const和non-const成员函数中避免重复"></a>在const和non-const成员函数中避免重复</h3><p>​对于”bitwise-constness非我所欲”的问题，mutable是个解决办法，但它不能解决所有的const相关难题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextBlock</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> ...</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position) <span class="type">const</span></span><br><span class="line"> &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> text[position];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position)<span class="comment">//现在只调用 const op[]</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">     <span class="built_in">const_cast</span>&lt;<span class="type">char</span>&amp;&gt;(<span class="comment">//将op[]返回值的const转除</span></span><br><span class="line">       <span class="built_in">static_cast</span>&lt;<span class="type">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)    <span class="comment">//为*this加上const</span></span><br><span class="line">          [position]    <span class="comment">//调用const op[]</span></span><br><span class="line">     );</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​共有两次转型：第一次用来为*this添加const（这使接下来调用operator[]时得以调用const版本），第二次则是以const operator[]的返回值中移除const。</p><p>​添加const的那一次转型强迫进行了一次安全转型（将non-const对象转为const对象），所以我们使用static_cast。移除const的那个动作只可以藉由const_cast完成，没有其他选择。</p><h5 id="Remember：-1"><a href="#Remember：-1" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>将某些东西声明为const可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。</p><p>编译器强制实施bitwise constness，但你编写程序时应该使用“概念上的常量性”（<em>conceptual constness</em>）。</p><p>当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。</p></blockquote><h2 id="条款4：确定对象被使用前已先被初始化"><a href="#条款4：确定对象被使用前已先被初始化" class="headerlink" title="条款4：确定对象被使用前已先被初始化"></a>条款4：确定对象被使用前已先被初始化</h2><p>​永远在使用对象之前先将它初始化。无任何成员的内置类型，手工完成此事。内置类型以外，确保每一个构造函数都将对象的每一个成员初始化。别混淆<strong>赋值（<em>assignment</em>）</strong>和<strong>初始化（<em>initialization</em>）</strong>。</p><p>​C++规定，对象的成员变量的初始化动作发生在进入构造函数本体之前。</p><p>​C++有着十分固定的“成员初始化次序”。次序总是相同：base classes更早于其derived classes被初始化，而class的成员变量总是以其声明次序被初始化。</p><p>​ <code>static 对象</code>，其寿命从被构造出来直到程序结束为止，因此 stack 和 heap-based 对象都被排除。这种对象包括global 对象、定义于 namespace 作用域内的对象、在 classes 内、在函数内，以及在file作用域内被声明为static的对象。 函数内的 static 对象称为local static 对象（因为它们对函数而言是local），其他static 对象称为 non-local static 对象。程序结束时 static 对象会被自动销毁，也就是它们的析构函数会在main()结束时被自动调用。</p><p>​<code>编译单元</code>（<em>translation unit</em>）是指产出单一目标文件（<em>single object file</em>）的那些源码。基本上它是单一源码文件加上其所含入的头文件（*#include files*）。</p><p>​<code>Real problem</code>：如果某编译单元内的某个 non-local static 对象的初始化动作使用了另一编译单元内的某个 non-local static 对象，它所用到的这个对象可能尚未被初始化，因为<strong>C++对“定义于不同编译单元内的non-local static 对象”的初始化次序并无明确定义</strong>。</p><p>​<strong>Reason</strong>：决定它们的初始化次序相当困难，非常困难，根本无解。在其最常见形式，也就是<strong>多个编译单元内的non-local static对象经由“模板隐式具现化，implicit template instantiations”形成</strong>，不但不可能决定正确的初始化次序，甚至往往不值得寻找“可决定正确次序”的特殊情况。</p><p>​<strong>Eliminate the problem</strong>：将每个non-local static对象搬到自己的专属函数内（该对象在此函数内被声明为static）。这些函数返回一个reference指向它所含的对象。然后用户调用这些函数，而不直接指涉这些对象。换句话说，non-local static对象被local static对象替换了。这是<code>Singleton</code>模式的一个常见实现手法。</p><p>​任何一种non-const static对象，不论它是local或non-local，在多线程环境下“等待某事发生”都会有麻烦。处理这个麻烦的一种做法是：在程序的单线程启动阶段（<em>single-threaded startup portion</em>）手工调用所有reference-returning函数，这可消除与初始化有关的”竞速形势（<em>race conditions</em>）“。</p><h5 id="Remember：-2"><a href="#Remember：-2" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>为内置对象进行手工初始化，因为C++不保证初始化它们。</p><p>构造函数最好使用成员初值列（<em>member initialization list</em>），而不要在构造函数本体内使用赋值操作（<em>assignment</em>）。初值列列出的成员变量，其排列次序 应该和它们在class中的声明次序相同。</p><p>为免除”跨编译单元之初始化次序“问题，请以local static对象替换non-local static对象。</p></blockquote><h1 id="构造-析构-赋值运算"><a href="#构造-析构-赋值运算" class="headerlink" title="构造&#x2F;析构&#x2F;赋值运算"></a>构造&#x2F;析构&#x2F;赋值运算</h1><h2 id="条款5：了解C-默默编写并调用哪些函数"><a href="#条款5：了解C-默默编写并调用哪些函数" class="headerlink" title="条款5：了解C++默默编写并调用哪些函数"></a>条款5：了解C++默默编写并调用哪些函数</h2><p>​什么时候empty class（空类）不再是个empty class呢？<strong>当C++处理过它之后</strong>。</p><p>​<strong>notice</strong>：编译器产出的析构函数是个non-virtual，除非这个class的base class自身声明有virtual析构函数（这种情况下这个函数的虚属性virtualness主要来自base class）。</p><h5 id="Remember：-3"><a href="#Remember：-3" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>编译器可以暗自为class创建default构造函数、copy构造函数、copy assignment操作符，以及析构函数。</p></blockquote><h2 id="条款6：若不想使用编译器自动生成的函数，就该明确拒绝"><a href="#条款6：若不想使用编译器自动生成的函数，就该明确拒绝" class="headerlink" title="条款6：若不想使用编译器自动生成的函数，就该明确拒绝"></a>条款6：若不想使用编译器自动生成的函数，就该明确拒绝</h2><p>​要阻止copying，可以将copy构造函数或copy assignment操作符声明为private。藉由明确声明一个成员函数，你阻止了编译器暗自创建其专属版本；而令这些函数为private，使你得以成功阻止人们调用它。</p><p>​一般而言这个做法并不绝对安全，因为member函数和friend函数还是可以调用你的private函数。<strong>将成员函数声明为private而且故意不实现它们</strong>，将阻止copying行为，如果某些人不慎调用任何一个，会获得一个<strong>连接错误（<em>linkage error</em>）</strong>。</p><h5 id="Remember：-4"><a href="#Remember：-4" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>为驳回编译器自动（暗自）提供的机能，可将相应的成员函数声明为private并且不予实现。</p></blockquote><h2 id="条款7：为多态基类声明virtual析构函数"><a href="#条款7：为多态基类声明virtual析构函数" class="headerlink" title="条款7：为多态基类声明virtual析构函数"></a>条款7：为多态基类声明virtual析构函数</h2><p>​如果class不含virtual函数，通常表示它并不意图被用来做一个base class。</p><p>​欲实现出 virtual 函数，对象必须携带某些信息，主要用来在运行期决定哪一个 virtual 函数该被调用。这份信息通常是由一个所谓<code>vptr （virtual table pointer）</code>指针指 出。vptr 指向一个函数指针构成的数组，称为<code>vtbl（virtual table）</code>；每一个带有 virtual 函数的 class 都有一个相应的vtbl。当对象调用某一virtual函数，实际被调用的函数取决于该对象的vptr所指的那个vtbl——编译器在其中寻找适当的函数指针。</p><p>​只有当class内含至少一个virtual函数，才为它声明virtual析构函数。</p><p>​标准string不含任何virtual函数。不要企图继承一个标准容器或任何其他“带有non-virtual析构函数”的class。</p><p>​<code>pure virtual</code>函数导致<code>abstract</code>（抽象）classes——也就是不能被实体化（<em>instantiated</em>）的class。也就是说，你不能为那种类型创建对象。</p><p>​必须为pure virtual析构函数提供一份定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AWOV</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">AWOV</span>() = <span class="number">0</span>;<span class="comment">//声明pure virtual析构函数</span></span><br><span class="line">&#125;</span><br><span class="line">AWOV::~AWOV &#123; &#125;<span class="comment">//pure virtual析构函数的定义</span></span><br></pre></td></tr></table></figure><p>​析构函数的运作方式是，最深层派生（<em>most derived</em>）的那个class其析构函数最先被调用，然后是其每一个base class的析构函数被调用。</p><p>​“给base classes一个virtual析构函数”，这个规则只适用于<code>polymorphic</code>（带多态性质的）base classes身上。这种base classes的设计目的是为了用来“通过base class接口处理derived class对象”。</p><h5 id="Remember：-5"><a href="#Remember：-5" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>polymorphic（带多态性质的）base classes应该声明一个virtual析构函数。如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。</p><p>Classes的设计目的如果不是作为base classes使用，或不是为了具备多态性（<em>polymorphically</em>），就不该声明virtual析构函数。</p></blockquote><h2 id="条款8：别让异常逃离析构函数"><a href="#条款8：别让异常逃离析构函数" class="headerlink" title="条款8：别让异常逃离析构函数"></a>条款8：别让异常逃离析构函数</h2><h5 id="Remember：-6"><a href="#Remember：-6" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>析构函数绝对不要吐出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序。</p><p>如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数（而非在析构函数中）执行该操作。</p></blockquote><h2 id="条款9：绝不在构造和析构过程中调用virtual函数"><a href="#条款9：绝不在构造和析构过程中调用virtual函数" class="headerlink" title="条款9：绝不在构造和析构过程中调用virtual函数"></a>条款9：绝不在构造和析构过程中调用virtual函数</h2><p>​base class构造期间virtual函数绝不会下降到derived classes阶层。取而代之的是，对象的作为就像隶属base类型一样。非正式的说法或许比较传神：在base class构造期间，virtual函数不是virtual函数。</p><p>​确定你的构造函数和析构函数都没有（在对象被创建和被销魂期间）调用virtual函数，而它们调用的所有函数也都服从同一约束。</p><p>​你无法使用virtual函数从base classes向下调用，在构造期间，你可以藉由“令derived classes将必要的构造信息向上传递至base class构造函数”替换之而加以弥补。</p><p>​比起在成员初值列（<em>member initialization list</em>）内给予base class所需数据，利用辅助函数创建一个值传给base class构造函数往往比较方便（也比较可读）。令此函数为static，也就不可能意外指向“初期未成熟之对象内尚未初始化的成员变量”。这很重要，正是因为“那些成员变量处于未定义状态”，所以“在base class构造和析构期间调用的virtual函数不可下降至derived classes”。</p><h5 id="Remember：-7"><a href="#Remember：-7" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class（比起当前执行构造函数和析构函数的那层）。</p></blockquote><h2 id="条款10：令operator-返回一个reference-to-this"><a href="#条款10：令operator-返回一个reference-to-this" class="headerlink" title="条款10：令operator&#x3D;返回一个reference to *this"></a>条款10：令operator&#x3D;返回一个reference to *this</h2><p>​为了实现“连锁赋值”，赋值操作符必须返回一个reference指向操作符的左侧实参。</p><p>​这只是个协议，并无强制性。</p><h5 id="Remember：-8"><a href="#Remember：-8" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>令赋值（<em>assignment</em>）操作符返回一个reference to *this。</p></blockquote><h2 id="条款11：在operator-中处理”自我赋值”"><a href="#条款11：在operator-中处理”自我赋值”" class="headerlink" title="条款11：在operator&#x3D;中处理”自我赋值”"></a>条款11：在operator&#x3D;中处理”自我赋值”</h2><p>​并不明显的自我赋值，是<code>“别名”（aliasing）</code>带来的结果：所谓“别名”就是”有一个以上的方法指称（指涉）某对象“。</p><p>​在operator&#x3D;函数内手工排列语句（确保代码不但“异常安全”而且“自我赋值安全”）的一个替代方案是，使用所谓的 copy and swap 技术。</p><h5 id="Remember：-9"><a href="#Remember：-9" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>确保当对象自我赋值时 operator&#x3D; 有良好行为。其中技术包括比较“来源对象” 和“目标对象”的地址、精心周到的语句顺序、以及 copy-and-swap。</p><p>确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时，其行为仍然正确。</p></blockquote><h2 id="条款12：复制对象时勿忘其每一个成分"><a href="#条款12：复制对象时勿忘其每一个成分" class="headerlink" title="条款12：复制对象时勿忘其每一个成分"></a>条款12：复制对象时勿忘其每一个成分</h2><p>​copying函数：copy构造函数和copy assignment操作符。</p><p>​编写一个copying函数，（1）确保复制所有local成员变量，（2）调用所有base classes内的适当的copying函数。</p><p>​不该令copy assignment操作符调用copy构造函数。反方向，令copy构造函数调用copy assignment操作符同样无意义。构造函数来初始化新对象，而assignment操作符只施行于已初始化对象身上。</p><p>​如果copy构造函数和copy assignment操作符有相近的代码，消除重复代码的做法是，建立一个新的成员函数给两者调用。这样的函数往往是private而且常被命名为init。这个策略可以安全消除copy构造函数和copy assignment操作符之间的代码重复。</p><h5 id="Remember：-10"><a href="#Remember：-10" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>Copying 函数应该确保复制“对象内的所有成员变量”及“所有 base class 成分”。 </p><p>不要尝试以某个 copying 函数实现另一个copying 函数。应该将共同机能放进第三个函数中，并由两个coping 函数共同调用。</p></blockquote><h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><p>​资源一旦利用，将来必须归还给系统，不然将导致内存泄漏。</p><h2 id="条款13：以对象管理资源"><a href="#条款13：以对象管理资源" class="headerlink" title="条款13：以对象管理资源"></a>条款13：以对象管理资源</h2><p>​把资源放进对象内，我们便可依赖C++的“析构函数自动调用机制”确保资源被释放。</p><ul><li><strong>获得资源后立刻放进管理对象（<em>managing object</em>）内</strong>。“以对象管理资源”的观念被称为“资源取得时机便是初始化时机”（<em>Resource Acquisition Is Initialization</em>;<code>RAII</code>）。</li><li><strong>管理对象运用析构函数确保资源被释放</strong>。如果资源释放动作可能抛出异常，但[条款8](# 条款8：别让异常逃离析构函数)能解决问题。</li></ul><p>​<code>auto_ptr</code>是个“类指针对象”，即<strong>“智能指针”</strong>。auto_ptrs有一个性质：不能通过copy构造函数或copy assignment操作符复制它们，否则它们会变成null，而复制所得的指针将取得资源的唯一拥有权！</p><p>​<code>RCSP</code>（<em>reference-counting smart pointer</em>），“引用计数型智慧指针”，也是个智能指针，持续追踪共有多少对象指向某笔资源，并在无人指向它时自动删除该资源。提供的行为类似垃圾回收（<em>garbage collection</em>），不同的是无法打破环状引用（<em>cycles of reference</em>）。</p><h5 id="Remember：-11"><a href="#Remember：-11" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>为防止资源泄漏，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。</p><p>两个常被使用的RAII classes分别是<code>tr1::shared_ptr</code>和auto_ptr。前者通常是较佳选择，因为其copy行为比较直观。若选择auto_ptr，复制动作会使它（被复制物）指向null。</p></blockquote><h2 id="条款14：在资源管理类中小心coping行为"><a href="#条款14：在资源管理类中小心coping行为" class="headerlink" title="条款14：在资源管理类中小心coping行为"></a>条款14：在资源管理类中小心coping行为</h2><p>​当[RAII](# 条款13：以对象管理资源)对象被复制，选择有两种可能：</p><ul><li><strong>禁止复制</strong>。复制动作对RAII class并不合理，便应该禁止。</li><li><strong>对底层资源祭出“引用计数法”（reference-count）</strong>。内含一个<code>tr1::shared_ptr</code>成员变量，RAII classes便可实现出reference-counting copying行为。</li></ul><p>tr1::shared_ptr允许指定所谓的“删除器”（<em>deleter</em>），是一个函数或函数对象（<em>function object</em>），当引用次数为0时便被调用（此机能并不存在于auto_ptr——它总是将其指针删除）。删除器对tr1::shared_ptr构造函数而言是可有可无的第二参数。</p><ul><li><strong>复制底部资源</strong>。复制资源管理对象时，进行的是“深度拷贝”。</li><li><strong>转移底部资源的拥有权</strong>。这是auto_ptr奉行的复制意义。</li></ul><h5 id="Remember：-12"><a href="#Remember：-12" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>复制RAII对象必须一并复制它所管理的资源，所以资源的copying行为决定RAII对象的copying行为。</p><p>普遍而常见的RAII class copying行为是：抑制copying、施行引用计数法。不过其他行为也都可能被实现。</p></blockquote><h2 id="条款15：在资源管理类中提供对原始资源的访问"><a href="#条款15：在资源管理类中提供对原始资源的访问" class="headerlink" title="条款15：在资源管理类中提供对原始资源的访问"></a>条款15：在资源管理类中提供对原始资源的访问</h2><p>​tr1::shared_ptr和auto_ptr都提供一个<code>get成员函数</code>，用来执行显示转换，会返回智能指针内部的原始指针（的复件）。它们重载了指针取值（<em>pointer dereferencing</em>）操作符（operator-&gt;和operator*），允许隐式转换至底部原始指针。</p><p>​RAII classes并不是为了封装某物而存在，它们的存在是为了确保一个特殊行为——资源释放会发生。</p><h5 id="Remember：-13"><a href="#Remember：-13" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>APIs往往要求访问原始资源（<em>raw resource</em>），所以每一个RAII class应该提供一个“取得其所管理之资源”的办法</p><p>对原始资源的访问可能经由显式转换或隐式转换。一般而言显式转换比较安全，但隐式转换对客户比较方便。</p></blockquote><h2 id="条款16：成对使用new和delete时要采用相同形式"><a href="#条款16：成对使用new和delete时要采用相同形式" class="headerlink" title="条款16：成对使用new和delete时要采用相同形式"></a>条款16：成对使用new和delete时要采用相同形式</h2><h5 id="Remember：-14"><a href="#Remember：-14" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果你在 new 表达式中使用[ ]，必须在相应的 delete 表达式中也使用[]。如果你在 new 表达式中不使用[ ]，一定不要在相应的 delete 表达式中使用[ ]。</p></blockquote><h2 id="条款17：以独立语句将newed对象置入智能指针"><a href="#条款17：以独立语句将newed对象置入智能指针" class="headerlink" title="条款17：以独立语句将newed对象置入智能指针"></a>条款17：以独立语句将newed对象置入智能指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">priority</span><span class="params">()</span></span>;<span class="comment">//揭示处理程序的优先权</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processWidget</span><span class="params">(std::tr1::shared_ptr&lt;Widget&gt; pw, <span class="type">int</span> priority)</span></span>;<span class="comment">//用来在某动态分配所得的Widget上进行某些带有优先权的处理</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">processWidget</span>(std::tr1::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget), <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>​第一个实参<code>std::tr1::shared_ptr&lt;Widget&gt;(new Widget)</code>由两部分组成：</p><ul><li><strong>执行“new Widget”表达式</strong></li><li><strong>调用tr1::shared_ptr构造函数</strong></li></ul><p>于是在调用processWidget之前，编译器必须创建代码，做以下三件事：</p><ul><li><strong>调用priority</strong></li><li><strong>执行“new Widget”</strong></li><li><strong>调用tr1::shared_ptr</strong></li></ul><p>可以确定的是 “new Widget” 一定执行于trl::shared ptr构造函数调用之前，因为这个表达式的结果还要被传递作为trl::shared_ptr 构造函数的一个实参，但对 priority的调用则可以排在第一或第二或第三执行。</p><p>​在对processWidget的调用过程中可能引发资源泄漏，因为在<strong>“资源被创建（经由“new Widget”）”</strong>和<strong>“资源被转换为资源管理对象”</strong>两个时间点之间有可能发生异常干扰。</p><p>​使用<strong>分离语句</strong>，分别写出 (1) 创建widge, (2) 将它置入一个智能指针内，然后再把那个智能指针传给 processWidget：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="function">tr1::shared_ptr&lt;Widget&gt; <span class="title">pw</span><span class="params">(<span class="keyword">new</span> Widget)</span></span>;</span><br><span class="line"><span class="built_in">processWidget</span>(pw, <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>​编译器对于<strong>“跨越语句的各项操作”没有重新排列的自由</strong>(只有在同一语句内它才拥有那个自由度)。</p><h5 id="Remember：-15"><a href="#Remember：-15" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>以独立语句将 newed 对象存储于(置入)智能指针内。如果不这样做，一旦异常被抛出，有可能导致难以察觉的资源泄漏。</p></blockquote><h1 id="设计与声明"><a href="#设计与声明" class="headerlink" title="设计与声明"></a>设计与声明</h1><h2 id="条款18：让接口容易被正确使用，不易被误用"><a href="#条款18：让接口容易被正确使用，不易被误用" class="headerlink" title="条款18：让接口容易被正确使用，不易被误用"></a>条款18：让接口容易被正确使用，不易被误用</h2><p>​加上const可以限制类型内什么事可做，什么事不能做。</p><p>​“让types容易被正确使用，不容易被误用”的表现形式：“除非有好理由，否则应该尽量令你的types的行为与内置types一致”。</p><p>​tr1::shared_ptr提供的某个构造函数接受两个实参：一个是被管理的指针，另一个是引用次数变成0时将被调用的“删除器”。</p><h5 id="Remember：-16"><a href="#Remember：-16" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。</p><p>“促进正确使用”的办法包括接口的一致性，以及与内置类型的行为兼容。</p><p>“阻止误用”的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。</p><p>trl::shared_ptr 支持定制型删除器（<em>custom deleter</em>）。这可防范 DLL 问题，可被用来自动解除[互斥锁](# 条款14：在资源管理类中小心coping行为)（<em>mutexes</em>）等等。</p></blockquote><h2 id="条款19：设计class犹如设计type"><a href="#条款19：设计class犹如设计type" class="headerlink" title="条款19：设计class犹如设计type"></a>条款19：设计class犹如设计type</h2><p>​class设计规范：</p><ul><li><strong>新type的对象应该如何被创建和销毁？</strong></li><li><strong>对象的初始化和对象的赋值该有什么样的差别？</strong></li><li><strong>新type的对象如果被passed by value（以值传递），意味着什么？</strong></li><li><strong>什么是新type的“合法值”？</strong></li><li><strong>你的新type需要配合某个继承图系（inheritance graph）吗？</strong></li><li><strong>你的新type需要什么样的转换？</strong></li><li><strong>什么样的操作符和函数对此新type而言是合理的？</strong></li><li><strong>什么样的标准函数应该驳回？</strong></li><li><strong>谁该取用新type的成员？</strong></li><li><strong>什么是新type的“未声明接口”（<em>undeclared interface</em>）？</strong></li><li><strong>你的新type有多么一般化？</strong></li><li><strong>你真的需要一个新type吗？</strong></li></ul><h5 id="Remember：-17"><a href="#Remember：-17" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>Class的设计就是type的设计。在定义一个新type之前，请确定你已经考虑过本条款覆盖的所有讨论主题。</p></blockquote><h2 id="条款20：宁以pass-by-reference-to-const替换pass-by-value"><a href="#条款20：宁以pass-by-reference-to-const替换pass-by-value" class="headerlink" title="条款20：宁以pass-by-reference-to-const替换pass-by-value"></a>条款20：宁以pass-by-reference-to-const替换pass-by-value</h2><p>​pass by reference-to-const效率高，没有任何构造函数或析构函数被调用，因为没有任何新对象被创建。</p><p>​以by reference方式传递参数也可以避免<code>slicing</code>（对象切割）问题。</p><p>​references往往以<strong>指针实现</strong>出来，因此pass by reference通常意味着真正传递的是指针。</p><h5 id="Remember：-18"><a href="#Remember：-18" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>尽量以 pass-by-reference-to-const 替换 pass-by-value。前者通常比较高效，并可避免切割问题（<em>slicing problem</em>）。<br>以上规则并不适用于内置类型，以及 STL 的迭代器和函数对象。对它们而言， pass-by-value 往往比较适当。</p></blockquote><h2 id="条款21：必须返回对象时，别妄想返回其reference"><a href="#条款21：必须返回对象时，别妄想返回其reference" class="headerlink" title="条款21：必须返回对象时，别妄想返回其reference"></a>条款21：必须返回对象时，别妄想返回其reference</h2><p>​reference只是个名称，代表某个既有对象。</p><p>​函数有两种创建新对象的途径：<strong>在stack空间或在heap空间创建</strong>。如果定义一个local变量，就是在stack空间创建对象。</p><p>​任何函数如果返回一个reference指向某个local对象，都将一败涂地。（如果函数返回指针指向一个local对象，也是一样）。</p><h5 id="Remember：-19"><a href="#Remember：-19" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝不要返回pointer或reference指向一个local stack对象，或返回reference指向一个heap-allocated对象，或返回pointer或reference指向一个local static对象而有可能同时需要多个这样的对象。[条款4](# 条款4：确定对象被使用前已先被初始化)为“在单线程环境中合理返回reference指向一个local static对象”提供了设计实例。</p></blockquote><h2 id="条款22：将成员变量声明为private"><a href="#条款22：将成员变量声明为private" class="headerlink" title="条款22：将成员变量声明为private"></a>条款22：将成员变量声明为private</h2><p>​成员变量的封装性与”成员变量的内容改变时所破坏的代码数量”成反比。所谓改变，也许是从class中移除它。</p><p>​从封装的角度看，只有两种访问权限：<strong>private（提供封装）</strong>和<strong>其他（不提供封装）</strong>。</p><h5 id="Remember：-20"><a href="#Remember：-20" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>切记将成员变量声明为private。这可赋予客户访问数据的一致性、可细微划分访问控制、允诺约束条件获得保证，并提供class作者以充分的实现弹性。</p><p>protected并不比public更具封装性。</p></blockquote><h2 id="条款23：宁以non-member、non-friend替换member函数"><a href="#条款23：宁以non-member、non-friend替换member函数" class="headerlink" title="条款23：宁以non-member、non-friend替换member函数"></a>条款23：宁以non-member、non-friend替换member函数</h2><p>​推崇封装的原因：它使我们能够改变事物而只影响有限客户（能够看到改变的人）。</p><p>​考虑对象内的数据：越少代码可以看到数据（也就是访问它），越多的数据可被封装，越能自由地改变对象数据。</p><p>​对于“有多少代码可以看到某一块数据”的一种粗糙测量：<strong>越多函数可以访问，数据的封装性就月底</strong>。</p><p>​member函数不只可以访问class内的private数据，也可以取用private函数、enums、typedefs等等。non-member和non-friend函数无法访问上述任何东西。</p><h5 id="Remember：-21"><a href="#Remember：-21" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>宁可拿non-member non-friend函数替换member函数。这样做可以增加封装性、包裹弹性（<em>packaging flexibility</em>）和机能扩充性。</p></blockquote><h2 id="条款24：若所有参数皆需类型转换，请为此采用non-member函数"><a href="#条款24：若所有参数皆需类型转换，请为此采用non-member函数" class="headerlink" title="条款24：若所有参数皆需类型转换，请为此采用non-member函数"></a>条款24：若所有参数皆需类型转换，请为此采用non-member函数</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png&quot; alt=&quot;image-20231027152734799&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    
    <category term="Effective_Cpp" scheme="http://example.com/tags/Effective-Cpp/"/>
    
  </entry>
  
</feed>
