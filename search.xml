<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>操作系统高级教程思考题</title>
      <link href="/blogs/6fbd99c.html"/>
      <url>/blogs/6fbd99c.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分">第一部分</h1><h2 id="为什么开始启动计算机的时候执行的是bios代码而不是操作系统自身的代码">1.为什么开始启动计算机的时候，执行的是<code>BIOS</code>代码而不是操作系统自身的代码？</h2><p>最开始启动计算机的时候，计算机内存未初始化，没有任何程序。而因为<code>CPU</code>只能读取内存中的程序，所以必须将操作系统先加载进内存当中。需要使用<code>BIOS</code>。在加电后，<code>BIOS</code>需要完成一些硬件检测工作，同时设置实模式下的中断向量表和中断服务程序，并将操作系统的引导扇区加载至<code>0x07C00</code>处，然后跳转至<code>0x07C00</code>运行操作系统自身的代码。这些就是由<code>BIOS</code>代码来实现的。</p><h2 id="为什么bios只加载了一个扇区后续扇区却是由bootsect代码加载为什么bios没有直接把所有需要加载的扇区都加载">2.为什么<code>BIOS</code>只加载了一个扇区，后续扇区却是由<code>bootsect</code>代码加载？为什么<code>BIOS</code>没有直接把所有需要加载的扇区都加载？</h2><p>操作系统和<code>BIOS</code>通常是由不同的专业团队设计和开发的，为了能协同工作，必须建立操作系统和<code>BIOS</code>之间的协调机制。而现行的方法是“两头约定”和“定位识别”。对<code>BIOS</code>而言，“约定”接到启动操作系统的命令， “定位识别”只从启动扇区把代码加载到<code>0x07C00(BOOTSEG)</code>这个位置。后续扇区则由<code>bootsect</code>代码加载，这些代码由编写系统的用户负责，与<code>BIOS</code>无关。这样构建协调机制的好处是站在整个体系的高度，统一设计和统一安排，简单而有效。<code>BIOS</code>和操作系统的开发都可以遵循这⼀约定，灵活地进行各自的设计。</p><h2 id="为什么bios把bootsect加载到0x07c00而不是0x00000加载后又马上挪到0x90000处是何道理为什么不一次加载到位">3.为什么<code>BIOS</code>把<code>bootsect</code>加载到<code>0x07c00</code>，而不是<code>0x00000</code>？加载后又马上挪到<code>0x90000</code>处，是何道理？为什么不一次加载到位？</h2><ul><li><strong>加载到<code>0x07c00</code>是<code>BIOS</code>提前约定设置的</strong>，不能加载到<code>0x00000</code>是因为<code>BIOS</code>程序在内存最开始的位置<code>(0x00000)</code>用1KB的内存空间构建中断向量表，在紧挨着它的位置用256字节的内存空间构建<code>BIOS</code>数据区，并在大约57KB以后的位置加载了8KB左右的与中断向量表相应的若干中断服务程序。</li><li>加载后又挪到<code>0x90000</code>是因为<strong>操作系统对内存的规划是在<code>0x90000</code>存放<code>bootsect</code></strong>，然后<code>bootsect</code>执行结束之后，立即将机器系统数据存放在此处，这样就可以及时回收寿命结束的程序占据的内存空间。而且后续会把<code>system</code>模块存放到<code>0x00000</code>处，这会覆盖<code>0x07c00</code>处的代码和数据。</li><li>不一次加载到位，<strong>是由于“两头约定”和“定位识别”</strong>，所以在开始时<code>bootsect</code>“被迫”加载到<code>0x07C00</code>位置。现在将自身移至<code>0x90000</code>处，说明操作系统开始根据自己的需要安排内存了。</li></ul><h2 id="bootsectsetuphead程序之间是怎么衔接的给出代码证据">4.<code>bootsect</code>、<code>setup</code>、<code>head</code>程序之间是怎么衔接的？给出代码证据</h2><ul><li><code>bootsect→setup</code>程序：<code>jmpi 0,SETUPSEG;</code><ul><li><code>bootsect</code>首先利用<code>int 0x13</code>中断分别加载<code>setup</code>程序及<code>system</code>模块（240个扇区），待<code>bootsect</code>程序的任务完成之后，执行代码<code>jmpi 0,SETUPSEG</code>。这行语句跳转至<code>0x90200</code>处，即<code>setup</code>程序加载的位置。<code>CS:IP</code>指向<code>setup</code>程序的第⼀条指令，意味着由<code>setup</code>程序接着<code>bootsect</code>程序继续执行。</li></ul></li><li><code>setup→head</code>程序： <code>jmpi 0,8;</code><ul><li>执行<code>setup</code>后，内核被移到了<code>0x00000</code>处，系统进⼊了保护模式，执行<code>jmpi 0,8</code>并加载了中断描述符表和全局描述符表。<code>CPU</code>工作方式转变为保护模式，一个重要的特征就是要根据<code>GDT</code>决定后续执行哪里的程序。</li></ul></li></ul><h2 id="setup程序的最后是jmpi-08为什么这个8不能简单的当作阿拉伯数字8看待究竟有什么内涵">5.<code>setup</code>程序的最后是<code>jmpi 0,8</code>，为什么这个<code>8</code>不能简单的当作阿拉伯数字<code>8</code>看待，究竟有什么内涵？</h2><p><code>0</code>是段内偏移，<code>8</code>是保护模式下的段选择符，用于选择描述符表和描述符表项以及所要求的特权级。这里<code>8</code>要转化为⼆进制<code>1000</code>。<code>1000</code>的最后两位<code>(00)</code>表示内核特权级（与之相对的用户特权级是<code>11</code>）；第三位的<code>0</code>表示<code>GDT</code>（如果是<code>1</code>，则表示<code>LDT</code>）；<code>1000</code>的<code>1</code>表示所选的表（在此就是<code>GDT</code>）的<code>1</code>项（<code>GDT</code>项号排序为0项、1项、2项，这里也就是第2项）来确定代码段的段基址和段限长等信息。代码是从段基址<code>0x00000000</code>、偏移为<code>0</code>处，也就是<code>head</code>程序的开始位置开始执行的，这意味着执行<code>head</code>程序。</p><h2 id="保护模式在保护什么它的保护体现在哪里特权级的目的和意义是什么分页有保护作用吗">6.保护模式在“保护”什么？它的“保护”体现在哪里？特权级的目的和意义是什么？分页有“保护”作用吗？</h2><h3 id="保护模式在保护什么">保护模式在“保护”什么？</h3><p>保护操作系统的安全，不受到恶意攻击。保护进程地址空间。</p><h3 id="它的保护体现在哪里">它的“保护”体现在哪里？</h3><p>打开保护模式后，<code>CPU</code>的寻址模式发生了变化，基于<code>GDT</code>去获取代码段或数据段的基址，相当于增加了⼀个段位寄存器。防止了对代码段或数据段的覆盖以及代码段自身的访问超限，明显增强了保护作⽤。</p><h3 id="特权级的目的和意义是什么">特权级的目的和意义是什么？</h3><ul><li><strong>目的是</strong>为了进行合理的资源管理，保护高特权级的段。其中操作系统的内核处于最高的特权级。</li><li><strong>意义是</strong>进行了对系统的保护，对操作系统的“主奴机制”影响深远。特权级的引入对操作系统内核进行了保护。</li></ul><h3 id="分页有保护作用吗">分页有“保护”作用吗？</h3><p>分页机制有保护作用，使得用户进程不能直接访问内核地址，进程间也不能相互访问。用户进程只能使用逻辑地址，而逻辑地址通过内核转化为线性地址，根据内核提供的专门为进程设计的分页方案，由MMU非直接映射转化为实际物理地址形成保护。此外，通过分页机制，每个进程都有自己的专属页表，有利于更安全、高效的使用内存，保护每个进程的地址空间。</p><h2 id="在setup程序里曾经设置过gdt为什么在head程序中将其废弃又重新设置了一个为什么设置两次而不是一次搞好">7.在<code>setup</code>程序里曾经设置过<code>gdt</code>，为什么在<code>head</code>程序中将其废弃，又重新设置了一个？为什么设置两次，而不是一次搞好？</h2><p>原来<code>GDT</code>所在的位置是设计代码时在<code>setup.s</code>里面设置的数据，将来这个<code>setup</code>模块所在的内存位置会在设计缓冲区时被覆盖。如果不改变位置，将来<code>GDT</code>的内容肯定会被缓冲区覆盖掉，从而影响系统的运行。这样一来，将来整个内存中唯一安全的地方就是现在<code>head.s</code>所在的位置了。</p><p>那么有没有可能在执行<code>setup</code>程序时直接把<code>GDT</code>的内容复制到<code>head.s</code>所在的位置呢？肯定不能。如果先复制<code>GDT</code>的内容，后移动<code>system</code>模块，它就会被后者覆盖；如果先移动<code>system</code>模块，后复制<code>GDT</code>的内容，它又会把<code>head.s</code>对应的程序覆盖，而这时<code>head.s</code>还没有执行。所以，无论如何，都要重新建立<code>GDT</code>。</p><h2 id="内核的线性地址空间是如何分页的画出从0x000000开始的7个页包括页目录表页表所在页的挂接关系图就是页目录表的前四个页目录项第一个页表的前7个页表项指向什么位置">8.内核的线性地址空间是如何分页的？画出从<code>0x000000</code>开始的<code>7</code>个页（包括页目录表、页表所在页）的挂接关系图，就是页目录表的前四个页目录项、第一个页表的前<code>7</code>个页表项指向什么位置？</h2><p><code>head.s</code>在<code>setup_paging</code>开始创建分页机制。将页目录表和4个页表放到物理内存的起始位置，从内存起始位置开始的5个页空间内容全部清零（每页4KB），然后设置页目录表的前4项，使之分别指向4个页表。然后开始从高地址向低地址方向填写4个页表，依次指向内存从高地址向低地址方向的各个页面。即将第4个页表的最后⼀项指向寻址范围的最后⼀个页面。即<code>0xFFF000</code>开始的<code>4KB</code>大小的内存空间。将第4个页表的倒数第⼆个页表项指向倒数第⼆个页面，即<code>0xFFF000-0x1000</code>（<code>0xFFE000</code>）开始的<code>4KB</code>字节的内存空间，依此类推。最终，从高地址向低地址方向完成4个页表的填写，页表中的每一个页表项分别指向内存从高地址向低地址方向的各个页面。</p><p><strong>挂接关系图：</strong></p><figure><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231217012602038.png" alt="image-20231217012602038"><figcaption aria-hidden="true">image-20231217012602038</figcaption></figure><h2 id="根据内核分页为线性地址恒等映射的要求推导出四个页表的映射公式写出页表的设置代码">9.根据内核分页为线性地址恒等映射的要求，推导出四个页表的映射公式，写出页表的设置代码</h2><p>页表设置代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">; head.s</span><br><span class="line">.align <span class="number">2</span></span><br><span class="line">setup_paging:</span><br><span class="line">  movl $<span class="number">1024</span>*<span class="number">5</span>,%ecx<span class="comment">/* 5 pages - pg_dir+4 page tables */</span></span><br><span class="line">  xorl %eax,%eax</span><br><span class="line">  xorl %edi,%edi<span class="comment">/* pg_dir is at 0x000 */</span></span><br><span class="line">  cld;rep;stosl 掉方向的循环 页表最后<span class="number">3</span>位: |用户|可读写|存在p|</span><br><span class="line">  movl $pg0+<span class="number">7</span>,_pg_dir<span class="comment">/* set present bit/user r/w */</span></span><br><span class="line">  movl $pg1+<span class="number">7</span>,_pg_dir+<span class="number">4</span><span class="comment">/*  --------- &quot; &quot; --------- */</span></span><br><span class="line">  movl $pg2+<span class="number">7</span>,_pg_dir+<span class="number">8</span><span class="comment">/*  --------- &quot; &quot; --------- */</span></span><br><span class="line">  movl $pg3+<span class="number">7</span>,_pg_dir+<span class="number">12</span><span class="comment">/*  --------- &quot; &quot; --------- */</span></span><br><span class="line">  movl $pg3+<span class="number">4092</span>,%edi</span><br><span class="line">  movl $<span class="number">0xfff007</span>,%eax<span class="comment">/*  16Mb - 4096 + 7 (r/w user,p) 刷页表项 */</span></span><br><span class="line">  <span class="built_in">std</span></span><br><span class="line"><span class="number">1</span>:  stosl<span class="comment">/* fill pages backwards - more efficient :-) */</span></span><br><span class="line">  subl $<span class="number">0x1000</span>,%eax</span><br><span class="line">  jge <span class="number">1b</span></span><br><span class="line">  xorl %eax,%eax<span class="comment">/* pg_dir is at 0x0000 */</span></span><br><span class="line">  movl %eax,%cr3<span class="comment">/* cr3 - page directory start */</span></span><br><span class="line">  movl %cr0,%eax</span><br><span class="line">  orl $<span class="number">0x80000000</span>,%eax</span><br><span class="line">  movl %eax,%cr0<span class="comment">/* set paging (PG) bit 至此保护模式和分页都打开了 */</span></span><br><span class="line">  ret<span class="comment">/* this also flushes prefetch-queue */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="为什么不用call而是用ret调用main函数">10.为什么不用<code>call</code>，而是用<code>ret</code>“调用”<code>main</code>函数？</h2><p><code>call</code>指令会将<code>EIP</code>的值自动压栈，保护返回现场，然后执行被调函数的程序，等到执行被调函数的<code>ret</code>指令时，自动出栈给<code>EIP</code>并还原现场，继续执行<code>call</code>的下⼀条指令。</p><p>如果用<code>call</code>调用操作系统的<code>main</code>函数，那么<code>ret</code>时返回给谁呢？（<code>main</code>函数是操作系统的）</p><p>用<code>ret</code>实现的调用操作系统的<code>main</code>函数。操作系统的设计者做了一个仿<code>call</code>的动作（模仿<code>call</code>做的压栈和跳转的动作），手工编写代码压栈和跳转，模仿了<code>call</code>的全部动作，实现了调用<code>setup_paging</code>函数。压栈的<code>EIP</code>值并不是调用<code>setup_paging</code>函数的下一行指令的地址，而是操作系统的<code>main</code>函数的执行入口地址<code>_main</code>。这样，当<code>setup_paging</code>函数执行到<code>ret</code>时，从栈中将操作系统的<code>main</code>函数的执行入口地址<code>_main</code>自动出栈给<code>EIP</code>，<code>EIP</code>指向<code>main</code>函数的入口地址，实现了用返回指令“调用”<code>main</code>函数。</p><h1 id="第二部分">第二部分</h1><h2 id="计算内核代码段数据段的段基址段限长特权级">1.计算内核代码段、数据段的段基址、段限长、特权级</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_gdt:  .quad <span class="number">0x0000000000000000</span><span class="comment">/* NULL descriptor */</span></span><br><span class="line">  .quad <span class="number">0x00c09a0000000fff</span><span class="comment">/* 16Mb */</span></span><br><span class="line">  .quad <span class="number">0x00c0920000000fff</span><span class="comment">/* 16Mb */</span></span><br><span class="line">  .quad <span class="number">0x0000000000000000</span><span class="comment">/* TEMPORARY - don&#x27;t use 为了隔开*/</span></span><br><span class="line">  .fill <span class="number">252</span>,<span class="number">8</span>,<span class="number">0</span><span class="comment">/* space for LDT&#x27;s and TSS&#x27;s etc */</span></span><br></pre></td></tr></table></figure><p><strong>代码段：</strong></p><ul><li>段基址（Base）：<code>0x00000000</code></li><li>段限长（Limit）：<code>0x0fff -&gt; 2^12*4kB = 16MB</code></li><li>特权级（dpl）：<code>0</code></li></ul><p><strong>数据段：</strong></p><ul><li>段基址（Base）：<code>0x00000000</code></li><li>段限长（Limit）：<code>0x0fff -&gt; 2^12*4kB = 16MB</code></li><li>特权级（dpl）：<code>0</code></li></ul><h2 id="计算进程0的代码段数据段的段基址段限长特权级">2.计算进程0的代码段、数据段的段基址、段限长、特权级。</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sched.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INIT_TASK \</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">&#123; \</span><br><span class="line">      &#123;<span class="number">0</span>,<span class="number">0</span>&#125;, \</span><br><span class="line"><span class="comment">/* ldt */</span>  &#123;<span class="number">0x9f</span>,<span class="number">0xc0fa00</span>&#125;, \</span><br><span class="line">      &#123;<span class="number">0x9f</span>,<span class="number">0xc0f200</span>&#125;, \</span><br><span class="line">  &#125;, \</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LDT写好看点:</span></span><br><span class="line">  &#123; \</span><br><span class="line"><span class="comment">/*NULL*/</span>  &#123;<span class="number">0</span>,<span class="number">0</span>&#125;, \</span><br><span class="line"><span class="comment">/* cs */</span>    &#123;<span class="number">0x0000</span>_009f,<span class="number">0x00c0</span>_fa00&#125;, \ </span><br><span class="line"><span class="comment">/* ds */</span>  &#123;<span class="number">0x0000</span>_009f,<span class="number">0x00c0</span>_f200&#125;, \</span><br><span class="line">  &#125;, </span><br></pre></td></tr></table></figure><p><strong>代码段：</strong></p><ul><li>段基址（Base）：<code>0x00</code></li><li>段限长（Limit）：<code>0x9f * 4KB = 640KB</code></li><li>特权级（dpl）：<code>3</code></li></ul><p><strong>数据段：</strong></p><ul><li>段基址（Base）：<code>0x00</code></li><li>段限长（Limit）：<code>0x9f * 4KB = 640KB</code></li><li>特权级（dpl）：<code>3</code></li></ul><h2 id="fork进程1之前为什么先调用move_to_user_mode用的是什么方法解释其中的道理">3.<code>fork</code>进程1之前，为什么先调用<code>move_to_user_mode()</code>？用的是什么方法？解释其中的道理</h2><blockquote><p><code>Linux</code>操作系统规定，除进程0之外，所有进程都要由一个已有进程在3特权级下创建。</p><p>方法是调用<code>move_to_user_mode()</code>函数，<strong>模仿中断返回动作</strong>，实现进程0的特权级从<code>0</code>转变为<code>3</code>。</p></blockquote><p>为了<code>iret</code>的正确使用，设计者首先手工写压栈代码模拟<code>int</code>（中断）压栈，当执行<code>iret</code>指令时，<code>CPU</code>自动将这<code>5</code>个寄存器的值（<code>SS，ESP，EFLAGS，CS，EIP</code>）按序恢复给<code>CPU</code>，<code>CPU</code>就会翻转到<code>3</code>特权级的段，执行<code>3</code>特权级的进程代码。</p><p>为了<code>iret</code>能翻转到3特权级，不仅手工模拟的压栈顺序必须正确，而且<code>SS、CS</code>的特权级还必须正确。栈中的<code>SS</code>值是<code>0x17</code>，用二进制表示就是<code>00010111</code>，最后两位表示3，是<strong>用户特权级</strong>；倒数第3位是1，表示从<code>LDT</code>中获取<strong>段描述符</strong>；第4～5位的10表示从<code>LDT</code>的第3项中得到<strong>进程栈段的描述符</strong>。</p><p>当执行<code>iret</code>时，硬件会按序将5个<code>push</code>压栈的数据分别出栈给<code>SS</code>、<code>ESP</code>、<code>EFLAGS</code>、<code>CS</code>、<code>EIP</code>。压栈顺序与通常中断返回时硬件的出栈动作一样，返回的效果也是一样的。</p><p>执行完<code>move_to_user_mode()</code>，相当于进行了一次中断返回，进程0的特权级从<code>0</code>翻转为<code>3</code>，成为名副其实的进程。</p><h2 id="根据什么判定move_to_user_mode中iret之后的代码为进程0的代码">4.根据什么判定<code>move_to_user_mode()</code>中<code>iret</code>之后的代码为进程0的代码</h2><p>在<code>sched.c</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ltr(<span class="number">0</span>);    <span class="comment">//重要！将TSS挂接到TR寄存器</span></span><br><span class="line">lldt(<span class="number">0</span>);  <span class="comment">//重要！将LDT挂接到LDTR寄存器</span></span><br></pre></td></tr></table></figure><p>已经将进程0的<code>tss</code>和<code>ldt</code>挂接到了<code>tr</code>寄存器和<code>ldtr</code>寄存器了，所以<code>iret</code>之后的代码为进程0的代码。</p><h2 id="进程0的task_struct在哪具体内容是什么">5.进程<code>0</code>的<code>task_struct</code>在哪？具体内容是什么？</h2><p>进程0的<code>task_struct</code>位于内核数据区，因为在进程0未激活之前，使用的是<code>boot</code>阶段的<code>user_stack</code>，因此存储在<code>user_stack</code>中。</p><p><strong>具体内容：</strong>包含了进程0的进程状态、进程0的<code>LDT</code>、进程0的<code>TSS</code>等等。其中<code>ldt</code>设置了代码段和堆栈段的基址和限长(640KB)，而<code>TSS</code>则保存了各种寄存器的值，包括各个段选择符。</p><h2 id="在system.h里读懂代码这里中断门陷阱门系统调用都是通过_set_gate设置的用的是同一个嵌入汇编代码比较明显的差别是dpl一个是3另外两个是0这是为什么说明理由">6.在<code>system.h</code>里读懂代码。这里中断门、陷阱门、系统调用都是通过<code>_set_gate</code>设置的，用的是同一个嵌入汇编代码，比较明显的差别是<code>dpl</code>一个是<code>3</code>，另外两个是<code>0</code>，这是为什么？说明理由</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _set_gate(gate_addr,type,dpl,addr) \</span></span><br><span class="line"><span class="meta">__asm__ (<span class="string">&quot;movw %%dx,%%ax\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;movw %0,%%dx\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;movl %%eax,%1\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;movl %%edx,%2&quot;</span> \</span></span><br><span class="line"><span class="meta">    : \</span></span><br><span class="line"><span class="meta">    : <span class="string">&quot;i&quot;</span> ((short) (0x8000+(dpl&lt;&lt;13)+(type&lt;&lt;8))), \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;o&quot;</span> (*((char *) (gate_addr))), \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;o&quot;</span> (*(4+(char *) (gate_addr))), \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;d&quot;</span> ((char *) (addr)),<span class="string">&quot;a&quot;</span> (0x00080000))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_intr_gate(n,addr) \</span></span><br><span class="line"><span class="meta">    _set_gate(&amp;idt[n],14,0,addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_trap_gate(n,addr) \</span></span><br><span class="line"><span class="meta">    _set_gate(&amp;idt[n],15,0,addr)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> set_system_gate(n,addr) \</span></span><br><span class="line"><span class="meta">    _set_gate(&amp;idt[n],15,3,addr)</span></span><br></pre></td></tr></table></figure><p><code>dpl</code>为0的意思是只能由内核处理，<code>dpl</code>为3的意思是可以由<code>3</code>特权级（也就是用户特权级）调用。</p><p>当用户程序产生系统调用软中断后，系统都通过<code>system_call</code>总入口找到具体的系统调用函数。<code>set_system_gate</code>设置系统调用，须将<code>dpl</code>设置为3，<strong>允许用户特权级的进程调用</strong>，否则会引发<code>General Protection</code>异常。<code>set_trap_gate</code>及<code>set_intr_gate</code>设置陷阱和中断为内核使用，<strong>需禁止用户进程调用</strong>，所以<code>dpl</code>为0。</p><h2 id="分析get_free_page函数的代码叙述在主内存中获取一个空闲页的技术路线">7.分析<code>get_free_page()</code>函数的代码，叙述在主内存中获取一个空闲页的技术路线</h2><ul><li>通过逆向扫描页表位图<code>mem_map</code>。</li><li>从高地址开始找到内存中第一个空闲（字节为0）页面，将其置为1，标记该页面已被使用。</li><li><code>ecx</code>左移12位加<code>LOW_MEM</code>获得该页的物理地址，并将页面清零。</li><li>最后返回空闲页面物理内存的起始地址。</li></ul><h2 id="copy_process函数的参数最后五项是long-eiplong-cslong-eflagslong-esplong-ss查看栈结构确实有这五个参数奇怪的是其他参数的压栈代码都能找得到确找不到这五个参数的压栈代码反汇编代码中也查不到请解释原因详细论证其他所有参数是如何传入的">8.<code>copy_process</code>函数的参数最后五项是：<code>long eip,long cs,long eflags,long esp,long ss</code>。查看栈结构确实有这五个参数，奇怪的是其他参数的压栈代码都能找得到，确找不到这五个参数的压栈代码，反汇编代码中也查不到，请解释原因。详细论证其他所有参数是如何传入的</h2><p><code>copy_process</code>执行是因为进程调用了<code>fork</code>函数创建进程，会执行<code>int 0x80</code>产生软中断，中断使<code>CPU</code>硬件自动将<code>SS、ESP、EFLAGS、CS、EIP</code>这5个寄存器的值按顺序压入进程0内核栈，又因为函数传递参数是使用栈的，所以刚好可以作为<code>copy_process</code>的最后五个参数。</p><h2 id="详细分析linux操作系统如何设置保护模式的中断机制">9.详细分析<code>Linux</code>操作系统如何设置保护模式的中断机制</h2><ol type="1"><li>在<code>setup.s</code>中，<code>cli</code>关中断，设置<code>IDTR</code>，后开启32位保护模式。</li><li>在<code>head.s</code>中，初始化中断描述符表。<code>IDT</code>有256个表项。</li><li><code>main.c</code>中，<code>trap_init()</code>将中断服务程序与<code>IDT</code>进行挂接。挂接的过程就是将中断描述符表中对应的表项按照格式填好，表项内容包括中断服务程序的地址，<code>DPL</code>等信息。还会挂在一些与硬件相关的中断，如<code>tty_init()</code>，<code>sched_init()</code>的时钟中断，硬盘软盘等的中断。<code>sched_init()</code>中还会挂载<code>int 0x80</code>中断，作为系统调用。</li><li>全部完成后，<code>sti()</code>开中断。至此中断服务体系已经构建完毕，系统可以在32位保护模式下处理中断了。</li></ol><h2 id="分析linux操作系统如何剥夺用户进程访问内核及其他进程的能力">10.分析<code>Linux</code>操作系统如何剥夺用户进程访问内核及其他进程的能力</h2><p>在保护模式下，所有用户态进程的代码段和数据段的段选择子都是一样的。用户数据段为<code>0x17</code>，用户代码段为<code>0x0f</code>。而内核数据段为<code>0x10</code>，代码段<code>0x08</code>，这俩标注了是<code>GDT</code>，用户无法访问。</p><h2 id="分析后面两行代码的意义">11.分析后面两行代码的意义</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_system_call:</span><br><span class="line">    cmpl $nr_system_calls<span class="number">-1</span>,%eax <span class="comment">//eax中是调用号</span></span><br><span class="line">    ja bad_sys_call</span><br></pre></td></tr></table></figure><ul><li>判断调用号是否越界</li><li>确定性的内核</li></ul><p>调用号如果超出范围的话就在<code>eax</code>中置-1，并退出。</p><h1 id="第三部分">第三部分</h1><h2 id="分析copy_page_tables函数的代码叙述父进程如何为子进程复制页表">1.分析<code>copy_page_tables()</code>函数的代码，叙述父进程如何为子进程复制页表</h2><ol type="1"><li>进入<code>copy_page_tables</code>函数后，先为新的页表申请⼀个空闲页面，并把进程0中第⼀个页表里的前160个页表项复制到这个页面中（1个页表项控制⼀个页面4KB内存空间，160个页表项能够控制640KB内存空间）。</li><li>进程0和进程1的页表暂时都指向了相同的页面，意味着进程1也能够操做进程0的页面，之后对进程1的页目录表进行设置。</li><li>最后，用重置<code>CR3</code>的方法刷新页面变换高速缓存。进程1的页表和页目录表设置完毕。（<code>CR3</code>寄存器：3号32位控制寄存器，其高20位存放页目录表的基地址。当<code>CR0</code>中的<code>PG</code>标志置位时，<code>CPU</code>使用<code>CR3</code>指向的页目录表和页表进行虚拟地址到物理地址的映射。）</li></ol><blockquote><p>进程1此时是⼀个空架子，尚未对应程序，它的页表又是从进程0的页表复制过来的，它们管理的页面彻底⼀致，也就是它暂时和进程0共享⼀套页面管理结构。等将来它有了自己的程序，再把关系解除，并重新组织自己的内存管理结构。</p></blockquote><h2 id="进程0创建进程1时为进程1建立了task_struct及内核栈第一个页表分别位于物理内存两个页请问这两个页的位置究竟占用的是谁的线性地址空间内核进程0进程1还是没有占用任何线性地址空间说明理由可以图示并给出代码证据">2.进程0创建进程1时，为进程1建立了<code>task_struct</code>及内核栈，第一个页表，分别位于物理内存两个页。请问，这两个页的位置，究竟占用的是谁的线性地址空间，内核、进程0、进程1，还是没有占用任何线性地址空间？说明理由（可以图示）并给出代码证据。</h2><blockquote><p>占用<strong>内核的线性地址空间</strong>。</p></blockquote><p><strong>原因：</strong><code>task_struct</code>和内核栈占用的是最后两个物理页。进程0和进程1的<code>LDT</code>的<code>LIMIT</code>属性将进程0和进程1的地址空间限定0~640KB，所以进程0、 进程1均无法访问到这两个页面，故两页面占用内核的线性地址空间。为进程1分配的这两个页，在16MB的顶端倒数第⼀页、第⼆页，内核的线性地址空间为<code>0x000000~0xFFFFFF</code>（即前16M），且线性地址与物理地址呈现⼀⼀对应的关系，因此得到的物理页地址一定也是内核页地址。</p><h2 id="假设经过一段时间的运行操作系统中已经有5个进程在运行且内核为进程4进程5分别创建了第一个页表这两个页表在谁的线性地址空间用图表示这两个页表在线性地址空间和物理地址空间的映射关系">3.假设：经过一段时间的运行，操作系统中已经有5个进程在运行，且内核为进程4、进程5分别创建了第一个页表，这两个页表在谁的线性地址空间？用图表示这两个页表在线性地址空间和物理地址空间的映射关系。</h2><p>这两个页面<strong>均占用内核的线性地址空间</strong>。既然是内核线性地址空间，则与物理地址空间为⼀⼀对应关系。根据每⼀个进程占用16个页目录表项，则进程4占用第<code>65~80</code>项的页目录表项。同理，进程5占用第<code>81~96</code>项的页目录表项。因为目前只分配了⼀个页面（用作进程的第⼀个页表），则分别只须要使用第⼀个页目录表项。</p><p>映射关系：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231218143339540.png" alt="image-20231218143339540" style="zoom: 67%;"></p><h2 id="代码中的ljmp-0nt很奇怪按理说jmp指令跳转到得位置应该是一条指令的地址可是这行代码却跳到了m-__tmp.a这明明是一个数据的地址更奇怪的这行代码竟然能正确执行请论述其中的道理">4.代码中的<code>"ljmp %0\n\t"</code>很奇怪，按理说<code>jmp</code>指令跳转到得位置应该是一条指令的地址，可是这行代码却跳到了<code>"m" (*&amp;__tmp.a)</code>，这明明是一个数据的地址，更奇怪的，这行代码竟然能正确执行。请论述其中的道理。</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> switch_to(n) &#123;\</span></span><br><span class="line"><span class="meta">struct &#123;long a,b;&#125; __tmp; \</span></span><br><span class="line"><span class="meta">__asm__(<span class="string">&quot;cmpl %%ecx,_current\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;je 1f\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;movw %%dx,%1\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;xchgl %%ecx,_current\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;ljmp %0\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;cmpl %%ecx,_last_task_used_math\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;jne 1f\n\t&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;clts\n&quot;</span> \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;1:&quot;</span> \</span></span><br><span class="line"><span class="meta">    ::<span class="string">&quot;m&quot;</span> (*&amp;__tmp.a),<span class="string">&quot;m&quot;</span> (*&amp;__tmp.b), \</span></span><br><span class="line"><span class="meta">    <span class="string">&quot;d&quot;</span> (_TSS(n)),<span class="string">&quot;c&quot;</span> ((long) task[n])); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p><code>ljmp %0\n\t</code>经过任务门机制并未实际使用任务门，将<code>CPU</code>的各个寄存器值保存在进程0的<code>TSS</code>中，将进程1的<code>TSS</code>数据以<code>LDT</code>的代码段、数据段描述符恢复给<code>CPU</code>的各个寄存器，实现从0特权级的内核代码切换到3特权级的进程1代码执行。其中<code>tss.eip</code>也天然恢复给了<code>CPU</code>，此时<code>EIP</code>指向的就是<code>fork</code>中的<code>if(__res &gt;= 0)</code>语句。其中<code>a</code>对应<code>EIP</code>，<code>b</code>对应<code>CS</code>，<code>ljmp</code>此时通过<code>CPU</code>中的电路进行硬件切换，进程由当前进程切换到进程<code>n</code>。<code>CPU</code>将当前寄存器的值保存到当前进程的<code>TSS</code>中，将进程<code>n</code>的<code>TSS</code>数据及<code>LDT</code>的代码段和数据段描述符恢复给<code>CPU</code>的各个寄存器，实现任务切换。</p><h2 id="进程0开始创建进程1调用fork跟踪代码时我们发现fork代码执行了两次第一次执行fork代码后跳过init直接执行了for-pause第二次执行fork代码后执行了init奇怪的是我们在代码中并没有看到向转向fork的goto语句也没有看到循环语句是什么原因导致fork反复执行请说明理由可以图示并给出代码证据">5.进程0开始创建进程1，调用<code>fork()</code>，跟踪代码时我们发现，<code>fork</code>代码执行了两次。第一次，执行<code>fork</code>代码后，跳过<code>init()</code>直接执行了<code>for(;;) pause()</code>，第二次执行<code>fork</code>代码后，执行了<code>init()</code>。奇怪的是，我们在代码中并没有看到向转向<code>fork</code>的<code>goto</code>语句，也没有看到循环语句，是什么原因导致<code>fork</code>反复执行？请说明理由（可以图示），并给出代码证据。</h2><p><code>fork</code>为<code>inline</code>函数，其中调用了<code>sys_call0</code>，产⽣<code>int 0x80</code>软中断，将<code>ss，esp，eflags，cs，eip</code>压栈，其中<code>eip</code>为<code>int 0x80</code>的下⼀句的地址。在<code>copy_process</code>中，内核将进程0的<code>tss</code>复制得到进程1的<code>tss</code>，并将进程1的<code>tss.eax</code>设为0，而进程0中的<code>eax</code>为1。在进程调度时<code>tss</code>中的值被恢复至相应寄存器中，包括<code>eip，eax</code>等。所以中断返回后，进程0和进程1均会从<code>int 0x80</code>的下⼀句开始执行，即<code>fork</code>执行了两次。</p><p>由于<code>eax</code>代表返回值，所以进程0和进程1会得到不同的返回值，在<code>fork</code>返回到进程0后，进程0判断返回值非0，因此执行代码<code>for(;;) pause()</code>；在<code>sys_pause</code>函数中，内核设置了进程0的状态为<code>TASK_INTERRUPTIBLE</code>，并进行进程调度。由于只有进程1处于就绪态，因此调度执行进程1的指令。由于进程1在<code>TSS</code>中设置了<code>eip</code>等寄存器的值，因此从<code>int 0x80</code>的下⼀条指令开始执行，且设定返回<code>eax</code>的值为0作为<code>fork</code>的返回值，因此进程1执行了<code>init</code>的函数。导致<code>fork</code>反复执行，主要是利用了系统调用<code>sys_fork</code>和<code>sys_pause</code>对进程状态的设置。</p><h2 id="详细分析进程调度的全过程考虑所有可能signalalarm除外">6.详细分析进程调度的全过程。考虑所有可能（<code>signal、alarm</code>除外）</h2><ul><li>进程中有就绪进程，且时间片没有用完。<ul><li>正常情况下，<code>schedule()</code>函数首先扫描任务数组。通过比较每个就绪（<code>TASK_RUNNING</code>）任务的运行时间递减滴答计数<code>counter</code>的值来确定当前哪个进程运行的时间最少。哪⼀个的值大，就表示运行时间还不长，于是就选中该进程，最后调用<code>switch_to()</code>执行实际的进程切换操作</li></ul></li><li>进程中有就绪进程，但所有就绪进程时间片都用完（<code>c = 0</code>）<ul><li>如果此时所有处于<code>TASK_RUNNING</code>状态进程的时间片都已经用完，系统就会根据每个进程的优先权值<code>priority</code>，对系统中所有进程（包括正在睡眠的进程）重新计算每个任务需要运行的时间片值<code>counter</code>。计算的公式是：<code>counter = counter + priority/2</code>，然后<code>schedule()</code>函数重新扫描任务数组中所有处于<code>TASK_RUNNING</code>状态，重复上述过程，直到选择出⼀个进程为止。最后调用<code>switch_to()</code>执行实际的进程切换操作。</li></ul></li><li>所有进程都不是就绪的（<code>c = -1</code>）<ul><li>此时代码中的<code>c = -1，next = 0</code>，跳出循环后，执行<code>switch_to(0)</code>，切换到进程0执行。当所有进程都不是就绪的时候进程0执行。</li></ul></li></ul><h2 id="分析panic函数的源代码根据你学过的操作系统知识完整准确的判断panic函数所起的作用假如操作系统设计为支持内核进程始终运行在0特权级的进程你将如何改进panic函数">7.分析<code>panic</code>函数的源代码，根据你学过的操作系统知识，完整、准确的判断<code>panic</code>函数所起的作用。假如操作系统设计为支持内核进程（始终运行在0特权级的进程），你将如何改进<code>panic</code>函数？</h2><p>当系统发现无法继续运行下去的故障时，将调用<code>panic</code>函数，它会导致程序终止，然后由系统显示错误号。如果出现错误的函数不是进程0，那么就要进行数据同步，把缓冲区中的数据尽量同步到硬盘上。遵循了<code>Linux</code>尽量简明的原则。</p><p>改进<code>panic</code>函数：将死循环<code>for(;;)</code>改进为跳转到内核进程（始终运行在0特权级的进程），让内核继续执行。</p>]]></content>
      
      
      <categories>
          
          <category> 国科大课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UCAS课程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用函数</title>
      <link href="/blogs/2d14aaf0.html"/>
      <url>/blogs/2d14aaf0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用函数"><a href="#Linux常用函数" class="headerlink" title="Linux常用函数"></a>Linux常用函数</h1><h2 id="close函数"><a href="#close函数" class="headerlink" title="close函数"></a>close函数</h2><p>关闭一个文件描述符， 使它不在指向任何文件。在新的文件操作中该文件描述符可以被再次使用。</p><p>使用close函数时传入需要关闭文件的<strong>文件描述符</strong>（即调用open函数的返回值）即可。若关闭文件成功则返回0；若关闭文件失败则返回-1。</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>fd</code>：需要关闭的文件或套接字的文件描述符。</p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>若关闭文件成功则返回0；若关闭文件失败则返回-1。</p><h2 id="open函数"><a href="#open函数" class="headerlink" title="open函数"></a>open函数</h2><p>用来打开或者创建一个文件或者设备。</p><h3 id="函数原型-1"><a href="#函数原型-1" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span> </span><br></pre></td></tr></table></figure><h3 id="函数参数-1"><a href="#函数参数-1" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数"></a>第一个参数</h4><p><code>pathname</code>：指定需要打开的文件的路径。</p><ul><li>若pathname以<strong>路径</strong>的方式给出，则需要创建该文件时，在pathname路径下进行创建。</li><li>若pathname以<strong>文件名</strong>的方式给出，则需要创建该文件时，默认在当前路径下进行创建。</li></ul><h4 id="第二个参数"><a href="#第二个参数" class="headerlink" title="第二个参数"></a>第二个参数</h4><p><code>flags</code>：表示打开文件的方式。</p><p>flags是通过<code>O_RDONLY</code>, <code>O_WRONLY</code>或<code>O_RDWR</code>（指明文件是以只读 , 只写或读写方式打开的）与下面的零个或多个可选模式<strong>按位或</strong>操作符得到的:</p><ul><li><code>O_CREATE</code>：如果文件不存在就创建一个新文件。</li><li><code>O_EXCL</code>：通过O_CREATE，生成文件，若文件已经存在，则open出错 , 调用失败。这个O_EXCL与O_CREATE一起使用。</li><li><code>O_TRUNC</code>：如果文件已经存在，并且该文件是可写的，那么将会设置该文件的长度为0（清空文件的内容）。</li><li><code>O_APPEND</code>：文件以追加模式打开，在写之前，文件读写指针被置末尾。</li></ul><h4 id="第三个参数"><a href="#第三个参数" class="headerlink" title="第三个参数"></a>第三个参数</h4><p><code>mode</code>：指明文件使用的权限。</p><p>传入0666参数进行文件创建，按理应得到-rw-rw-rw-权限的文件，但却得到了下面权限的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-r--</span><br></pre></td></tr></table></figure><p>这是因为权限掩码的存在（默认为0002），可以在代码中设置权限掩码来避免上述情况发生：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    umask(<span class="number">0000</span>);<span class="comment">//设置文件掩码                                                                     </span></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;./log.txt&quot;</span>,O_RDWR | O_CREAT | O_TRUNC, <span class="number">0666</span>);</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置成功后的文件权限如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-rw-rw-</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 当不需创建文件时，可以不用设置第三个参数。</p><h3 id="函数返回值-1"><a href="#函数返回值-1" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>返回一个新的文件描述符（若是有错误发生返回-1，并在errno设置错误信息）。</p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><p>创建test.c文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="comment">//在指定路径下创建一个新文件</span></span><br><span class="line">    <span class="type">int</span> fd1 = open(<span class="string">&quot;./helloworld1.txt&quot;</span>,O_CREAT | O_RDWR | O_TRUNC,<span class="number">0664</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,fd1);</span><br><span class="line">    <span class="comment">//在指定路径下创建一个新文件</span></span><br><span class="line">    <span class="type">int</span> fd2 = creat(<span class="string">&quot;./helloworld2.txt&quot;</span>,<span class="number">0664</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,fd2);</span><br><span class="line">    <span class="comment">//在指定路径下创建一个新文件</span></span><br><span class="line">    <span class="type">int</span> fd3 = open(<span class="string">&quot;./helloworld3.txt&quot;</span>,O_CREAT | O_RDWR | O_TRUNC);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,fd3);</span><br><span class="line"></span><br><span class="line">    close(fd1);</span><br><span class="line">    close(fd2);</span><br><span class="line">    close(fd3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vm:/home/wzy/code# gcc test.c -o test</span><br><span class="line">root@vm:/home/wzy/code# ./test</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130142432496.png" alt="image-20231130142432496"></p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130142340377.png" alt="image-20231130142340377"></p><p>这里我们也可以看出文件描述符的取值最小从3开始，因为0，1，2是分配给标准I/O的描述符。</p><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><p>创建文件名test2.c：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    close(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;./log&quot;</span>,O_CREAT | O_RDWR);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vm:/home/wzy/code# gcc test.c -o test</span><br><span class="line">root@vm:/home/wzy/code# ./test</span><br></pre></td></tr></table></figure><p>运行成功后查看log文件的内容发现Hello和fd的值写进log文件中。fd的值为1；<strong>并且永远取未用描述符的最小值</strong>。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130142819174.png" alt="image-20231130142819174" style="zoom: 67%;"></p><h4 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h4><p>创建my_touch.c文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单实现touch命令</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;touch: 缺少了文件操作数\nTry &#x27;touch --help&#x27; for more information.\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; argc; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(args[i], O_RDONLY | O_CREAT, <span class="number">0644</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@vm:/home/wzy/code# gcc my_touch -o touch</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#这样我们就可以使用touch创建文件，类似于Linux中的touch命令</span></span></span><br><span class="line">root@vm:/home/wzy/code# touch 1.c 2.c 3.c</span><br></pre></td></tr></table></figure><h2 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h2><p>Linux系统接口中使用write函数向文件写入信息。</p><p> write向文件描述符fd所引用的文件中写入从buf开始的缓冲区中count个字节的数据。POSIX规定，当使用了write()之后再使用read()，那么读取到的应该是更新后的数据。</p><h3 id="函数原型-2"><a href="#函数原型-2" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-2"><a href="#函数参数-2" class="headerlink" title="函数参数"></a>函数参数</h3><ol><li><code>fd</code>：显示数据传输对象的文件描述符。</li><li><code>buf</code>：保存要传输数据的缓冲地址值。</li><li><code>count</code>：要传输数据的字节数。</li></ol><h3 id="函数返回值-2"><a href="#函数返回值-2" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>成功时返回所写入的字节数（若为零则表示没有写入数据）。失败时返回-1，并置errno为相应值。若count为零，对于普通文件无任何影响，但对特殊文件将产生不可预料的后果。返回0表示没有数据写入。</p><h2 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h2><p>read()从文件描述符fd中读取count字节的数据并放入从buf开始的缓冲区中。如果count为零，read()返回0，不执行其他任何操作。如果 count大于SSIZE_MAX，那么结果将不可预料。</p><h3 id="函数原型-3"><a href="#函数原型-3" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-3"><a href="#函数参数-3" class="headerlink" title="函数参数"></a>函数参数</h3><ol><li><code>fd</code>：显示数据接收对象的文件描述符。</li><li><code>buf</code>：要保存接收数据的缓冲地址值。</li><li><code>count</code>：要接收数据的最大字节数。</li></ol><h3 id="函数返回值-3"><a href="#函数返回值-3" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>成功时返回读取的字计数；失败时返回-1，并设置errno的值；读到文件末尾的话就返回0。</p><h3 id="使用实例-1"><a href="#使用实例-1" class="headerlink" title="使用实例"></a>使用实例</h3><p>模拟cat命令实现代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, args[<span class="number">2</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,args[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; argc; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> fd;</span><br><span class="line">        fd = open(args[i], O_RDONLY);</span><br><span class="line">        <span class="type">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">        ret = read(fd, buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">        <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">            write(<span class="number">1</span>, buff, ret);</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@vm:/home/wzy/code# gcc cat.c -o cat</span><br><span class="line">root@vm:/home/wzy/code# cat helloworld.txt</span><br><span class="line">This is helloworld.txt.root@vm:/home/wzy/code#</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130144235599.png" alt="image-20231130144235599" style="zoom: 80%;"></p><p>运行编译生成的可执行程序可以打开存在的小文件。</p><h2 id="perror函数"><a href="#perror函数" class="headerlink" title="perror函数"></a>perror函数</h2><p>perror函数是一个错误信息输出函数，用于在发生系统调用错误时输出有关错误信息的描述。其主要作用是将errno对应的错误信息输出到标准错误输出中（<em>stderr</em>）。</p><p><strong>工作原理：</strong></p><ul><li>当一个系统调用或库函数发生错误时，通常会将<strong>全局变量errno</strong>设置为一个特定的错误码。perror函数读取errno的值，并根据这个值生成相应的错误描述。然后，将错误描述与传入的字符串参数拼接，并输出到标准错误流。</li></ul><h3 id="函数原型-4"><a href="#函数原型-4" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">//使用此函数需引入此头文件</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">perror</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-4"><a href="#函数参数-4" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>str</code>：一个指向常量字符的指针，用于提供上下文信息。<strong>在输出错误消息时，这个字符串将作为错误消息的前缀</strong>（也就是说，可以手动的去描述这个错误是怎么发生的）。</p><h2 id="lseek函数"><a href="#lseek函数" class="headerlink" title="lseek函数"></a>lseek函数</h2><p>lseek()函数将与文件描述符fd相关联的打开文件的偏移量重新定位到参数offset上，如下所示：</p><ol><li>SEEK_SET：The offset is set to offset bytes. offset为0时表示文件开始位置。</li><li>SEEK_CUR：The offset is set to its current location plus offset bytes. offset为0时表示当前位置。</li><li>SEEK_END：The offset is set to the size of the file plus offset bytes. offset为0时表示结尾位置。</li></ol><p>当前文件偏移量：</p><ul><li><strong>每当打开一个文件，都会有一个叫做“当前文件偏移量”的东西，如果难理解也可以将他理解为指针。</strong> 除非打开文件时指定O_APPEND选项，否则<strong>文件偏移量默认设置为0</strong>。当我们发生了一次读或者写操作时，都会使这个当前文件偏移量发生变化，读/写多少字节，当前偏移量就会向后移动多少。</li></ul><h3 id="函数原型-5"><a href="#函数原型-5" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fd, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-5"><a href="#函数参数-5" class="headerlink" title="函数参数"></a>函数参数</h3><ol><li>fd：文件描述符</li><li>offset：文件的偏移量</li><li>whence：位置</li></ol><h3 id="函数返回值-4"><a href="#函数返回值-4" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功返回当前位置到开始的长度。</li><li>失败返回-1并设置errno。</li></ul><h3 id="使用实例-2"><a href="#使用实例-2" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="实例1-1"><a href="#实例1-1" class="headerlink" title="实例1"></a>实例1</h4><p>移动文件读写位置。</p><p>用write()函数写入文件之后，这时候读写位置就指在写完后的那个位置，也就是字符串的后面，这样我们在使用read()函数去读的时候就相当于从写入字符串的后面去读的，所以啥也没读到。这时候，就可以使用lseek()函数来移动读写位置。<strong>新建一个文件并向其中写入数据，然后读取该文件的内容将其写入到屏幕上：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;not fount file name&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//新建一个文件并写入helloLinux,然后读取该文件的内容,将内容输出到屏幕上.</span></span><br><span class="line">    <span class="type">int</span> fd = open(args[<span class="number">1</span>], O_CREAT | O_RDWR);</span><br><span class="line">    write(fd, <span class="string">&quot;helloLinux&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="comment">//此时文件指针位置已经到末尾,需要重新将指针移到文件首部.</span></span><br><span class="line">    lseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    <span class="type">char</span> buff[<span class="number">15</span>];</span><br><span class="line">    <span class="type">int</span> ret = read(fd, buff, <span class="keyword">sizeof</span>(buff));</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        write(STDOUT_FILENO, buff, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@vm:/home/wzy/code# gcc lseek.c -o lseek</span><br><span class="line">root@vm:/home/wzy/code# ./lseek lseek.txt</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130160151063.png" alt="image-20231130160151063" style="zoom: 80%;"></p><h4 id="实例2-1"><a href="#实例2-1" class="headerlink" title="实例2"></a>实例2</h4><p>计算文件大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* args[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;./lseek2.txt&quot;</span>, O_RDONLY | O_CREAT);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> ret = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成功后第一次运行新建一个原本不存在的文件，所以字节数为0：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130161416525.png" alt="image-20231130161416525"></p><p>然后向lseek2.txt写点数据：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130161710271.png" alt="image-20231130161710271"></p><p>第二次运行后：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130161618160.png" alt="image-20231130161618160"></p><h2 id="getenv-函数"><a href="#getenv-函数" class="headerlink" title="getenv()函数"></a>getenv()函数</h2><p>获取指定的环境变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">char</span>* <span class="title function_">getenv</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name)</span>;</span><br></pre></td></tr></table></figure><p>读取环境变量HOME的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,getenv(<span class="string">&quot;HOME&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130162653378.png" alt="image-20231130162653378" style="zoom:80%;"></p><h2 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h2><p><strong>fork函数：</strong>：创建子进程。</p><p>fork函数是一个系统调用，其作用是创建一个新的进程。在调用fork函数时，操作系统会复制当前进程的所有信息，并将其分配给新的进程。新进程与原进程几乎完全相同，但有一些区别：在新进程中，fork返回值为0；在原进程中，fork返回值为新进程的PID（Process ID）。因此，在程序中可以根据返回值来判断当前代码运行在哪个进程中。</p><p><strong>父进程与子进程运行在不同的内存空间，子进程拥有独一无二的task_struct(PCB)，但是内存空间的内容是一样的，除了一些特殊的，比如说进程id不一样。</strong></p><p>子进程与父进程的区别：</p><p>由于子进程与父进程非常相似，但又有些微小的差别。下面我们列举一些常见的区别：</p><p>（1）PID不同：子进程和父进程有不同的PID，可以通过getpid()和getppid()函数获取。</p><p>（2）PPID不同：子进程和父进程有不同的PPID（即父亲PID），可以通过getppid()函数获取。</p><p>（3）资源占用情况不同：子进程会拷贝父亲所有资源情况（包括打开文件、信号处理等），但是有些资源是共享的，例如内存映射、消息队列等。</p><h3 id="函数返回值-5"><a href="#函数返回值-5" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>失败返回-1；<br>fork方法被调用一次，成功就会有两次返回：</p><ol><li>在父进程中返回一次，返回的是子进程的id（非0）。</li><li>在子进程中返回一次，返回值为0。</li></ol><h3 id="使用实例-3"><a href="#使用实例-3" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;begin:\n&quot;</span>);</span><br><span class="line">    <span class="comment">//返回值为子进程的id</span></span><br><span class="line">    <span class="type">pid_t</span> child_id = fork();</span><br><span class="line">    <span class="comment">//创建子进程失败</span></span><br><span class="line">    <span class="keyword">if</span> (child_id &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;create child process failed!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子进程</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(child_id == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child id:%d parent id:%d\n&quot;</span>,getpid(), getppid());</span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child id:%d self id:%d parent id:%d\n&quot;</span>,child_id, getpid(), getppid());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130170512751.png" alt="image-20231130170512751"></p><p>子进程中的parent id有些时候运行结果为1，为什么是1呢？</p><p>这个涉及到孤儿进程的知识，原因是父进程已经死了，孤儿进程就被init进程领养了，由init进程负责孤儿进程资源的回收。当然了你还可以通过以下命令查看<code>ps aux</code>孤儿进程被哪个进程领养了；或者通过<code>ps ajx</code>查看父子进程之间的信息。</p><h2 id="getpid函数"><a href="#getpid函数" class="headerlink" title="getpid函数"></a>getpid函数</h2><p>获取当前进程的id。</p><h2 id="getppid函数"><a href="#getppid函数" class="headerlink" title="getppid函数"></a>getppid函数</h2><p>获取当前进程的父进程的id。</p><h2 id="exec族函数"><a href="#exec族函数" class="headerlink" title="exec族函数"></a>exec族函数</h2><p>这些exec族函数的共同特点：</p><ol><li>只有当错误发生才有返回值，返回值为-1；</li><li>这些函数都是可变参数的函数，所以参数列表必须以空指针结束；</li></ol><h3 id="execl函数"><a href="#execl函数" class="headerlink" title="execl函数"></a>execl函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//path为环境变量，arg为待执行文件的参数从argv[0]开始</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execl</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *arg, ...</span></span><br><span class="line"><span class="params">                       <span class="comment">/* (char *) NULL */</span>)</span>;</span><br></pre></td></tr></table></figure><h3 id="execlp函数"><a href="#execlp函数" class="headerlink" title="execlp函数"></a>execlp函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//file为需要执行的程序名</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">execlp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">const</span> <span class="type">char</span> *arg, ...</span></span><br><span class="line"><span class="params">                       <span class="comment">/* (char *) NULL */</span>)</span>;</span><br></pre></td></tr></table></figure><h2 id="孤儿进程与僵尸进程"><a href="#孤儿进程与僵尸进程" class="headerlink" title="孤儿进程与僵尸进程"></a>孤儿进程与僵尸进程</h2><p>一个进程被创建出来是为了完成用户要求的任务，而进程完成任务的结果如何是由其父进程查看的，因此在进程退出时，不会立即释放该进程对应的资源，而是保存一段时间，让父进程或者操作系统来读取检查，读取后父进程或者操作系统才会回收该进程的所有资源。<strong>回收后该进程就是死亡状态（X—dead）</strong>了，而<strong>进程退出到还没被回收的期间的状态就是僵尸状态，也称僵尸状态(Z—zombie）</strong>。</p><h3 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h3><ol><li>僵死状态（Zombies）是一个比较特殊的状态。当进程退出并且父进程（使用wait()系统调用）没有读取到子进程退出的返回代码时就会产生僵死（尸）进程。</li><li>僵尸进程会以终止状态保持在进程表中，并且会一直在等待父进程读取退出状态代码。</li><li>所以，只要子进程退出，父进程还在运行，但父进程没有读取子进程状态，子进程进入Z状态。</li></ol><p>僵尸进程实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> child_id = fork();</span><br><span class="line">    <span class="comment">//子进程</span></span><br><span class="line">    <span class="keyword">if</span> (child_id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am child, child id:%d parent id:%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child process died!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(child_id &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;I am parent, parent id:%d\n&quot;</span>,getpid());</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130174140064.png" alt="image-20231130174140064" style="zoom:80%;"></p><h4 id="僵尸进程的危害"><a href="#僵尸进程的危害" class="headerlink" title="僵尸进程的危害"></a>僵尸进程的危害</h4><ul><li>维护退出状态本身就是要用数据维护，也属于进程基本信息，所以保存在<code>task_struct</code>(即PCB)中，换句话说，<code>Z</code><strong>状态一直不退出</strong>，<code>PCB</code><strong>一直都要维护</strong>。</li><li>僵尸进程是要求回收的，不回收会占用内存，造成内存泄露。</li></ul><h3 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h3><p>所谓孤儿进程，故名思义，和现实生活中的孤儿有点类似，当一个进程的父进程结束时，但是它自己还没有结束，那么这个进程将会成为孤儿进程。</p><p>当子进程的父进程挂掉之后，子进程会被<code>1</code>号进程领养。该进程也被称为孤儿进程。</p><p>那么为什么要进行领养呢：</p><ul><li>原因是孤儿进程会被init进程（1号进程）领养，当然在子进程结束时也会由init进程完成对它的状态收集工作，因此一般来说，孤儿进程并不会有什么危害。</li></ul><p>孤儿进程实例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> child_id = fork();</span><br><span class="line">    <span class="comment">//孤儿进程</span></span><br><span class="line">    <span class="keyword">if</span> (child_id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;子进程id:%d 父进程id:%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(child_id &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;父进程id:%d 父进程的父进程id:%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I will died\n&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SIGCHLD信号"><a href="#SIGCHLD信号" class="headerlink" title="SIGCHLD信号"></a>SIGCHLD信号</h2><p>子进程暂停或退出时会主动向父进程发送SIGCHLD（17号）信号。而父进程对17号信号的默认处理动作是忽略。</p><ul><li>为了避免出现僵尸进程，父进程需要使用wait或waitpid函数等待子进程结束，父进程可以阻塞等待子进程结束，也可以非阻塞地查询的是否有子进程结束等待清理，即轮询的方式。采用第一种方式，父进程阻塞就不能处理自己的工作了；采用第二种方式，父进程在处理自己的工作的同时还要记得时不时地轮询一下，程序实现复杂。</li><li>子进程在终止时会给父进程发生SIGCHLD信号，该信号的默认处理动作是忽略。父进程可以自定义SIGCHLD信号的处理动作，这样父进程就只需专心处理自己的工作，不必关心子进程了。子进程终止时会通知父进程，父进程在信号处理函数中调用wait或waitpid函数清理子进程即可。</li></ul><h2 id="wait函数"><a href="#wait函数" class="headerlink" title="wait函数"></a>wait函数</h2><p>等待子进程状态的改变。</p><p>它是一个<strong>用于等待子进程结束的函数</strong>。该函数将暂停当前进程的执行，直到一个子进程结束或收到一个信号为止。当一个子进程结束时，wait函数会返回该子进程的PID（进程ID），并在status参数中返回子进程的退出状态信息。</p><p>调用wait函数的进程会被挂起（阻塞），直到它的一个子进程退出或者收到一个不能被忽略的信号时才被唤醒（相当于继续往下执行）。</p><p>如果没有子进程了，函数立刻返回，返回-1；如果子进程都已经结束了，也会立即返回，返回-1。</p><h3 id="函数原型-6"><a href="#函数原型-6" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要引入的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> *status)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-6"><a href="#函数参数-6" class="headerlink" title="函数参数"></a>函数参数</h3><p>进程退出时的状态信息，传入的是一个int类型的地址，传出参数。</p><h3 id="函数返回值-6"><a href="#函数返回值-6" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功：返回被回收的子进程的id。</li><li>失败：-1（所有的子进程都结束，调用函数失败）。</li></ul><h3 id="退出信息相关宏函数"><a href="#退出信息相关宏函数" class="headerlink" title="退出信息相关宏函数"></a>退出信息相关宏函数</h3><ul><li><code>WIFEXITED(status)</code>：非0，进程正常退出。</li><li><code>WEXITSTATUS(status)</code>：如果<code>WIFEXITED(status)</code>为真，获取进程退出的状态（exit的参数）。</li><li><code>WIFSIGNALED(status)</code>：非0，进程异常终止。</li><li><code>WTERMSIG(status)</code>：如果<code>WIFSIGNALED(status)</code>为真，获取使进程终止的信号编号。</li><li><code>WIFSTOPPED(status)</code>：非0，进程处于暂停状态。</li><li><code>WSTOPSIG(status)</code>：如果<code>WIFSTOPPED(status)</code>为真，获取使进程暂停的信号的编号。</li><li><code>WIFCONTINUED(status)</code>非0，进程暂停后已经继续运行。</li></ul><h3 id="使用实例-4"><a href="#使用实例-4" class="headerlink" title="使用实例"></a>使用实例</h3><p>通过这个函数我们可以避免僵尸进程的出现，等待子进程状态的改变，让系统回收子进程的资源。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> id = fork();</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child process, child id:%d parent id:%d\n&quot;</span>,getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (id &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent process, child id:%d\n&quot;</span>, id);</span><br><span class="line">        <span class="comment">//status保留已死子进程的信息</span></span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line">        <span class="type">pid_t</span> child_id = wait(&amp;status);</span><br><span class="line">        <span class="comment">//如果子进程正常退出</span></span><br><span class="line">        <span class="keyword">if</span> (WIFEXITED(status))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child process are exited with %d\n&quot;</span>,WEXITSTATUS(status));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果子进程被信号杀死</span></span><br><span class="line">        <span class="keyword">if</span> (WIFSIGNALED(status))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child process are killed by %d\n&quot;</span>,WTERMSIG(status));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child_id:%d\n&quot;</span>,child_id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130212243327.png" alt="image-20231130212243327"></p><h2 id="waitpid函数"><a href="#waitpid函数" class="headerlink" title="waitpid函数"></a>waitpid函数</h2><p>waitpid()函数是一个用于等待子进程终止的系统调用。与wait()函数不同，waitpid()函数可以指定等待的进程ID，并且提供了更多的选项。</p><p>waitpid函数就是wait函数的增强版。</p><p>waitpid函数的使用方式waitpid(-1, NULL, 0)等价wait函数的使用wait(NULL)，两者这样使用使一样的。</p><h3 id="函数原型-7"><a href="#函数原型-7" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要引入的头文件，与wait函数相同</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">waitpid</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> *status, <span class="type">int</span> options)</span>;</span><br></pre></td></tr></table></figure><p>其中，pid参数指定了要等待的子进程的进程ID，status参数是用于获取子进程的终止状态的指针，options参数指定了waitpid()函数的行为。</p><h3 id="函数参数-7"><a href="#函数参数-7" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="pid参数"><a href="#pid参数" class="headerlink" title="pid参数"></a>pid参数</h4><ul><li><code>pid &gt; 0</code>：等待进程ID为pid的子进程结束。</li><li><code>pid == 0</code>：等待与当前进程在同一个进程组中的所有子进程结束。</li><li><code>pid == -1</code>：等待任何一个子进程结束，与wait()函数相同。</li><li><code>pid &lt; -1</code>：等待进程组ID为pid的所有子进程结束。</li></ul><h4 id="status参数"><a href="#status参数" class="headerlink" title="status参数"></a>status参数</h4><p>是一个指向整型变量的指针，用于获取子进程的退出状态，这一点与wait函数相同。当waitpid()函数返回时，如果status不为NULL，则子进程的退出状态会被存储在status指向的变量中。如果status为空，则子进程的退出状态会被忽略。</p><h4 id="options参数"><a href="#options参数" class="headerlink" title="options参数"></a>options参数</h4><p>是一个控制waitpid()函数行为的标志位，它可以取以下值：</p><ul><li><code>WNOHANG</code>：如果没有子进程结束，则立即返回0，不阻塞。</li><li><code>WUNTRACED</code>：如果子进程进入暂停状态，也立即返回。</li><li><code>WCONTINUED</code>：如果子进程恢复执行，则立即返回。</li><li><code>WSTOPPED</code>：等待任何一个子进程进入暂停状态。</li><li><code>WEXITED</code>：等待任何一个子进程结束。</li><li><code>WNOWAIT</code>：不删除已经结束子进程的进程表项，用于后续处理。</li></ul><h3 id="函数返回值-7"><a href="#函数返回值-7" class="headerlink" title="函数返回值"></a>函数返回值</h3><ol><li>返回结束子进程的进程ID。</li><li>如果<code>WNOHANG</code>标志被设置并且没有子进程结束，则返回0。</li><li>如果调用进程没有子进程，则返回-1，并设置errno为ECHILD。</li><li>如果调用被一个信号中断，则返回-1，并设置errno为EINTR。</li></ol><h3 id="使用实例-5"><a href="#使用实例-5" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="实例1-2"><a href="#实例1-2" class="headerlink" title="实例1"></a>实例1</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> id = fork();</span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">&quot;child process:child id:%d parent id:%d\n&quot;</span>,getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (id &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent process:parent id:%d\n&quot;</span>,getpid());</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        <span class="keyword">while</span> ((ret = waitpid(<span class="number">0</span>, <span class="literal">NULL</span>, WNOHANG)) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret:%d\n&quot;</span>, ret);</span><br><span class="line">        <span class="comment">//此时子进程已经死去被回收那么再次调用waitpid时返回值就一定是-1了</span></span><br><span class="line">        ret = waitpid(<span class="number">0</span>, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret:%d\n&quot;</span>, ret);</span><br><span class="line">        <span class="comment">//不让父进程死去</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130221629949.png" alt="image-20231130221629949"></p><h4 id="实例2-2"><a href="#实例2-2" class="headerlink" title="实例2"></a>实例2</h4><p>使用waitpid回收多个子进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> id;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//创建多个子进程</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        id = fork();</span><br><span class="line">        <span class="comment">//子进程退出for循环,让其不具备再生能力</span></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;I am child process:child id:%d parent id:%d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ret_id = waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">            <span class="keyword">if</span> (ret_id == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ret_id &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;ret_id:%d\n&quot;</span>, ret_id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不让父进程死去</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子进程</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">5</span>)</span><br><span class="line">        sleep(i);<span class="comment">//为了让创建的子进程顺序死亡</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130223225282.png" alt="image-20231130223225282"></p><h2 id="pipe函数-无名管道"><a href="#pipe函数-无名管道" class="headerlink" title="pipe函数(无名管道)"></a>pipe函数(无名管道)</h2><h3 id="管道的概念"><a href="#管道的概念" class="headerlink" title="管道的概念"></a>管道的概念</h3><p>管道是一种最基本的IPC机制，作用于有血缘关系的进程之间，完成数据传递。调用pipe系统函数即可创建一个管道。</p><p><strong>什么是有血缘关系的进程：</strong> 就是父子进程、兄弟进程等。</p><p><strong>管道的原理：</strong>管道实为内核使用<code>环形队列</code>机制，借助内核缓冲区（4k）实现。</p><p><strong>512B是磁盘的最小单位，即半k。</strong></p><h3 id="管道特质"><a href="#管道特质" class="headerlink" title="管道特质"></a>管道特质</h3><p>  1. 其本质是一个伪文件（实为内核缓冲区）。<br>  2. 由两个文件描述符引用，一个表示读端，一个表示写端。<br>  3. 规定数据从管道的写端流入管道，从读端流出。</p><h3 id="管道的局限性"><a href="#管道的局限性" class="headerlink" title="管道的局限性"></a>管道的局限性</h3><ol><li>数据自己读不能自己写。</li><li>数据一旦被读走，便不在管道中存在，不可反复读取。</li><li>由于管道采用半双工通信方式。因此，数据只能在一个方向上流动。</li><li>只能在有公共祖先的进程间使用管道。</li></ol><p>在Linux中，pipe() 是一个底层系统调用，用于<code>创建管道</code>（pipe）。管道是用于进程间通信的一种简单机制，通过pipe()函数可以创建一个匿名的、单向的管道，可以在不同的进程之间传递数据。</p><h3 id="函数原型-8"><a href="#函数原型-8" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> <span class="comment">//使用函数需导入此头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pipefd[<span class="number">2</span>])</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-8"><a href="#函数参数-8" class="headerlink" title="函数参数"></a>函数参数</h3><p>pipefd是一个两个元素的整型数组，它是一个传出参数，用于<code>存放</code>管道的读写<code>文件描述符</code>。</p><ul><li>其中<code>pipefd[0]为管道读端</code>，<code>pipefd[1]为管道写端</code>。这两个文件描述符可以像其他文件描述符一样进行读写操作。</li><li>管道默认是阻塞的：如果管道中没有数据，read阻塞；如果管道满了，write阻塞。</li><li><code>注意</code>：（匿名）管道只能用于具有关系的进程之间的通信（父子进程，兄弟进程）。</li></ul><h3 id="函数返回值-8"><a href="#函数返回值-8" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功：返回0。</li><li>失败：返回-1，会设置errno，通过perror函数来打印错误信息。</li></ul><p>管道创建成功以后，创建该管道的进程（父进程）同时掌握着管道的读端和写端。</p><ol><li>父进程调用pipe函数创建管道，得到两个文件描述符fd[0]、fd[1]指向管道的读端和写端。<br>  2. 父进程调用fork创建子进程，那么子进程也有两个文件描述符指向同一管道。<ol><li>父进程关闭管道写端，子进程关闭管道读端。子进程可以向管道中写入数据，父进程将管道中的数据读出。由于管道是利用环形队列实现的，数据从写端流入管道，从读端流出，这样就实现了进程间通信。</li></ol></li></ol><h3 id="使用实例-6"><a href="#使用实例-6" class="headerlink" title="使用实例"></a>使用实例</h3><p>使用pipe()函数创建一个管道，并在子进程和父进程之间传递数据：</p><h4 id="子进程向父进程传达消息"><a href="#子进程向父进程传达消息" class="headerlink" title="子进程向父进程传达消息"></a>子进程向父进程传达消息</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> pipefd[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> retpipe = pipe(pipefd);</span><br><span class="line">    <span class="keyword">if</span> (retpipe == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        close(pipefd[<span class="number">1</span>]);<span class="comment">//关闭父进程写端</span></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">ssize_t</span> len = read(pipefd[<span class="number">0</span>], buf, <span class="keyword">sizeof</span>(buf));<span class="comment">//读取子进程写入的信息</span></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;read&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buf[len] = <span class="string">&#x27;\0&#x27;</span>;<span class="comment">//确保字符串以null结尾</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我是父进程,我的进程号是:%d,正在接收来自子进程的信息...\n&quot;</span>, getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        close(pipefd[<span class="number">0</span>]);<span class="comment">//关闭子进程读端</span></span><br><span class="line">        <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">        <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%s%d&quot;</span>, <span class="string">&quot;我是子进程,我的进程号是:&quot;</span>, getpid());</span><br><span class="line">        <span class="type">ssize_t</span> len = write(pipefd[<span class="number">1</span>], buf, <span class="built_in">strlen</span>(buf));<span class="comment">//子进程写入信息</span></span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130231415551.png" alt="image-20231130231415551"></p><h5 id="使用ulimit-–a-命令可以查看管道缓冲大小命令："><a href="#使用ulimit-–a-命令可以查看管道缓冲大小命令：" class="headerlink" title="使用ulimit –a 命令可以查看管道缓冲大小命令："></a>使用ulimit –a 命令可以查看管道缓冲大小命令：</h5><ul><li><code>ulimit</code>是一个用于控制shell进程资源限制的命令，在 Linux 系统中经常用于限制某个用户或进程的资源使用。<code>-a</code>是ulimit命令的一个选项，表示显示所有当前限制值的详细信息。当在终端中输入<code>ulimit -a</code>命令后，将会列出所有的资源限制信息：</li></ul><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231130232006176.png" alt="image-20231130232006176"></p><p><code>pipe size (512 bytes, -p) 8</code>这一行表示<strong>管道（pipe）的大小限制</strong>。管道是一种进程间通信（IPC）机制，允许一个进程的输出成为另一个进程的输入。这里的数字“8”表示的是<strong>管道缓冲区大小限制的倍数</strong>。由于括号内提到了每单位的大小为<code>512</code>字节，所以这里的管道大小限制为<code>8 * 512 = 4096</code>字节。</p><p>这意味着在使用管道进行进程间通信时，缓冲区最多可以容纳4096字节的数据。当管道的缓冲区被填满时，写入管道的进程将被阻塞，直到另一个进程从管道中读取数据为止。</p><h2 id="mkfifo函数-有名管道"><a href="#mkfifo函数-有名管道" class="headerlink" title="mkfifo函数(有名管道)"></a>mkfifo函数(有名管道)</h2><p>有名管道用于非亲缘关系进程之间的通讯。创建有名管道使用到的库函数是：mkfifo()，这里强调是库函数的原因是，mkfifo同时也是一个用户指令。</p><ol><li>mkfifo函数：创建一个FIFO有名管道文件。</li><li>FIFO：称为有名管道，实现无血缘关系管道通信。</li><li>创建管道伪文件命令：<code>mkfifo 文件名。</code></li><li>示例：先使用<code>mkfifo 文件名</code>创建一个FIFO有名管道文件，然后多个进程读写。</li></ol><h3 id="函数原型-9"><a href="#函数原型-9" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">mkfifo</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-9"><a href="#函数参数-9" class="headerlink" title="函数参数"></a>函数参数</h3><p>mkfifo()生成一个名字叫“pathname”的先入先出的特殊文件。mode指定这个文件的权限，一般情况下，它通过进程的掩码被修改：这个创建的文件的权限是（mode &amp; ~umask）。</p><h3 id="函数返回值-9"><a href="#函数返回值-9" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功：返回0。</li><li>失败：返回-1，表示创建过程中遇到某种错误，此时会设置errno，用户可以检测errno来取得进一步信息。</li></ul><h3 id="使用实例-7"><a href="#使用实例-7" class="headerlink" title="使用实例"></a>使用实例</h3><p>编写程序FIFOpipe.c，在该程序内，创建有名管道“FIFO”，然后利用open()打开，open()函数返回一个文件描述符fd，使用read()函数从这个文件描述符fd中读取数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    ret = mkfifo(<span class="string">&quot;FIFO&quot;</span>, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == ret)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mkfifo&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Waitting for the data from FIFOpipe:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fd = open(<span class="string">&quot;FIFO&quot;</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="string">&#x27;\0&#x27;</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        read(fd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;FIFOpipe is %s:\n&quot;</span>, buf);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231201002931890.png" alt="image-20231201002931890"></p><p> 打印提示信息后，阻塞式读取有名管道中的数据。</p><p>在FIFO管道中写入信息“HelloLinux”后运行：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231201003151223.png" alt="image-20231201003151223"></p><h2 id="mmap函数"><a href="#mmap函数" class="headerlink" title="mmap函数"></a>mmap函数</h2><p><code>mmap</code>是一种内存映射文件的方法，即将<strong>一个文件或者其它对象映射到进程的地址空间</strong>，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用read，write等系统调用函数。相反，内核空间对这段区域的修改也直接反映用户空间，从而可以实现不同进程间的文件共享。</p><p><code>munmap</code>执行相反的操作，删除特定地址区域的对象映射。</p><p>采用<strong>共享内存通信</strong>的一个显而易见的好处是效率高，因为进程可以直接读写内存，而不需要任何数据的拷贝。对于像管道和消息队列等通信方式，则需要在内核和用户空间进行四次的数据拷贝，而共享内存则只拷贝两次数据：<strong>一次从输入文件到共享内存区</strong>，<strong>另一次从共享内存区到输出文件</strong>。实际上，进程之间在共享内存时，并不总是读写少量数据后就解除映射，有新的通信时，再重新建立共享内存区域。而是保持共享区域，直到通信完毕为止，这样，数据内容一直保存在共享内存中，并没有写回文件。共享内存中的内容往往是在解除映射时才写回文件的。因此，采用共享内存的通信方式效率是非常高的。</p><h3 id="函数原型-10"><a href="#函数原型-10" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *start, <span class="type">size_t</span> length, <span class="type">int</span> prot, <span class="type">int</span> flags, <span class="type">int</span> fd, <span class="type">off_t</span> offset)</span>;</span><br></pre></td></tr></table></figure><p>该函数主要用途有三个：</p><ul><li>将一个普通文件映射到内存中，通常在需要对文件进行频繁读写时使用，这样用内存读写取代I/O读写，以获得较高的性能。</li><li>将特殊文件进行匿名内存映射，可以为关联进程提供共享内存空间。</li><li>为无关联的进程提供共享内存空间，一般也是将一个普通文件映射到内存中。</li></ul><h3 id="函数参数-10"><a href="#函数参数-10" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>start</code>：指向欲映射的内存起始地址，通常设为NULL，代表让系统自动选定地址，映射成功后返回该地址。</p><p><code>length</code>：代表将文件中多大的部分映射到内存。</p><p><code>prot</code>：映射区域的保护方式。不能与文件的打开模式冲突。是以下的某个值，可以通过<code>or</code>运算合理地组合在一起：</p><ul><li><code>PROT_READ</code>：页可以被读取。</li><li><code>PROT_WRITE</code>：页可以被写入。</li><li><code>PROT_NONE</code>：页不可访问。</li><li><code>PROT_EXEC</code>：页可以被执行。</li></ul><p><code>flags</code>：影响映射区域的各种特性，指定映射对象的类型，映射选项和映射页是否可以共享。在调用mmap()时必须要指定<code>MAP_SHARED</code>或<code>MAP_PRIVATE</code>。</p><ul><li><code>MAP_SHARED</code>：与其它所有映射这个对象的进程共享映射空间。对共享区的写入，相当于输出到文件。直到<code>msync()</code>或者<code>munmap()</code>被调用，文件实际上不会被更新。</li><li><code>MAP_PRIVATE</code>：对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。这个标志和以上标志是互斥的，只能使用其中一个。</li><li><code>MAP_ANONYMOUS</code>：建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。</li><li><code>MAP_DENYWRITE</code>：只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。</li><li><code>MAP_LOCKED</code>：将映射区域锁定住，这表示该区域不会被置换（swap）。</li></ul><p><code>fd</code>：要映射到内存中的文件描述符。如果使用匿名内存映射时，即MAP_ANONYMOUS被设定，为了兼容问题，其值为-1。</p><p><code>offset</code>：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是分页大小的整数倍。</p><h3 id="函数返回值-10"><a href="#函数返回值-10" class="headerlink" title="函数返回值"></a>函数返回值</h3><ol><li>成功时返回映射区的首地址。</li><li>失败返回MAP_FAILED。</li></ol><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">munmap</span><span class="params">(<span class="type">void</span>* addr, <span class="type">size_t</span> length)</span>;</span><br></pre></td></tr></table></figure><ul><li>成功执行时，munmap()返回0。</li><li>失败时，munmap返回-1，error返回标志和mmap一致；</li></ul><p>该调用在进程地址空间中解除一个映射关系，addr是调用mmap()时返回的地址，len是映射区的大小。当映射关系解除后，对原来映射地址的访问将导致段错误发生。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">msync</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> length, <span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure><p>一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以通过调用msync()实现磁盘上文件内容与共享内存区的内容一致。</p><h3 id="使用实例-8"><a href="#使用实例-8" class="headerlink" title="使用实例"></a>使用实例</h3><h4 id="实例1-3"><a href="#实例1-3" class="headerlink" title="实例1"></a>实例1</h4><p>将一个普通文件映射到内存中，通常在需要对文件进行频繁读写时使用，这样用内存读写取代I/O读写，以获得较高的性能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;mmap.txt&quot;</span>, O_RDWR | O_CREAT);</span><br><span class="line">    <span class="comment">//将文件映射到内存</span></span><br><span class="line">    <span class="type">char</span>* mapArea = mmap(<span class="literal">NULL</span>, <span class="number">8</span>, PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mapArea == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span> (mapArea, <span class="string">&quot;HelloLinux&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, mapArea);</span><br><span class="line">    <span class="type">int</span> ret = munmap(mapArea, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;munmap error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231201135241538.png" alt="image-20231201135241538"></p><h4 id="实例2-3"><a href="#实例2-3" class="headerlink" title="实例2"></a>实例2</h4><p>mmap函数创建对已知的文件的映射区，实现父子进程间的通信：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建一个对已知的文件的映射</span></span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;mmap.txt&quot;</span>, O_RDWR);</span><br><span class="line">    <span class="type">int</span>* mapArea = mmap(<span class="literal">NULL</span>, <span class="number">4</span>, PROT_WRITE | PROT_READ, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (mapArea == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建子进程</span></span><br><span class="line">    <span class="type">pid_t</span> id = fork();</span><br><span class="line">    <span class="comment">//子进程</span></span><br><span class="line">    <span class="keyword">if</span> (id == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *mapArea = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child mapArea:%d\n&quot;</span>, *mapArea);</span><br><span class="line">        sleep(<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child mapArea:%d\n&quot;</span>, *mapArea);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//父进程</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(id &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *mapArea = <span class="number">88</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent mapArea:%d\n&quot;</span>, *mapArea);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;parent mapArea:%d\n&quot;</span>, *mapArea);</span><br><span class="line">        *mapArea = <span class="number">1001</span>;</span><br><span class="line">        <span class="comment">//回收子进程</span></span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231201135056270.png" alt="image-20231201135056270"></p><h4 id="实例3-1"><a href="#实例3-1" class="headerlink" title="实例3"></a>实例3</h4><p>mmap函数实现无血缘关系的进程之间的通信：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//写进程</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;_student;</span><br><span class="line"><span class="comment">//mmap实现不同进程之间的通信</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage:%s fileName\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd = open(argv[<span class="number">1</span>], O_RDWR | O_TRUNC, <span class="number">0664</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(_student);</span><br><span class="line">    <span class="comment">//将文件的大小截断为指定大小,不管之前文件的大小比len大还是小</span></span><br><span class="line">    ftruncate(fd, len);</span><br><span class="line">    _student *stu = mmap(<span class="literal">NULL</span>, len, PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (stu == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        stu-&gt;id = num;</span><br><span class="line">        <span class="built_in">sprintf</span>(stu-&gt;name, <span class="string">&quot;zyzy-%04d\n&quot;</span>, num ++);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    munmap(stu, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//读进程</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;_student;</span><br><span class="line"><span class="comment">//mmap实现不同进程之间的通信</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;usage:%s fileName\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd = open(argv[<span class="number">1</span>], O_RDWR);</span><br><span class="line">    <span class="type">int</span> len = <span class="keyword">sizeof</span>(_student);</span><br><span class="line">    _student *stu = mmap(<span class="literal">NULL</span>, len, PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (stu == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;mmap error!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;name:%s id:%d\n&quot;</span>, stu-&gt;name, stu-&gt;id);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    munmap(stu, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="kill函数"><a href="#kill函数" class="headerlink" title="kill函数"></a>kill函数</h2><p>kill() 系统调用允许一个进程向另一个进程发送信号。这对于进程间通信、进程控制以及进程管理等任务非常有用。</p><h3 id="函数原型-11"><a href="#函数原型-11" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用kill函数需导入这些头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">kill</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-11"><a href="#函数参数-11" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>pid_t pid</code>：目标进程或进程组的 ID。<code>pid_t</code>是一个表示进程ID的数据类型。<code>pid</code>参数可以是以下几种值：</p><ul><li><code>pid &gt; 0</code>：信号发送给具有该 PID 的单个进程。</li><li><code>pid = 0</code>：信号发送给与调用进程属于同一进程组内的所有进程。也就是调用kill函数的这个进程组的进程都会接受到这个信号。</li><li><code>pid = -1</code>：发送信号给除了调用进程和 init 进程（PID 为 1）以外的所有进程。通常情况下，这需要调用进程拥有特定权限，例如root用户权限。</li><li><code>pid &lt; -1</code>：信号发送给进程组ID等于pid绝对值的所有进程。简单理解就是，如果pid是-N（N &gt; 1），则信号将发送给进程组ID为N的所有进程。</li></ul><p><code>int sig</code>：要发送的信号。Linux 支持多种信号，sig参数可以是整数信号代码，也可以是预定义的信号常量。以下是一些常用的信号及其说明：</p><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">名称</th><th style="text-align:left">解释</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">SIGHUP</td><td style="text-align:left">挂起信号，启动被终止的程序，也可以让进程重新读取自己的配置文件，类似重新启动。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">SIGINT</td><td style="text-align:left">中断信号，用户通过键盘发送的中断，相当于输入<code>Ctrl + c</code>来中断一个程序。</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">SIGKILL</td><td style="text-align:left">杀死信号，强制结束进程，进程无法捕获或忽略此信号，不会进行资源的清理工作。如果该程序进行到一半，可能会有半成品产生，类似vim的.filename.swp保留下来。</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">SIGTERM</td><td style="text-align:left">终止信号，以正常（优雅）的方式来终止进程，由程序自身决定该如何终止。进程可以捕获并执行清理工作。</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">SIGSTOP</td><td style="text-align:left">相当于输入<code>Ctrl + z</code>来暂停一个程序。</td></tr></tbody></table></div><h3 id="函数返回值-11"><a href="#函数返回值-11" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功，<code>kill</code>返回0。</li><li>失败，返回-1，并设置<code>errno</code>来表示错误。</li></ul><h3 id="使用实例-9"><a href="#使用实例-9" class="headerlink" title="使用实例"></a>使用实例</h3><p>发送<code>SIGINT</code>信号结束子进程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;我是子进程.\n&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pid &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我是父进程.\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;kill child process now\n&quot;</span>);</span><br><span class="line">        kill(pid, SIGINT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;fork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231201153452068.png" alt="image-20231201153452068"></p><h2 id="raise函数"><a href="#raise函数" class="headerlink" title="raise函数"></a>raise函数</h2><p>当前进程发送指定信号（自己给自己发信号），<code>raise(sig)</code>相当于<code>kill(getpid(), sig)</code>。</p><h3 id="函数原型-12"><a href="#函数原型-12" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">raise</span><span class="params">(<span class="type">int</span> sig)</span></span><br></pre></td></tr></table></figure><h3 id="函数返回值-12"><a href="#函数返回值-12" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>成功的时候，返回0 ，否则返回非零的值，并置errno。</p><p>如果sig的值是无效的，raise函数就将errno置为EINVAL。</p><h3 id="使用实例-10"><a href="#使用实例-10" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloLinux!\n&quot;</span>);</span><br><span class="line">    <span class="comment">//raise函数给自己发送信号</span></span><br><span class="line">    raise(SIGKILL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不输出，main线程已死</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;HelloLinux!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="alarm函数"><a href="#alarm函数" class="headerlink" title="alarm函数"></a>alarm函数</h2><p>alarm()是一个Linux系统调用，用于设置一个实时闹钟，当指定的时间（以秒为单位）到达时，系统会发送一个<code>SIGALRM</code>信号给进程。</p><ul><li>这个信号通常用于限制某个程序或者操作的执行时间。当闹钟时间到达时，若没有设置信号处理程序，进程将被终止。</li><li>如果设置了信号处理程序，那么在信号处理程序执行完毕后，进程会继续执行。</li></ul><p>alarm()函数只能设置一个闹钟。如果在一个闹钟到期之前再次调用alarm()，则之前的闹钟将被新的闹钟替代。</p><h3 id="函数原型-13"><a href="#函数原型-13" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span> <span class="comment">//使用此函数，需导入此头文件</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">alarm</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seconds)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-12"><a href="#函数参数-12" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>seconds</code>：闹钟的延迟时间，以秒为单位。如果参数为0，则取消之前设置的闹钟（闹钟无效，不进行倒计时，不发信号）。</p><h3 id="函数返回值-13"><a href="#函数返回值-13" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>如果之前没有设置闹钟，返回0。</li><li>如果之前设置了闹钟，返回距离上一个闹钟剩余的时间（秒数）。</li></ul><h3 id="使用实例-11"><a href="#使用实例-11" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am happy\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = alarm(<span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret); <span class="comment">//0</span></span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    ret = alarm(<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);<span class="comment">//6</span></span><br><span class="line">    <span class="comment">//四秒后终止程序</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hhhh\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231201164627586.png" alt="image-20231201164627586"></p><h2 id="setitimer函数"><a href="#setitimer函数" class="headerlink" title="setitimer函数"></a>setitimer函数</h2><p>setitimer()是一个Linux系统调用，用于设置一个间隔性定时器。与alarm()函数相比，setitimer()提供了更高级的功能，支持设置多个定时器以及定时器的更精确控制。当定时器到期时，系统会发送一个信号给进程，通常用于限制程序或操作的执行时间、定期执行任务等。</p><p>当时钟到期，一个作用于调用进程的信号产生，具体产生什么信号，由which参数决定。</p><h3 id="函数原型-14"><a href="#函数原型-14" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span> <span class="comment">// 使用此函数需导入此头文件</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">setitimer</span><span class="params">(<span class="type">int</span> which, <span class="type">const</span> <span class="keyword">struct</span> itimerval *new_value, <span class="keyword">struct</span> itimerval *old_value)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-13"><a href="#函数参数-13" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>which</code>：指定设置哪种类型的定时器。有以下三种类型：</p><ul><li><code>ITIMER_REAL</code>：以实时时间递减，当时钟到期后，发送<code>SIGALRM</code>信号。</li><li><code>ITIMER_VIRTUAL</code>：只有在进程执行时才递减，时钟到期后，发送<code>SIGVTALRM</code>信号。</li><li><code>ITIMER_PROF</code>：在进程执行和系统执行内核代码时递减，时钟到期后，发送<code>SIGPROF</code>信号。</li></ul><p><code>itimerval</code>结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_interval</span>;</span> <span class="comment">//间隔时间</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">it_value</span>;</span>    <span class="comment">//初始时间</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>new_value</code>：指向一个<code>itimerval</code>结构体，用于设置定时器的初始值和间隔。</li><li><code>old_value</code>：指向一个<code>itimerval</code>结构体，如果不为<code>NULL</code>，用于保存先前设置的定时器值。</li></ul><p><code>timeval</code>结构体定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> &#123;</span></span><br><span class="line">  <span class="type">long</span> tv_sec;  <span class="comment">//秒数</span></span><br><span class="line">  <span class="type">long</span> tv_usec; <span class="comment">//微秒数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="函数返回值-14"><a href="#函数返回值-14" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功时返回0；</li><li>出错时返回-1，并设置相应的errno。</li></ul><h3 id="与alarm-的区别"><a href="#与alarm-的区别" class="headerlink" title="与alarm()的区别"></a>与alarm()的区别</h3><ul><li><code>setitimer()</code>支持多个定时器（<code>ITIMER_REAL</code>、<code>ITIMER_VIRTUAL</code>和<code>ITIMER_PROF</code>），而<code>alarm()</code>只支持一个定时器。</li><li><code>setitimer()</code>可以设置定时器的间隔时间，使定时器在到期后自动重置，而<code>alarm()</code>只能在指定的时间后触发一次。</li><li><code>setitimer()</code>支持微秒级的时间精度，而<code>alarm()</code>只支持秒级的精度。</li></ul><h2 id="信号集相关函数"><a href="#信号集相关函数" class="headerlink" title="信号集相关函数"></a>信号集相关函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigemptyset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigfillset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigaddset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigdelset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigismember</span><span class="params">(<span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigprocmask</span><span class="params">(<span class="type">int</span> how, <span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">sigset_t</span> *oldset)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigpending</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下信号集相关的函数都是对自定义的信号集进行操作:</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigemptyset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="comment">/*功能: 清空信号集中的数据, 将信号集中的所有的标志位置为0.</span></span><br><span class="line"><span class="comment">  参数: </span></span><br><span class="line"><span class="comment">    set: 传出参数, 需要操作的信号集.指向sigset_t类型的指针，sigset_t是一个信号集类型，表示一个信号集.</span></span><br><span class="line"><span class="comment">  返回: 成功时返回0; 失败时返回-1, 并设置errno表示错误原因.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigfillset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="comment">/*功能: 将信号集中的所有的标志位置为1.</span></span><br><span class="line"><span class="comment">  参数: </span></span><br><span class="line"><span class="comment">    set: 同上.</span></span><br><span class="line"><span class="comment">  返回: 同上.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigaddset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="comment">/*功能: 该函数允许您将一个指定的信号添加到一个自定义信号集中，也就是将该信号的标准位设为1，表示阻塞这个信号.</span></span><br><span class="line"><span class="comment">  参数:</span></span><br><span class="line"><span class="comment">    set: 同上.</span></span><br><span class="line"><span class="comment">    signum: 需要设置阻塞的那个信号(需要添加到信号集中的信号编号).</span></span><br><span class="line"><span class="comment">  返回: 同上.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigdelset</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="comment">/*功能: 从一个自定义信号集中删除一个指定的信号，也就是将该信号的标准位设为0，不阻塞这个信号.</span></span><br><span class="line"><span class="comment">  参数:</span></span><br><span class="line"><span class="comment">    set: 同上.</span></span><br><span class="line"><span class="comment">    signum: 需要设置不阻塞的那个信号(需要从信号集中删除的信号编号).</span></span><br><span class="line"><span class="comment">  返回: 同上.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigismember</span><span class="params">(<span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">int</span> signum)</span>;</span><br><span class="line"><span class="comment">/*功能: 检查一个指定的信号是否在给定的信号集中,也就是检查该信号是否被阻塞.</span></span><br><span class="line"><span class="comment">  参数:</span></span><br><span class="line"><span class="comment">    set: 同上.</span></span><br><span class="line"><span class="comment">    signum: 要检查的信号编号.</span></span><br><span class="line"><span class="comment">  返回:</span></span><br><span class="line"><span class="comment">    1: 指定的信号在信号集中,signum被阻塞.</span></span><br><span class="line"><span class="comment">    0: 指定的信号不在信号集中,signum不阻塞</span></span><br><span class="line"><span class="comment">    -1: 调用失败,并设置errno表示错误原因.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigpending</span><span class="params">(<span class="type">sigset_t</span> *<span class="built_in">set</span>)</span>;</span><br><span class="line"><span class="comment">/*功能：获取当前进程中的未决信号集.</span></span><br><span class="line"><span class="comment">  参数：</span></span><br><span class="line"><span class="comment">    set: 传出参数，保存的是当前进程中的未决信号集中的信息.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigprocmask</span><span class="params">(<span class="type">int</span> how, <span class="type">const</span> <span class="type">sigset_t</span> *<span class="built_in">set</span>, <span class="type">sigset_t</span> *oldset)</span>;</span><br><span class="line"><span class="comment">/*功能: 将自定义信号集中的数据设置到内核中(设置阻塞, 解除阻塞, 替换).</span></span><br><span class="line"><span class="comment">  参数:</span></span><br><span class="line"><span class="comment">    how: 如何对内核阻塞信号集进行处理, 假设当前的信号屏蔽字为mask.</span></span><br><span class="line"><span class="comment">      SIG_BLOCK: 将用户设置的阻塞信号集添加到内核中, 内核中原来的数据不变.则mask = mask|set.</span></span><br><span class="line"><span class="comment">    SIG_UNBLOCK: 根据用户设置的数据, 对内核中的数据进行解除阻塞.则mask = mask&amp;(~set).</span></span><br><span class="line"><span class="comment">    SIG_SETMASK: 覆盖内核中原来的值(替代原始屏蔽及的新屏蔽集).则mask = set.若调用sigprocmask解除了对当前若干个信号的     阻塞，则在sigprocmask返回前，至少将其中一个信号递达.</span></span><br><span class="line"><span class="comment">  set: 已经初始化好的用户自定义的信号集.</span></span><br><span class="line"><span class="comment">  oldset: 保存设置之前的内核中的阻塞信号集的状态, 可以是NULL.</span></span><br><span class="line"><span class="comment">  返回值:</span></span><br><span class="line"><span class="comment">  成功: 0</span></span><br><span class="line"><span class="comment">  失败: -1 </span></span><br><span class="line"><span class="comment">    设置错误号:EFAULT / EINVAL.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="信号处理函数"><a href="#信号处理函数" class="headerlink" title="信号处理函数"></a>信号处理函数</h2><h3 id="signal函数"><a href="#signal函数" class="headerlink" title="signal函数"></a>signal函数</h3><p>改变对信号的默认处理（设置某一信号的对应动作）。</p><h4 id="函数原型-15"><a href="#函数原型-15" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> sig, <span class="type">void</span> (*handler)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure><p>针对信号处理函数指针简化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="comment">//将sighandler_t定义为返回值为void，接受一个int形参的函数指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">sighandler_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">sighandler_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> signum, <span class="type">sighandler_t</span> handler)</span>;</span><br></pre></td></tr></table></figure><p>此函数必须在signal()被调用前申明，handler中为这个函数的名字。当接收到一个类型为sig的信号时，就执行handler所指定的函数。（int）signum是传递给它的唯一参数。执行了signal()调用后，进程只要接收到类型为sig的信号，不管其正在执行程序的哪一部分，就立即执行func()函数。当func()函数执行结束后，控制权返回进程被中断的那一点继续执行。 </p><h4 id="函数参数-14"><a href="#函数参数-14" class="headerlink" title="函数参数"></a>函数参数</h4><p><code>signum</code>：指明了所要处理的信号类型，它可以取除了SIGKILL和SIGSTOP外的任何一种信号。 　 </p><p><code>handler</code>：描述了与信号关联的动作，它可以取以下三种值： </p><ul><li><code>SIG_IGN</code>：忽略该信号。</li><li><code>SIG_DFL</code>：表示恢复对信号的系统默认处理。不写此处理函数默认也是执行系统默认操作。 </li><li>指定的函数地址，则在信号发生时会调用该函数。</li></ul><h4 id="函数返回值-15"><a href="#函数返回值-15" class="headerlink" title="函数返回值"></a>函数返回值</h4><p>返回先前的信号处理函数指针，指向sig信号的处理程序，如果有错误则返回SIG_ERR（-1）。</p><h3 id="sigaction函数"><a href="#sigaction函数" class="headerlink" title="sigaction函数"></a>sigaction函数</h3><p>（信号捕捉）用于处理和控制信号，相比signal()函数，sigaction()提供了更强大且具有可移植性的信号处理能力。sigaction()可以让你定义捕获信号时的行为，包括设置信号处理函数和信号处理选项。</p><h4 id="函数原型-16"><a href="#函数原型-16" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span> <span class="comment">// 使用此函数，需导入此系统调用</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sigaction</span><span class="params">(<span class="type">int</span> signum, <span class="type">const</span> <span class="keyword">struct</span> sigaction *act, <span class="keyword">struct</span> sigaction *oldact)</span>;</span><br></pre></td></tr></table></figure><p><strong>sigaction结构体：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> &#123;</span></span><br><span class="line"><span class="comment">//只能对sa_handler或者sa_sigaction其中一个赋值.</span></span><br><span class="line">    <span class="type">void</span> (*sa_handler)(<span class="type">int</span>);        <span class="comment">//信号处理函数，常用.</span></span><br><span class="line">    <span class="type">void</span> (*sa_sigaction)(<span class="type">int</span>, <span class="type">siginfo_t</span> *, <span class="type">void</span> *); <span class="comment">//带有信号信息的信号处理函数，不常用.</span></span><br><span class="line">    <span class="type">sigset_t</span> sa_mask;               <span class="comment">//在信号处理函数执行期间阻塞的信号集.</span></span><br><span class="line">    <span class="type">int</span> sa_flags;                   <span class="comment">//控制信号处理行为的标志位，决定你到底是使用sa_handler还是sa_sigaction处理函数,</span></span><br><span class="line">                    <span class="comment">//这个值可以是0, 表示使用sa_handler, 也可以是SA_SIGINFO表示使用sa_sigaction.</span></span><br><span class="line">    <span class="type">void</span> (*sa_restorer)(<span class="type">void</span>);      <span class="comment">//已过时，不建议使用.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>sa_mask</code>是一个临时的阻塞信号集，它的作用仅仅是在执行某个信号的时候，才会去阻塞信号集中的信号，在除了执行某个信号的其他时间里，不会阻塞任何信号。</p><h4 id="函数参数-15"><a href="#函数参数-15" class="headerlink" title="函数参数"></a>函数参数</h4><ul><li><code>int signum</code>：指定要处理的信号。</li><li><code>const struct sigaction *act</code>：一个指向sigaction结构体的指针，该结构体包含信号处理函数和信号处理选项（捕捉到信号之后的处理动作）。如果为NULL，则不会改变信号的处理行为。</li><li><code>struct sigaction *oldact</code>：一个指向sigaction结构体的指针，用于存储信号原有的处理行为（上一次对信号捕捉相关的设置）。如果为NULL，则不会返回信号原有的处理行为。</li></ul><h4 id="函数返回值-16"><a href="#函数返回值-16" class="headerlink" title="函数返回值"></a>函数返回值</h4><ul><li>成功时，返回0；</li><li>失败时，返回-1，并设置errno以表示错误原因。</li></ul><h4 id="使用实例-12"><a href="#使用实例-12" class="headerlink" title="使用实例"></a>使用实例</h4><p>使用sigaction()捕获SIGINT信号（当用户按下Ctrl+C时产生）并执行自定义处理函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;捕获到信号%d\n&quot;</span>, sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">ss</span>;</span></span><br><span class="line">    ss.sa_handler = sigint_handler;</span><br><span class="line">    sigemptyset(&amp;ss.sa_mask);<span class="comment">//清空临时阻塞信号集</span></span><br><span class="line">    ss.sa_flags = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sigaction(SIGINT, &amp;ss, <span class="literal">NULL</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">&quot;sigaction&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;等待信号...\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，设置了一个自定义的信号处理函数sigint_handler，用于在接收到SIGINT信号时执行。使用sigemptyset()初始化sa_mask，以防止在信号处理函数执行期间阻塞任何其他信号。sa_flags设置为0，表示使用默认的信号处理行为。最后，调用sigaction()设置信号处理函数。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203003129680.png" alt="image-20231203003129680" style="zoom:67%;"></p><h2 id="setsid函数"><a href="#setsid函数" class="headerlink" title="setsid函数"></a>setsid函数</h2><p>setsid函数用于创建一个新的会话，并使得当前进程成为新会话组的组长。setsid函数能够使进程完全独立出来，从而脱离所有其他进程的控制。查看一个进程的会话id可以<code>ps ajx</code>，所在列SID即为会话id。</p><p>进程属于一个进程组，进程组号(GID)就是进程组长的进程号(PID)。登录会话可以包含多个进程组。这些进程组共享一个控制终端。这个控制终端通常是创建进程的登录终端。控制终端，登录会话和进程组通常是从父进程继承下来的。</p><p><strong>进程组和会话的概念：</strong> 如果一个父进程通过fork函数产生了好多个子进程，那么这些父进程和子进程在同一个组内，并且进程组id和父进程id是相同的，父进程称为组长。同时子进程和父进程在同一个会话内，父进程也成为会长。</p><p>每个进程都属于某个进程组，进程组是由一个或多个相互间有关联的进程组成的，他的目的是为了进行作业控制。进程租的主要特征就是信号可以发给进程组中的所有进程：这个信号可以使同一个进程组中的所有进程终止，停止或者继续运行。</p><p>调用该函数成功后，该调用进程成为新的会话组的组长，在会话组中创建新的进程组并担任组长。同时脱离终端的控制，运行在后台。该进程成为新会话组和进程组中唯一的进程。</p><h3 id="函数原型-17"><a href="#函数原型-17" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pid_t</span> <span class="title function_">setsid</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//本函数成功的话返回调用进程的会话id；失败返回-1，设置errno</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><strong>父进程不能调用此函数</strong>。父进程调用setsid函数，函数返回-1，设置ERROR为EPERM。</li><li>如果一个会话中会长所在的那个进程中止，那么SIGHUP信号将会发送给控制终端下与会长所在进程在同一个进程组的所有进程。</li></ol><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><h3 id="守护进程概念"><a href="#守护进程概念" class="headerlink" title="守护进程概念"></a>守护进程概念</h3><p>守护进程也称精灵进程（Daemon），是运行在后台的一种特殊进程，它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。</p><p>守护进程是一种很有用的进程，Linux的大多数服务器就是用守护进程实现的，比如Internet服务器inetd，Web服务器httpd等。同时守护进程完成许多系统任务，比如作业规划进程crond等。</p><p>Linux系统启动时会启动很多系统服务进程，这些系统服务进程没有控制终端，不能直接和用户交互。其他进程都是在用户登录或运行程序时创建，在运行结束或用户注销时终止，但系统服务进程不受用户登录注销的影响，它们一直在运行着，这种进程有一个名称叫守护进程（Daemon）。</p><h3 id="创建守护进程的步骤"><a href="#创建守护进程的步骤" class="headerlink" title="创建守护进程的步骤"></a>创建守护进程的步骤</h3><ol><li>创建子进程，并通过<code>fork</code>系统调用复制父进程的文件描述符表和信号处理函数。</li><li>在子进程中调用<code>setsid</code>系统调用创建新的会话，并成为会话的首进程。</li><li>修改工作目录为根目录，以防止守护进程占用文件系统。（<code>chdir()</code>：修改当前工作路径）</li><li>重设文件权限掩码，以便守护进程创建文件时具有合适的权限。（umask(0)；）</li><li>关闭不再需要的文件描述符，如标准输入、标准输出和标准错误输出等。</li><li>处理信号，如SIGCHLD、SIGHUP等，可以选择忽略或自定义处理函数。</li><li>运行守护进程的主要逻辑，如服务监听、数据处理等。</li><li>退出守护进程。</li></ol><h3 id="创建一个守护进程"><a href="#创建一个守护进程" class="headerlink" title="创建一个守护进程"></a>创建一个守护进程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//信号捕捉函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">creatFile</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> fileName[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(fileName,<span class="number">0</span>,<span class="keyword">sizeof</span>(fileName));</span><br><span class="line">    <span class="built_in">sprintf</span>(fileName, <span class="string">&quot;%s/example/zy.%ld&quot;</span>, getenv(<span class="string">&quot;HOME&quot;</span>),time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">int</span> fd = open(fileName, O_CREAT | O_TRUNC | O_WRONLY, <span class="number">0664</span>);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个守护进程，实现每隔五秒钟创建一个文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建子进程，父进程死亡</span></span><br><span class="line">    <span class="type">pid_t</span> id = fork();</span><br><span class="line">    <span class="keyword">if</span>(id &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//子进程调用setsid函数,子进程当会长</span></span><br><span class="line">    setsid();</span><br><span class="line">    <span class="comment">//切换家目录</span></span><br><span class="line">    chdir(getenv(<span class="string">&quot;HOME&quot;</span>));</span><br><span class="line">    <span class="comment">//设置掩码</span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//业务逻辑</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//新建闹钟</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">itimerval</span> <span class="title">myit</span> =</span> &#123;&#123;<span class="number">5</span>,<span class="number">0</span>&#125;, &#123;<span class="number">5</span>,<span class="number">0</span>&#125;&#125;;  <span class="comment">//五秒钟后闹钟响起，之后每隔五秒钟</span></span><br><span class="line">    setitimer(ITIMER_REAL, &amp;myit, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//注册信号处理函数</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sig</span>;</span></span><br><span class="line">    sig.sa_flags = <span class="number">0</span>;</span><br><span class="line">    sig.sa_handler = creatFile;</span><br><span class="line">    <span class="comment">//屏蔽信号集</span></span><br><span class="line">    sigemptyset(&amp;sig.sa_mask);</span><br><span class="line">    sigaction(SIGALRM, &amp;sig, <span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然如果我们的业务不是很复杂，可以通过nohup指令达到与守护进程相同的效果。指令为<code>nohup yourcommand [&gt;xxx.log] &amp;</code>；nohup表示不让你要执行的程序yourcommand收到信号SIGHUP，&amp;表示在后台运行。</p><h2 id="线程相关"><a href="#线程相关" class="headerlink" title="线程相关"></a>线程相关</h2><p>多线程开发在 Linux 平台上已经有成熟的 pthread 库支持。其涉及的多线程开发的最基本概念主要包含三点：线程，互斥锁，条件。其中，线程操作又分线程的创建，退出，等待 3 种。互斥锁则包括 4 种操作，分别是创建，销毁，加锁和解锁。条件操作有 5 种操作：创建，销毁，触发，广播和等待。其他的一些线程扩展概念，如信号灯等，都可以通过上面的三个基本元素的基本操作封装出来。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203202217896.png" alt="image-20231203202217896"></p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203225501899.png" alt="image-20231203225501899"></p><h2 id="pthread-create函数"><a href="#pthread-create函数" class="headerlink" title="pthread_create函数"></a>pthread_create函数</h2><p>创建一个新线程。 其作用，对应进程中fork()函数。</p><p>g++/gcc编译的时候需要加上参数<code>-pthread</code>，编译pthread动态库。</p><p>线程ID：<code>pthread_t</code>类型，可理解为：typedef unsigned long int pthread_t；本质：在Linux下为无符号整数(%lu)，其他系统中可能是结构体实现。</p><h3 id="函数原型-18"><a href="#函数原型-18" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_create</span><span class="params">(<span class="type">pthread_t</span> *thread, <span class="type">const</span> <span class="type">pthread_attr_t</span> *attr, <span class="type">void</span> *(*start_routine) (<span class="type">void</span> *), <span class="type">void</span> *arg)</span>;</span><br><span class="line"><span class="comment">//返回值：成功返回0，失败返回错误编号</span></span><br></pre></td></tr></table></figure><h3 id="函数参数-16"><a href="#函数参数-16" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>pthread_t *thread</code>：用来保存新的线程的id，由函数<code>pthread_self()</code>获取，类似获取进程pid使用getpid()函数。</p><p><code>const pthread_attr_t *attr</code>：用于定制各种不同的线程属性，暂可以把它设置为NULL，以创建默认属性的线程。</p><p><code>void *(*start_routine) (void *)</code>：线程中执行函数。新创建的线程从start_rtn函数的地址开始运行，该函数只有一个无类型指针参数arg。该函数运行结束，则线程结束，即创建线程的回调函数。</p><p><code>void *arg</code>：执行函数中所使用的参数。如果需要向start_rtn函数传递的参数不止一个，那么需要把这些参数放到一个结构体中，然后把这个结构体的地址作为arg参数传入。</p><h3 id="函数返回值-17"><a href="#函数返回值-17" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功：返回0；</li><li>失败：返回错误号，可通过strerror函数打印错误信息。</li></ul><p>线程创建成功，新线程就会加入到系统调度队列中，获取到 CPU 之后就会立马从 start_routine()函数开始运行该线程的任务；调用 pthread_create()函数后，通常我们无法确定系统接着会调度哪一个线程来使用 CPU 资源，先调度主线程还是新创建的线程呢（而在多核 CPU 或多 CPU 系统中，多核线程可能会在不同的核心上同时执行）？如果程序对执行顺序有强制要求，那么就必须采用一些同步技术来实现。这与前面学习父、子进程时也出现了这个问题，无法确定父进程、子进程谁先被系统调度。</p><p>注意 pthread_create()在调用失败时通常会返回错误码，它并不像其它库函数或系统调用一样设置 errno， 每个线程都提供了全局变量 errno 的副本，这只是为了与使用 errno 到的函数进行兼容，在线程中，从函数中返回错误码更为清晰整洁，不需要依赖那些随着函数执行不断变化的全局变量，这样可以把错误的范围限制在引起出错的函数中。</p><h3 id="使用实例-13"><a href="#使用实例-13" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">carryFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current thread:process id:%d thread id:%lu\n&quot;</span>, getpid(), pthread_self());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    pthread_create(&amp;thread, <span class="literal">NULL</span>, carryFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main process:process id:%d thread id:%lu thread:%lu\n&quot;</span>, getpid(), pthread_self(), thread);</span><br><span class="line">    <span class="comment">//睡一秒让子线程有机会执行完</span></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203201803667.png" alt="image-20231203201803667"></p><p><strong>pthread_self</strong>函数：返回调用线程的id，就像getpid()函数返回调用进程id一样。</p><h2 id="pthread-exit函数"><a href="#pthread-exit函数" class="headerlink" title="pthread_exit函数"></a>pthread_exit函数</h2><p>退出当前线程，对其他线程没有影响；如果想要主线程退出而子线程不退出，就用pthread_exit函数。</p><p>线程中，禁止使用exit函数，会导致进程内所有线程全部退出。</p><p>在多线程环境中，应尽量少用，或者不使用exit函数，取而代之使用pthread_exit函数，将单个线程退出。任何线程里exit导致进程退出，其他线程未工作结束，主控线程退出时不能return或exit。</p><p>pthread_exit或者return返回的指针所指向的内存单元必须是全局的或者是用malloc分配的，不能在线程函数的栈上分配，因为当其它线程得到这个返回指针时线程函数已经退出了。</p><h3 id="函数原型-19"><a href="#函数原型-19" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pthread_exit</span><span class="params">(<span class="type">void</span> *retval)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-17"><a href="#函数参数-17" class="headerlink" title="函数参数"></a>函数参数</h3><p>参数<code>retval</code>的数据类型为 void *，指定了线程的返回值、也就是线程的退出码，通常传NULL，该返回值可由另一个线程通过调用 pthread_join()来获取。</p><p>参数<code>retval</code>所指向的内容不应分配于<strong>线程栈</strong>中，因为线程终止后，将无法确定线程栈的内容是否有效。</p><h3 id="无返回值"><a href="#无返回值" class="headerlink" title="无返回值"></a>无返回值</h3><h3 id="使用实例-14"><a href="#使用实例-14" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">carryFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am another thread:tid:%lu\n&quot;</span>, pthread_self());</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    pthread_create(&amp;tid, <span class="literal">NULL</span>, carryFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tid:%lu\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="comment">//让主线程退出,进程不退出</span></span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203204936482.png" alt="image-20231203204936482"></p><h2 id="pthread-join函数"><a href="#pthread-join函数" class="headerlink" title="pthread_join函数"></a>pthread_join函数</h2><p>pthread_join()函数来阻塞等待线程的终止， 并获取线程的退出码，回收线程资源。</p><p>调用该函数的线程将挂起等待，直到id为thread的线程终止。thread线程以不同的方法终止，通过pthread_join得到的终止状态是不同的，总结如下：</p><ul><li>如果<code>thread</code>线程通过<code>return</code>返回，<code>retval</code>所指向的单元里存放的是<code>thread</code>线程函数的返回值。</li><li>如果<code>thread</code>线程被别的线程调用<code>pthread_cancel</code>异常终止掉，<code>retval</code>所指向的单元里存放的是常数<code>PTHREAD_CANCELED</code>。</li><li>如果<code>thread</code>线程是自己调用<code>pthread_exit</code>终止的，<code>retval</code>所指向的单元存放的是传给<code>pthread_exit</code>的参数。</li><li>如果对<code>thread</code>线程的终止状态不感兴趣，可以传<code>NULL</code>给<code>retval</code>参数。</li></ul><h3 id="函数原型-20"><a href="#函数原型-20" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_join</span><span class="params">(<span class="type">pthread_t</span> thread, <span class="type">void</span> **retval)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-18"><a href="#函数参数-18" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>thread</code>：pthread_join()等待指定线程的终止，通过参数thread（线程 ID）指定需要等待的线程。</p><p><code>retval</code>：如果参数retval不为NULL，则pthread_join()将目标线程的退出状态（即目标线程通过pthread_exit()退出时指定的返回值或者在线程start函数中执行return语句对应的返回值）复制到retval所指向的内存区域；如果目标线程被pthread_cancel()取消，则将PTHREAD_CANCELED放在<code>*retval</code>中。如果对目标线程的终止状态不感兴趣，则可将参数retval设置为NULL。（回收那个线程的退出值，根据pthread_exit函数里面的参数类型是<code>void*</code>，对其回收就得是<code>void**</code>。）</p><h3 id="函数返回值-18"><a href="#函数返回值-18" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功返回0。</li><li>失败将返回错误码。</li></ul><h3 id="使用实例-15"><a href="#使用实例-15" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">carryFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am subthread\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">4</span>);<span class="comment">//即使让子线程睡4秒,但pthread_join函数阻塞等待着,主线程没有继续往下执行.</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span>*)<span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//tid就是创建的子线程的id</span></span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    pthread_create(&amp;tid, <span class="literal">NULL</span>, carryFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">void</span>* ret;</span><br><span class="line">    pthread_join(tid, &amp;ret);</span><br><span class="line">    <span class="comment">//获取线程的返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ret:%s\n&quot;</span>, (<span class="type">char</span>*)ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;I am main thread\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203211755776.png" alt="image-20231203211755776"></p><h2 id="pthread-cancel函数"><a href="#pthread-cancel函数" class="headerlink" title="pthread_cancel函数"></a>pthread_cancel函数</h2><p>发送取消请求给指定的线程，杀死某个指定的线程。但需要达到一个<strong>取消点</strong>。这个取消点就是进入内核，如果线程中没有进入内核的契机，该函数就杀不死这个线程。可以在程序中手动添加一个取消点<code>pthread_testcancel()</code>；</p><p>取消点：取消点是指程序中的某个位置，在该位置线程可以被取消。常见的取消点包括线程阻塞在I/O操作、休眠、等待锁等地方。</p><p> 有时候，在程序设计需求当中，需要向一个线程发送一个请求，要求它立刻退出，我们把这种操作称为取消线程，也就是向指定的线程发送一个请求，要求其立刻终止、退出。譬如，一组线程正在执行一个运算， 一旦某个线程检测到错误发生，需要其它线程退出，取消线程这项功能就派上用场了。</p><p>  发出取消请求之后，函数<code>pthread_cancel()</code>立即返回，不会等待目标线程的退出。默认情况下，目标线程也会立刻退出，其行为表现为如同调用了参数为PTHREAD_CANCELED（退出码为-1）的pthread_exit()函数，但是，线程可以设置自己不被取消或者控制如何被取消，所以 pthread_cancel()并不会等待线程终止，仅仅只是提出请求。</p><h3 id="函数原型-21"><a href="#函数原型-21" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cancel</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure><h3 id="取消状态以及类型"><a href="#取消状态以及类型" class="headerlink" title="取消状态以及类型"></a>取消状态以及类型</h3><p>默认情况下，线程会响应其它线程发送的取消请求的，响应请求然后退出线程。当然，线程可以选择不被取消或者设置取消方式，通过 pthread_setcancelstate()和 pthread_setcanceltype()来设置线程的取消性状态和类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_setcancelstate</span><span class="params">(<span class="type">int</span> state, <span class="type">int</span> *oldstate)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_setcanceltype</span><span class="params">(<span class="type">int</span> type, <span class="type">int</span> *oldtype)</span>;</span><br></pre></td></tr></table></figure><p>参数<code>state</code>必须是以下值之一：</p><ul><li><code>PTHREAD_CANCEL_ENABLE</code>：线程可以取消，这是新创建的线程取消性状态的默认值，所以新建线程以及主线程<strong>默认</strong>都是可以取消的。</li><li><code>PTHREAD_CANCEL_DISABLE</code>：线程不可被取消，如果此类线程接收到取消请求，则会将请求挂起，直至线程的取消性状态变为 PTHREAD_CANCEL_ENABLE。</li></ul><p>参数<code>type</code>必须是以下值之一：</p><ul><li><code>PTHREAD_CANCEL_DEFERRED</code>：取消请求到来时，线程还是继续运行，取消请求被挂起，直到线程到达某个取消点为止，这是所有新建线程包括主线程<strong>默认</strong>的取消性类型。</li><li><code>PTHREAD_CANCEL_ASYNCHRONOUS</code>：可能会在任何时间点（也许是立即取消，但不一定） 取消线程，这种取消性类型应用场景很少，不再介绍。</li></ul><h3 id="取消点"><a href="#取消点" class="headerlink" title="取消点"></a>取消点</h3><p>取消点其实就是一系列函数，当执行到这些函数的时候，才会真正响应取消请求，这些函数就是取消点；在没有出现取消点时，取消请求是无法得到处理的，究其原因在于系统认为，但没有到达取消点时，线程此时正在执行的工作是不能被停止的，正在执行关键代码，此时终止线程将可能会导致出现意想不到的异常发生。</p><h3 id="使用实例-16"><a href="#使用实例-16" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">carryFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread is running, count: %d\n&quot;</span>, count);</span><br><span class="line">        count ++;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检查取消请求</span></span><br><span class="line">    pthread_testcancel();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread cancellation requested. Exiting...\n&quot;</span>);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    <span class="comment">//创建线程</span></span><br><span class="line">    pthread_create(&amp;thread, <span class="literal">NULL</span>, carryFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//等待一段时间</span></span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//取消线程执行</span></span><br><span class="line">    pthread_cancel(thread);</span><br><span class="line">    <span class="comment">//等待线程退出</span></span><br><span class="line">    pthread_join(thread, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread cancelling successfully.\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203224115465.png" alt="image-20231203224115465"></p><p>代码的主要逻辑：</p><ol><li><p>在<code>main()</code>函数中，我们创建了一个子线程<code>thread</code>，并将其执行函数设置为<code>carryFunc</code>。</p></li><li><p><code>carryFunc</code>是子线程的执行函数。在该函数中，我们使用一个循环来模拟线程的工作，每秒打印一次计数值<code>count</code>。这个循环会一直执行，直到收到取消请求。</p></li><li><p>在主线程中，我们使用<code>sleep(3)</code>等待了3秒，然后调用<code>pthread_cancel(thread)</code>来发送取消请求给子线程。</p></li><li><p>接着，我们使用<code>pthread_join(thread, NULL)</code>等待子线程退出。这样，主线程会阻塞直到子线程执行完毕。</p></li><li><p>最后，主线程输出<code>&quot;Thread canceled successfully.&quot;</code>表示线程成功被取消。</p></li></ol><p>使用<code>pthread_cancel()</code>函数来取消线程需要小心处理，确保线程在被取消之前完成必要的清理工作，以避免资源泄漏或数据不一致的问题。在这个例子中，子线程中使用<code>pthread_testcancel()</code>来检查取消请求，以确保在取消点处退出线程。</p><h2 id="pthread-detach函数"><a href="#pthread-detach函数" class="headerlink" title="pthread_detach函数"></a>pthread_detach函数</h2><p>执行线程分离。将指定的线程标记为 “可分离的“，表示该线程在执行结束后会自动释放资源（由资源自动回收机制完成），无需等待主线程回收。另一方面，这也意味这主线程无法获得线程的返回值。</p><ul><li><p>线程分离状态：指定该状态，线程主动与主控线程断开关系。线程结束后，其退出状态不由其他线程获取，而直接自己自动释放。网络、多线程服务器常用。</p></li><li><p>不能对一个已经处于detach状态的线程调用pthread_join，这样的调用将返回EINVAL错误。也就是说，如果已经对一个线程调用了pthread_detach就不能再调用pthread_join了。</p></li></ul><p>一旦线程处于分离状态，就不能再使用 pthread_join()来获取其终止状态，此过程是不可逆的，一旦处于分离状态之后便不能再恢复到之前的状态。处于分离状态的线程，当其终止后，能够自动回收线程资源。</p><h3 id="函数原型-22"><a href="#函数原型-22" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_detach</span><span class="params">(<span class="type">pthread_t</span> thread)</span>;</span><br></pre></td></tr></table></figure><p>一个线程既可以将另一个线程分离，同时也可以将自己分离，譬如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pthread_detach(pthread_self());</span><br></pre></td></tr></table></figure><h3 id="使用实例-17"><a href="#使用实例-17" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">carryFunc</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;subthread:tid:%lu\n&quot;</span>, pthread_self());</span><br><span class="line">    sleep(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;subthread:tid:%lu\n&quot;</span>, pthread_self());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    pthread_create(&amp;tid, <span class="literal">NULL</span>, carryFunc, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//分离线程</span></span><br><span class="line">    pthread_detach(tid);</span><br><span class="line">    <span class="comment">//让子线程全部执行完</span></span><br><span class="line">    sleep(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//尝试pthread_join</span></span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (ret = pthread_join(tid, <span class="literal">NULL</span>) != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ret:%d error string:%s\n&quot;</span>, ret, strerror(ret));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231203231848423.png" alt="image-20231203231848423"></p><h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p>在线程实际运行过程中，我们经常需要多个线程保持同步。这时可以用互斥锁来完成任务。互斥锁的使用过程中，主要有：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pthread_mutex_init;<span class="comment">//初始化锁</span></span><br><span class="line"></span><br><span class="line">pthread_mutex_destory;<span class="comment">//销毁锁</span></span><br><span class="line"></span><br><span class="line">pthread_mutex_lock;<span class="comment">//上锁</span></span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock;<span class="comment">//释放锁</span></span><br></pre></td></tr></table></figure><p>互斥锁实现了“互相排斥”（<em>mutual exclusion</em>）同步的简单形式，所以名为互斥锁。互斥锁禁止多个进程同时进入受保护的代码“临界区”（<em>critical section</em>）。因此，在任意时刻，只有一个进程被允许进入这样的代码保护区。</p><p>mutex的语义相对于信号量要简单轻便一些，在锁争用激烈的测试场景下，mutex比信号量执行速度更快，可扩展性更好，另外mutex数据结构的定义比信号量小。</p><h2 id="初始化锁pthread-mutex-init"><a href="#初始化锁pthread-mutex-init" class="headerlink" title="初始化锁pthread_mutex_init"></a>初始化锁pthread_mutex_init</h2><p><code>pthread_mutex_init</code>是一个函数，在使用线程时，它是创建线程锁的第一个步骤，互斥锁的初始化。线程锁是一种用于多线程编程的同步机制，它是用来保护共享资源，确保在线程要访问共享变量时，只有一个线程进行访问。使用线程锁能够有效地避免竞争条件的发生。</p><p><code>pthread_mutex_init()</code>是以<strong>动态方式</strong>创建互斥锁的，参数attr指定了新建互斥锁的属性。如果参数attr为空（<em>NULL</em>），则使用默认的互斥锁属性，默认属性为快速互斥锁 。互斥锁的属性在创建锁的时候指定，在LinuxThreads实现中仅有一个锁类型属性，不同的锁类型在试图对一个已经被锁定的互斥锁加锁时表现不同。</p><p>POSIX定义了一个宏<code>PTHREAD_MUTEX_INITIALIZER</code>来静态初始化互斥锁：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br></pre></td></tr></table></figure><p>使用<code>pthread_mutex_init</code>函数初始化的线程锁，在使用完毕后一定要记得调用<code>pthread_mutex_destroy</code>函数来销毁线程锁，并且需要确保所有线程都已退出该锁。</p><h3 id="函数原型-23"><a href="#函数原型-23" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_init</span><span class="params">(<span class="type">pthread_mutex_t</span>* mutex, <span class="type">const</span> <span class="type">pthread_mutexattr_t</span>* attr)</span>;</span><br></pre></td></tr></table></figure><h3 id="函数参数-19"><a href="#函数参数-19" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>mutex</code>：是一个<code>pthread_mutex_t</code>类型指针，指向需要进行初始化操作的互斥锁对象。</p><p><code>attr</code>：是一个<code>pthread_mutexattr_t</code>类型指针，指向一个<code>pthread_mutexattr_t</code>类型对象，该对象<strong>用于定义互斥锁的属性</strong>，若将参数attr设置为NULL，则表示将互斥锁的属性设置为默认值，在这种情况下其实就等价于<code>PTHREAD_MUTEX_INITIALIZER</code>这种方式初始化，而不同之处在于， 使用宏不进行错误检查。</p><p>在不设置属性时，第二个参数可以设置为NULL。如果设置了属性，则需要使用<code>pthread_mutexattr_init</code>函数对属性进行初始化，并通过<code>pthread_mutexattr_settype</code>函数设置属性值，再将属性指针作为参数传递给<code>pthread_mutex_init</code>函数。</p><p>pthread_mutex_init常用的属性包括：</p><ul><li><code>PTHREAD_PROCESS_SHARED</code>：互斥锁可以在多个进程间共享。</li><li><code>PTHREAD_MUTEX_RECURSIVE</code>：互斥锁是可重入的，同一个线程可以多次获取同一个互斥锁，释放时也要相应多次。</li><li><code>PTHREAD_MUTEX_ERRORCHECK</code>：互斥锁是带错误检查的，如果同一个线程多次获取同一个互斥锁，则返回错误码EBUSY。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_mutexattr_t</span> attr;</span><br><span class="line">    pthread_mutexattr_init(&amp;attr);</span><br><span class="line">    pthread_mutexattr_settype(&amp;attr, PTHREAD_MUTEX_ERRORCHECK);</span><br><span class="line">    pthread_mutex_init(&amp;mutex, &amp;attr);</span><br><span class="line">    <span class="comment">// 使用互斥锁</span></span><br><span class="line">    ...</span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    pthread_mutexattr_destroy(&amp;attr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数返回值-19"><a href="#函数返回值-19" class="headerlink" title="函数返回值"></a>函数返回值</h3><ul><li>成功返回0。</li><li>失败将返回一个非0的错误码。</li></ul><h2 id="加锁pthread-mutex-lock和解锁pthread-mutex-unlock"><a href="#加锁pthread-mutex-lock和解锁pthread-mutex-unlock" class="headerlink" title="加锁pthread_mutex_lock和解锁pthread_mutex_unlock"></a>加锁pthread_mutex_lock和解锁pthread_mutex_unlock</h2><p>调用函数 <code>pthread_mutex_lock()</code>可以对互斥锁加锁、获取互斥锁，而调用函数 <code>pthread_mutex_unlock()</code>可以对互斥锁解锁、释放互斥锁。两个函数一般需要搭配使用。</p><h3 id="函数原型-24"><a href="#函数原型-24" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_lock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_trylock</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="comment">// 返回：若成功返回0，否则返回错误编号</span></span><br></pre></td></tr></table></figure><p><code>pthread_mutex_trylock()</code>语义与<code>pthread_mutex_lock()</code>类似，不同的是在锁已经被占据时返回EBUSY而不是挂起等待。</p><ul><li>如果线程不希望被阻塞，它可以使用<code>pthread_mutex_trylock()</code>尝试对互斥量进行加锁。如果调用<code>pthread_mutex_trylock()</code>时互斥量处于未锁住状态，那么<code>pthread_mutex_trylock()</code>将锁住互斥量，不会出现阻塞并返回0，否则<code>pthread_mutex_trylock()</code>就会失败，不能锁住互斥量，而返回EBUSY。</li></ul><p>调用 pthread_mutex_unlock()函数将已经处于锁定状态的互斥锁进行解锁。以下行为均属错误：</p><ul><li>对处于未锁定状态的互斥锁进行解锁操作；</li><li>解锁由其它线程锁定的互斥锁。</li></ul><h2 id="销毁锁pthread-mutex-destroy"><a href="#销毁锁pthread-mutex-destroy" class="headerlink" title="销毁锁pthread_mutex_destroy()"></a>销毁锁pthread_mutex_destroy()</h2><p>当不再需要互斥锁时，应该将其销毁，通过调用 <code>pthread_mutex_destroy()</code>函数来销毁互斥锁。</p><h3 id="函数原型-25"><a href="#函数原型-25" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_mutex_destroy</span><span class="params">(<span class="type">pthread_mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure><p>在调用成功情况下返回0，失败返回一个非0值的错误码。</p><ul><li>不能销毁还没有解锁的互斥锁，否则将会出现错误；</li><li>没有初始化的互斥锁也不能销毁。</li></ul><p>被<code>pthread_mutex_destroy()</code>销毁之后的互斥锁，就不能再对它进行上锁和解锁了，需要再次调用<code>pthread_mutex_init()</code>对互斥锁进行初始化之后才能使用。</p><h2 id="读写锁及相关函数"><a href="#读写锁及相关函数" class="headerlink" title="读写锁及相关函数"></a>读写锁及相关函数</h2><p>读写锁允许更高的并行性，也叫共享互斥锁。互斥量要么是加锁状态，要么就是解锁状态，而且一次只有一个线程可以对其加锁。</p><p>读写锁可以有3种状态：</p><ol><li>读模式下加锁状态（读锁）。</li><li>写模式加锁状态（写锁）。</li><li>不加锁状态。</li></ol><p>一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁，即允许多个线程读但只允许一个线程写（写独占，读共享）。</p><p>读写锁非常适合于对数据结构读的次数远大于写的情况。当读操作较多，写操作较少时，可用读写锁提高线程读并发性。</p><p>适合使用读写锁的场景：</p><ul><li><strong>缓存</strong>：在多个线程中读取同一个缓存时，使用读写锁可以提高程序的并发性，从而提高程序的性能。</li><li><strong>数据库</strong>：在数据库中，读操作通常比写操作频繁。使用读写锁可以提高并发性，从而提高程序的性能。</li><li><strong>日志</strong>：在日志系统中，写操作的频率通常比读操作高得多。使用读写锁可以防止读线程被写线程长时间阻塞，从而提高程序的性能。</li><li><strong>配置文件</strong>：在读取配置文件时，使用读写锁可以提高程序的并发性，从而提高程序的性能。</li></ul><h3 id="读写锁创建和销毁"><a href="#读写锁创建和销毁" class="headerlink" title="读写锁创建和销毁"></a>读写锁创建和销毁</h3><h4 id="函数原型-26"><a href="#函数原型-26" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">//初始化一个读写锁对象,分配使用读写锁需要的资源.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">phtread_rwlock_init</span><span class="params">(<span class="type">pthread_rwlock_t</span> *<span class="keyword">restrict</span> rwlock, <span class="type">const</span> <span class="type">pthread_rwlockattr_t</span> *<span class="keyword">restrict</span> attr)</span>;</span><br><span class="line"><span class="comment">//销毁一个读写锁对象,释放被锁使用的资源.</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_destroy</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></table></figure><h4 id="函数参数-20"><a href="#函数参数-20" class="headerlink" title="函数参数"></a>函数参数</h4><ul><li><code>rwlock</code>：需要初始化的读写锁。</li><li><code>attr</code>：读写锁属性，通常使用默认属性，传NULL即可。</li></ul><h4 id="函数返回值-20"><a href="#函数返回值-20" class="headerlink" title="函数返回值"></a>函数返回值</h4><ul><li>成功返回0。</li><li>失败返回非0。</li></ul><h3 id="读写锁加锁解锁"><a href="#读写锁加锁解锁" class="headerlink" title="读写锁加锁解锁"></a>读写锁加锁解锁</h3><h4 id="函数原型-27"><a href="#函数原型-27" class="headerlink" title="函数原型"></a>函数原型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 加读锁 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_rdlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_tryrdlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;<span class="comment">//非阻塞加读锁</span></span><br><span class="line"><span class="comment">/* 加写锁 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_wrlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_trywrlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;<span class="comment">//非阻塞加写锁</span></span><br><span class="line"><span class="comment">/* 释放锁 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_rwlock_unlock</span><span class="params">(<span class="type">pthread_rwlock_t</span> *rwlock)</span>;</span><br></pre></td></tr></table></figure><p>遵循写锁独占，读锁共享的原则：</p><ul><li>如果已经给一把锁加上写锁，那么再尝试加读锁或者写锁将会阻塞。</li><li>如果一把锁已经加上写锁，再尝试加上读锁或者写锁都将会阻塞，那么原来的写锁释放之后，尝试加上写锁的优先级更高。</li><li>如果一把锁已经加上读锁，那么其他线程或者当前线程尝试加上读锁会成功。</li></ul><h4 id="函数返回值-21"><a href="#函数返回值-21" class="headerlink" title="函数返回值"></a>函数返回值</h4><ul><li>成功返回0。</li><li>失败返回非0。</li></ul><h3 id="使用实例-18"><a href="#使用实例-18" class="headerlink" title="使用实例"></a>使用实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">/* 定义读写锁 */</span></span><br><span class="line"><span class="type">pthread_rwlock_t</span> rwlock;</span><br><span class="line"><span class="comment">/* 定义共享资源变量 */</span></span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="comment">/* 读操作 其他线程允许读操作 不允许写操作 */</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">fun1</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_rdlock(&amp;rwlock);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read thread1 %d\n&quot;</span>, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 读操作，其他线程允许读操作，不允许写操作 */</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">fun2</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_rdlock(&amp;rwlock);</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read thread2 %d\n&quot;</span>, cnt);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 写操作，其它线程都不允许读或写操作 */</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">fun3</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_wrlock(&amp;rwlock);</span><br><span class="line">        &#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;write thread1 \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 写操作，其它线程都不允许读或写操作 */</span> </span><br><span class="line"><span class="type">void</span>* <span class="title function_">fun4</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_rwlock_wrlock(&amp;rwlock);</span><br><span class="line">        &#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;write thread2 \n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pthread_rwlock_unlock(&amp;rwlock);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2, tid3, tid4;</span><br><span class="line">    pthread_rwlock_init(&amp;rwlock, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="comment">/* 创建测试线程 */</span></span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, fun1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, fun2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid3, <span class="literal">NULL</span>, fun3, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;tid4, <span class="literal">NULL</span>, fun4, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">/* 等待线程结束，回收其资源 */</span></span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid3, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid4, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_rwlock_destroy(&amp;rwlock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="条件变量相关的函数"><a href="#条件变量相关的函数" class="headerlink" title="条件变量相关的函数"></a>条件变量相关的函数</h2><p>条件变量是一种同步机制，用于在多个线程之间传递信息，以便协调它们的行为。条件变量通常与锁一起使用，以便在共享资源上等待特定条件的出现。</p><p>当一个线程需要等待某个条件成立时，它可以调用条件变量的等待函数（如<code>pthread_cond_wait()</code>），将当前线程阻塞，并将锁释放，以便其他线程能够访问共享资源。当条件成立时，其他线程会通过条件变量的通知函数（如<code>pthread_cond_signal()</code>或<code>pthread_cond_broadcast()</code>）来通知等待的线程，从而唤醒它们并重新获取锁。</p><p>条件变量通常与锁一起使用，用于<strong>解决多个线程之间的同步问题</strong>。例如：</p><ul><li>多个线程需要等待某个事件的发生，例如生产者消费者模型。</li><li>多个线程需要协调执行某个任务，例如线程池。</li><li>多个线程需要按照某种顺序执行，例如读写锁。</li></ul><p>使用条件变量的一般<strong>流程</strong>如下：</p><p>1、初始化互斥锁和条件变量，例如<code>pthread_mutex_init</code>和<code>pthread_cond_init</code>函数；<br>2、在需要等待条件变量的线程中获取互斥锁，并使用<code>pthread_cond_wait</code>函数等待条件变量的信号；<br>3、在需要发送条件变量信号的线程中获取互斥锁，并使用<code>pthread_cond_signal</code>或<code>pthread_cond_broadcast</code>函数发送信号；<br>4、在线程退出前，使用<code>pthread_mutex_destroy</code>和<code>pthread_cond_destroy</code>函数销毁互斥锁和条件变量。</p><p>使用条件变量需要注意以下几点：</p><ul><li>使用条件变量前，需要先初始化，可以使用<code>pthread_cond_init</code>。</li><li>不再使用时，应使用<code>pthread_cond_destroy</code>销毁条件变量。</li><li>虽然<code>pthread_cond_wait</code>在等待时会释放互斥锁，但在被唤醒并从<code>pthread_cond_wait</code>返回时，它会再次获得该锁。</li><li>发送条件变量信号时需要获取互斥锁，并在发送信号之后释放互斥锁，以便等待线程能够获取互斥锁并检查条件。</li><li>由于存在所谓的”虚假唤醒”（<em>spurious wakeup</em>），线程在被唤醒后应该再次检查条件是否真的满足，这也是为什么通常在while循环中检查条件。</li><li>在使用条件变量时需要确保共享变量的一致性，避免出现竞态条件。</li></ul><h3 id="函数原型-28"><a href="#函数原型-28" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">//初始化一个条件变量。</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_init</span><span class="params">(<span class="type">pthread_cond_t</span> *<span class="keyword">restrict</span> cond, <span class="type">const</span> <span class="type">pthread_condattr_t</span> *<span class="keyword">restrict</span> attr)</span>;</span><br><span class="line"><span class="comment">/*参数1: cond条件变量</span></span><br><span class="line"><span class="comment">  参数2: attr条件变量属性，通常为默认值，传 NULL 即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//也可以使用静态初始化的方法，初始化条件变量:</span></span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁一个条件变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_destroy</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻塞等待一个条件变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *<span class="keyword">restrict</span> cond, <span class="type">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数1:cond条件变量</span></span><br><span class="line"><span class="comment">参数2:mutex锁变量</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">函数作用:</span></span><br><span class="line"><span class="comment">1.阻塞等待条件变量cond满足</span></span><br><span class="line"><span class="comment">2.释放已掌握的互斥锁(解锁互斥量)相当于pthread_mutex_unlock(&amp;mutex);</span></span><br><span class="line"><span class="comment">1、2两步为一个原子操作.</span></span><br><span class="line"><span class="comment">3.当被唤醒后,pthread_cond_wait函数返回时,解除阻塞并重新申请获取互斥锁pthread_mutex_lock(&amp;mutex);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>该函数使调用线程在指定的条件变量<code>cond</code>上等待。为了等待条件变量，线程必须先获取与条件变量相关联的互斥锁<code>mutex</code>。当线程调用<code>pthread_cond_wait</code>后，它会自动释放这个<code>mutex</code>，并将自己置于条件变量的等待队列中。当条件变量被<code>signal</code>或广播时，线程被唤醒并重新尝试获取<code>mutex</code>。一旦成功获取，<code>pthread_cond_wait</code>返回，并且线程可以继续执行。</p><p><strong>注意事项</strong>：</p><ul><li>在调用<code>pthread_cond_wait</code>之前，线程必须持有互斥锁<code>mutex</code>。</li><li>当<code>pthread_cond_wait</code>返回时，线程将重新获得互斥锁，因此需要在返回后释放互斥锁。</li><li>由于存在“伪唤醒”，即使没有明确的<code>pthread_cond_signal</code>或<code>pthread_cond_broadcast</code>调用，<code>pthread_cond_wait</code>也可能返回（这种行为可能是由于多种原因引起的，包括操作系统的干扰、系统中断或其他未明确指定的原因）。因此，通常建议在循环中检查等待的条件。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//限时等待一个条件变量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_timedwait</span><span class="params">(<span class="type">pthread_cond_t</span> *<span class="keyword">restrict</span> cond, <span class="type">pthread_mutex_t</span> *<span class="keyword">restrict</span> mutex, <span class="type">const</span> <span class="keyword">struct</span> timespec *<span class="keyword">restrict</span> abstime)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数:</span></span><br><span class="line"><span class="comment">  cond:条件变量</span></span><br><span class="line"><span class="comment">  mutex:锁变量</span></span><br><span class="line"><span class="comment">  abstime:绝对时间</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唤醒至少一个阻塞在条件变量上的线程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br><span class="line"><span class="comment">//该函数唤醒在指定条件变量cond上等待的一个线程.如果有多个线程在等待,选择哪个线程被唤醒是不确定的.</span></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>调用<code>pthread_cond_signal</code>并不意味着与之相关的互斥锁<code>mutex</code>会被自动释放。信号仅仅表示等待条件的线程可以被唤醒。</li><li>如果没有线程在条件变量上等待，调用<code>pthread_cond_signal</code>不会有任何副作用。也就是说，没有“积累”的效应；如果之后有线程开始等待，它不会因为之前的<code>pthread_cond_signal</code>调用而被立即唤醒。</li></ul><p><code>pthread_cond_signal</code>的<strong>核心目的</strong>：从等待条件的线程队列中选择一个线程并唤醒它，使其可以再次运行。如果没有线程正在等待，那么<code>pthread_cond_signal</code>基本上不做任何事情。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唤醒全部阻塞在条件变量上的线程</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pthread_cond_broadcast</span><span class="params">(<span class="type">pthread_cond_t</span> *cond)</span>;</span><br><span class="line"><span class="comment">//这与pthread_cond_signal不同,后者只唤醒一个等待该条件的线程.</span></span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ul><li>在调用<code>pthread_cond_broadcast</code>（或任何与条件变量相关的函数）之前，通常需要持有与该条件变量相关联的互斥锁。</li><li>虽然<code>pthread_cond_broadcast</code>会唤醒所有等待的线程，但这并不意味着所有这些线程都会立即开始执行。哪个线程首先获得执行权取决于<strong>线程调度</strong>和<strong>优先级</strong>等因素。</li><li>使用<code>pthread_cond_broadcast</code>而不是<code>pthread_cond_signal</code>可能会导致更高的上下文切换开销，因为它可能唤醒多个线程。因此，只有在确实需要唤醒所有线程的情况下，才应使用它。</li></ul><h3 id="使用实例-19"><a href="#使用实例-19" class="headerlink" title="使用实例"></a>使用实例</h3><p>生产者消费者条件变量模型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pc</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pc</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;PC;</span><br><span class="line">PC *head = <span class="literal">NULL</span>;<span class="comment">//头节点</span></span><br><span class="line">PC *mp = <span class="literal">NULL</span>;  <span class="comment">//一个结点</span></span><br><span class="line"><span class="comment">//静态初始化锁</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> has_product = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">productor</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//生产一个结点</span></span><br><span class="line">        mp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PC));</span><br><span class="line">        mp-&gt;num = rand() % <span class="number">400</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;---productor---%d\n&quot;</span>, mp-&gt;num);</span><br><span class="line">        <span class="comment">//上菜到链表</span></span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        mp-&gt;next = head;</span><br><span class="line">        head = mp;</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="comment">//唤醒消费者</span></span><br><span class="line">        pthread_cond_signal(&amp;has_product);</span><br><span class="line">        sleep(rand() % <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="type">void</span>* <span class="title function_">consumer</span><span class="params">(<span class="type">void</span>* arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加锁</span></span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">while</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等待被唤醒</span></span><br><span class="line">            pthread_cond_wait(&amp;has_product, &amp;mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//开始消费</span></span><br><span class="line">        mp = head;</span><br><span class="line">        head = mp-&gt;next;</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;---consumer---%d\n&quot;</span>, mp-&gt;num);</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        <span class="built_in">free</span>(mp);</span><br><span class="line">        mp = <span class="literal">NULL</span>;</span><br><span class="line">        sleep(rand() % <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid1, tid2;</span><br><span class="line">    <span class="comment">//创建生产者线程</span></span><br><span class="line">    pthread_create(&amp;tid1, <span class="literal">NULL</span>, productor, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">//创建消费者线程</span></span><br><span class="line">    pthread_create(&amp;tid2, <span class="literal">NULL</span>, consumer, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    pthread_join(tid1, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(tid2, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231204235852173.png" alt="image-20231204235852173"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//等待被唤醒</span></span><br><span class="line">  pthread_cond_wait(&amp;has_product, &amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为啥要用<code>while</code>，不能用<code>if</code>呢？</p><ul><li>为了解决多消费者出现的逻辑问题，比如有两个消费者，都阻塞在条件变量上，此时生产者生产了一个货物，<code>pthread_cond_signal(&amp;has_product);</code>会同时唤醒两个条件变量，此时两个消费者共同竞争<code>mutex</code>，其中一个消费者竞争到锁开始消费，另一个消费者会阻塞在<code>mutex</code>上，持有锁的消费者消费完成后释放锁，此时阻塞在<code>mutex</code>上的消费者可能会拿到锁进行消费，但此时公共区可能并没有货物，所以阻塞在<code>mutex</code>上的消费者拿到锁后仍需要判断<code>head != NULL</code>，有货物再消费，没货物继续等待条件变量唤醒。因为，需要用<code>while</code>，不能用<code>if</code>。</li></ul><h2 id="信号量相关的函数"><a href="#信号量相关的函数" class="headerlink" title="信号量相关的函数"></a>信号量相关的函数</h2><p>信号量相当于进化版的互斥锁，由于互斥锁的粒度比较大，如果我们希望在多个线程间对某一对象的部分数据进行共享，使用互斥锁是没有办法实现的，只能将整个数据对象锁住。这样虽然达到了多线程操作共享数据时保证数据正确性的目的，却无形中导致线程的并发性下降。线程从并行执行，变成了串行执行。与直接使用单进程无异。信号量，是相对折中的一种处理方式，既能保证同步，数据不混乱，又能提高线程并发。</p><p>信号量用于任务间的同步！简单来理解，信号量是一个被内核维护的整数，这个整数一般是“大于等于零”的，我们对这个信号量的操作一般为：将信号量设置一个值、发布(加上一个信号量)、消耗(减去一个信号量)、等待信号量的值为0。在POSIX下信号量分为命名信号量与未命名信号量。<strong>未命名信号量</strong>，也被称为<strong>基于内存的信号量</strong>，类型为<code>sem_t</code>，创建未命名信号量使用的函数为<code>sem_init()</code>。</p><h3 id="函数原型-29"><a href="#函数原型-29" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span><span class="comment">//编译时需要跟上后缀-pthread</span></span></span><br><span class="line"><span class="comment">//初始化一个无名信号量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_init</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">int</span> pshared, <span class="type">unsigned</span> <span class="type">int</span> value)</span>;</span><br><span class="line"><span class="comment">/*函数参数:</span></span><br><span class="line"><span class="comment">  sem: sem_t类型的地址处初始化一个无名信号量(创建信号量的id)</span></span><br><span class="line"><span class="comment">  pshared: 0表示信号量再一个进程的所有线程之间共享;非0(一般取1)表示再进程之间共享.</span></span><br><span class="line"><span class="comment">  value: 指定信号量的值(一般为一个大于等于0的整数)</span></span><br><span class="line"><span class="comment">函数返回值:</span></span><br><span class="line"><span class="comment">  成功: 返回0;</span></span><br><span class="line"><span class="comment">  失败: 返回-1,设置errno以指示错误.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁一个信号量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_destroy</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">/* 被销毁的信号量是之前使用sem_init()初始化的未命名信号量 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//锁定信号量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">/* 调用此函数成功的话,信号量value将会减1.如果等于0,该函数会阻塞调用进程,直到信号量的值大于0为止;信号量值大于0时该信号量值被减1并且函数返回. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试对信号量加锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_trywait</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">/* 和sem_wait函数类似,但是调用这个函数失败的话不阻塞而是返回错误error. */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//限时尝试锁定信号量</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_timedwait</span><span class="params">(<span class="type">sem_t</span> *sem, <span class="type">const</span> <span class="keyword">struct</span> timespec *abs_timeout)</span>;</span><br><span class="line"><span class="comment">/*函数参数:</span></span><br><span class="line"><span class="comment">  sem: 信号量</span></span><br><span class="line"><span class="comment">  abs_timeout: 采用的是绝对时间.</span></span><br><span class="line"><span class="comment">调用此函数成功的话信号量value将会减一.</span></span><br><span class="line"><span class="comment">如果调用前信号量的值为0,那么本函数将会阻塞一定的时间,一定的时间过后还是不能锁定信号量,那么此函数调用失败并且设置errno为ETIMEDOUT.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//给信号量解锁</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> *sem)</span>;</span><br><span class="line"><span class="comment">/* 调用此函数成功后信号量value将会加一. */</span></span><br></pre></td></tr></table></figure><h3 id="生产者消费者信号量模型"><a href="#生产者消费者信号量模型" class="headerlink" title="生产者消费者信号量模型"></a>生产者消费者信号量模型</h3><p>使用信号量完成线程间同步，模拟生产者，消费者问题：</p><ul><li>如果队列中有数据，生产者不能生产，只能阻塞。</li><li>如果队列中没有数据，消费者不能消费，只能等待数据。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 5               </span></span><br><span class="line"><span class="type">int</span> <span class="built_in">queue</span>[NUM];                                     <span class="comment">//全局数组实现环形队列</span></span><br><span class="line"><span class="type">sem_t</span> blank_number, product_number;                 <span class="comment">//空格子信号量, 产品信号量</span></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;blank_number);                    <span class="comment">//生产者将空格子数--,为0则阻塞等待</span></span><br><span class="line">        <span class="built_in">queue</span>[i] = rand() % <span class="number">1000</span> + <span class="number">1</span>;               <span class="comment">//生产一个产品</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;---Produce---%d\n&quot;</span>, <span class="built_in">queue</span>[i]);        </span><br><span class="line">        sem_post(&amp;product_number);                  <span class="comment">//将产品数++</span></span><br><span class="line">        i = (i + <span class="number">1</span>) % NUM;                            <span class="comment">//借助下标实现环形</span></span><br><span class="line">        sleep(rand() % <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        sem_wait(&amp;product_number);                  <span class="comment">//消费者将产品数--,为0则阻塞等待</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;---Consume---%d\n&quot;</span>, <span class="built_in">queue</span>[i]);</span><br><span class="line">        <span class="built_in">queue</span>[i] = <span class="number">0</span>;                               <span class="comment">//消费一个产品 </span></span><br><span class="line">        sem_post(&amp;blank_number);                    <span class="comment">//消费掉以后,将空格子数++</span></span><br><span class="line">        i = (i + <span class="number">1</span>) % NUM;</span><br><span class="line">        sleep(rand() % <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> pid, cid;</span><br><span class="line">    sem_init(&amp;blank_number, <span class="number">0</span>, NUM);                <span class="comment">//初始化空格子信号量为5</span></span><br><span class="line">  sem_init(&amp;product_number, <span class="number">0</span>, <span class="number">0</span>);                <span class="comment">//产品数为0</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">//创建生产者和消费者线程</span></span><br><span class="line">    pthread_create(&amp;pid, <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;cid, <span class="literal">NULL</span>, consumer, <span class="literal">NULL</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//等待线程结束</span></span><br><span class="line">    pthread_join(pid, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(cid, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//销毁信号量</span></span><br><span class="line">    sem_destroy(&amp;blank_number);</span><br><span class="line">    sem_destroy(&amp;product_number);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fcntl函数"><a href="#fcntl函数" class="headerlink" title="fcntl函数"></a>fcntl函数</h2><p>fcntl函数功能是针对<strong>文件描述符</strong>提供控制，根据不同的<code>cmd</code>对文件描述符可以执行的操作也非常多，用的最多的是文件记录锁，也就是<code>F_SETLK</code>命令，此命令搭配<code>flock</code>结构体，对文件进行加解锁操作，例如执行加锁操作，如果不解锁，本进程或者其他进程再次使用<code>F_SETLK</code>命令访问同一文件则会告知目前此文件已经上锁，加锁进程退出（正常、异常）后会自行解锁，使用此特性可以实现避免程序多次运行、锁定文件防止其他进行访问等操作。</p><p>当使用fcntl函数设置文件锁（<em>record lock</em>）后就<strong>只能有一个进程</strong>打开文件。</p><p>复制一个现有的描述符（<code>cmd = F_DUPFD</code>）。<br>获得/设置文件描述符标记（<code>cmd = F_GETFD/F_SETFD</code>）。<br>获得/设置文件状态标记（<code>cmd = F_GETFL/F_SETFL</code>）。<br>获得/设置异步I/O所有权（<code>cmd = F_GETOWN/F_SETOWN</code>）。<br>获得/设置记录锁（<code>cmd = F_GETLK , F_SETLK/F_SETLKW</code>）。</p><h3 id="函数原型-30"><a href="#函数原型-30" class="headerlink" title="函数原型"></a>函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd)</span>; </span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="type">long</span> arg)</span>; </span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="keyword">struct</span> flock *lock)</span>;</span><br></pre></td></tr></table></figure><p>参数fd是被参数cmd操作的描述符。针对cmd的值，fcntl能够接受第三个参数。</p><h3 id="函数参数-21"><a href="#函数参数-21" class="headerlink" title="函数参数"></a>函数参数</h3><p><code>fd</code>：文件描述符。</p><p><code>cmd</code>：操作命令。</p><div class="table-container"><table><thead><tr><th style="text-align:left">cmd</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:left"><code>F_DUPFD</code></td><td>复制文件描述符，复制的是第一个参数<code>fd</code>。执行成功返回新复制的文件描述符。</td></tr><tr><td style="text-align:left"><code>F_GETFD</code></td><td>获得<code>fd</code>的<code>close-on-exec</code>标志。若标志未设置，则文件经过exec函数之后仍保持打开状态。</td></tr><tr><td style="text-align:left"><code>F_SETFD</code></td><td>设置<code>close-on-exec</code>标志，该标志以参数<code>arg</code>的<code>FD_CLOEXEC</code>位决定。</td></tr><tr><td style="text-align:left"><code>F_GETFL</code></td><td>取得文件描述词状态标志，此标志为<code>open()</code>的参数<code>flags</code>。</td></tr><tr><td style="text-align:left"><code>F_SETFL</code></td><td>设置文件描述词状态标志，参数<code>arg</code>为新标志，但只允许<code>O_APPEND</code>、<code>O_NONBLOCK</code>和<code>O_ASYBC</code>位的改变，其他位的改变将不受影响。</td></tr><tr><td style="text-align:left"><code>F_GETLK</code></td><td>根据<code>lock</code>描述，取得文件锁定的状态。</td></tr><tr><td style="text-align:left"><code>F_SETLK</code></td><td>设置<code>lock</code>描述的文件锁状态。此时<code>flock</code>结构的<code>l_type</code>值必须是<code>F_RDLCK</code>、<code>F_WRLCK</code>或<code>F_UNLCK</code>。执行成功返回0；否则无法建立锁定，返回-1，错误码为<code>EACCES</code>或<code>EAGAIN</code>。</td></tr><tr><td style="text-align:left"><code>F_SETLKW</code></td><td><code>F_SETLK</code>的阻塞版本（命令名中的W表示等待wait）。若存在其他锁，则调用进程睡眠；若捕捉到信号则睡眠中断；若在阻塞的过程中被信号中断，会立即返回-1，错误码为<code>EINTR</code>。</td></tr><tr><td style="text-align:left"><code>F_GETOWN</code></td><td>检索将收到<code>SIGIO</code>和<code>SIGURG</code>信号的进程号或进程组号。</td></tr><tr><td style="text-align:left"><code>F_SETOWN</code></td><td>设置进程号或进程组号。</td></tr></tbody></table></div><p><code>Lock</code>：为结构体<code>flock</code>，设置记录锁的具体状态。</p><p><code>lock</code>的结构体<code>flock</code>的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flcok</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> l_type;   <span class="comment">//锁定的状态</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 以下的三个参数用于分段对文件加锁,若对整个文件加锁,则:l_whence = SEEK_SET,l_start = 0,l_len = 0 */</span></span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> l_whence; <span class="comment">//决定l_start位置</span></span><br><span class="line">    <span class="type">off_t</span> l_start;      <span class="comment">//锁定区域的开头位置 </span></span><br><span class="line">    <span class="type">off_t</span> l_len;        <span class="comment">//锁定区域的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> l_pid;        <span class="comment">//锁定动作的进程</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux常用函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统命令</title>
      <link href="/blogs/b9528813.html"/>
      <url>/blogs/b9528813.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p><code>文件</code>是一组被命名的存储在某种介质（如硬盘、光盘、U盘）上的信息的集合。</p><p><code>文件名</code>是文件的标识，它是一个可以包含字母、数字、下划线和句点的字符串。Linux要求文件名的长度一般不能超过255个字符。</p><p>Linux系统以<code>目录</code>的方式来组织和管理系统中所有的文件。目录是一种特殊的文件，用来管理和组织系统内大量的文件。</p><p>在树型目录结构中，文件和目录都通过路径来表示。路径有两种表示方法：</p><ul><li><code>绝对路径</code>：从根目录开始</li><li><code>相对路径</code>：从当前目录开始</li></ul><p>Linux系统中可以使用通配符“*”、“?”来同时引用多个文件。</p><ul><li>通配符“*”代表文件名中任意的字符和字符串。</li><li>通配符“?”表示任意一个字符。</li></ul><h2 id="查看当前目录命令pwd"><a href="#查看当前目录命令pwd" class="headerlink" title="查看当前目录命令pwd"></a>查看当前目录命令pwd</h2><p>格式：<code>pwd</code></p><p>例如：执行命令pwd，系统显示当前目录。</p><h2 id="改变当前目录cd"><a href="#改变当前目录cd" class="headerlink" title="改变当前目录cd"></a>改变当前目录cd</h2><p>格式：<code>cd &lt;目录名&gt;</code></p><p>例如：执行命令cd /home/admin，则切换到目录/home/admin下。</p><p>例如：执行命令cd~，则当前目录位于用户的主目录下。</p><p>例如：执行命令cd..，切换到当前目录的父目录。</p><h2 id="显示目录或文件信息命令ls"><a href="#显示目录或文件信息命令ls" class="headerlink" title="显示目录或文件信息命令ls"></a>显示目录或文件信息命令ls</h2><p>格式：<code>ls [选项] &lt;目录或文件名&gt;</code></p><p>主要选项如下：</p><blockquote><p><code>-a</code>：显示所有的文件和目录。</p><p><code>-l</code>：以长格式显示文件信息。</p><p><code>-t</code>：将结果按修改时间进行排序，新的文件或目录排在前面。</p><p><code>-R</code>：若目录下有文件，则列出目录下的所有文件。</p></blockquote><p>例如：执行命令<code>ls -al /</code>，显示根目录下所有文件的我爱你完整信息。</p><p>例如：执行命令<code>ls -at a*</code>，显示当前目录下所有以a开头的文件，新的文件排在前面。</p><h2 id="文件内容查看和连接命令cat"><a href="#文件内容查看和连接命令cat" class="headerlink" title="文件内容查看和连接命令cat"></a>文件内容查看和连接命令cat</h2><p>格式：<code>cat [选项] &lt;文件1&gt; &lt;文件2&gt; ......</code></p><p>该命令用于把几个文件的内容连接后显示在屏幕上。</p><p>主要选项如下：</p><blockquote><p><code>-n</code>或<code>-number</code>：对内容进行按行编号输出。</p><p><code>-b</code>或<code>-number-nonblock</code>：与-n相似，只是对于空行不进行编号。</p><p><code>-s</code>：当遇到连续两行以上的空白行时，就替换为一个空白行。</p><p><code>-v</code>：显示不可打印的字符。</p></blockquote><p>例如：执行命令<code>cat -n test.c</code>，表示将文件test.c的内容加上行号后显示输出。</p><p>例如：执行命令<code>cat test1.c test2.c</code>，表示将文件test1.c和test2.c的内容串接在一起并输出。</p><h2 id="文件复制命令cp"><a href="#文件复制命令cp" class="headerlink" title="文件复制命令cp"></a>文件复制命令cp</h2><p>格式:<code>cp [选项] &lt;源文件或目录&gt; &lt;目标文件或目录&gt;</code></p><p>该命令用于把一个文件拷贝到另一个文件或将多个文件拷贝到一个目录下。</p><p>主要选项如下：</p><blockquote><p><code>-r</code>：若源目录下还有文件或目录，则都拷贝到目的地。</p><p><code>-f</code>：若目标目录下已经有同名的文件，则把它删除并把源文件拷贝到目标目录下。</p></blockquote><p>例如：执行命令<code>cp test.c tmp/program.c</code>，表示把当前目录下的<code>test.c</code>文件拷贝到<code>/tmp</code>目录下并命名为<code>program.c</code>。</p><p>例如：执行命令<code>cp *.c /tmp</code>，表示把当前目录下所有以<code>.c</code>结尾的文件拷贝到<code>/tmp</code>目录下。</p><h2 id="文件删除命令rm"><a href="#文件删除命令rm" class="headerlink" title="文件删除命令rm"></a>文件删除命令rm</h2><p>格式：<code>rm [选项] &lt;文件\目录&gt;</code></p><p>该命令用于删除文件，若加上<code>-d</code>选项则可以删除指定的目录。</p><p>主要选项如下：</p><blockquote><p><code>-i</code>：删除前先询问要求确认。</p><p><code>-r</code>：若目录非空，则删除目录下所有的文件。</p><p><code>-f</code>：强制删除。</p></blockquote><p>例如：执行命令<code>rm *.c</code>，表示删除当前目录下所有以<code>.c</code>结尾的文件。</p><p>例如：执行命令<code>rm -rf tyq</code>，表示强制删除<code>tyq</code>目录下所有的文件和子目录，子目录下的文件或目录都被删除。</p><h2 id="移动或重命名文件命令mv"><a href="#移动或重命名文件命令mv" class="headerlink" title="移动或重命名文件命令mv"></a>移动或重命名文件命令mv</h2><p>格式：<code>mv [选项] &lt;源文件\目录&gt; &lt;目的文件\目录&gt;</code></p><p>该命令用于对一个文件或目录进行重命名或将几个文件移到另一目录。</p><p>主要选项如下：</p><blockquote><p><code>-I</code>：移动前先询问要求确认。</p><p><code>-f</code>：强制移动，若目标目录下有同名的文件则覆盖它。</p></blockquote><p>例如：执行命令<code>mv test.c program.c</code>，则将当前目录下的<code>test.c</code>文件重命名为<code>program.c</code>。</p><p>例如：执行命令<code>mv -i *.c /tmp/project</code>，则将当前目录下所有以<code>.c</code>结尾的文件移到<code>project</code>目录下，若目标目录下已有同名文件则先询问是否覆盖。</p><h2 id="创建目录命令mkdir"><a href="#创建目录命令mkdir" class="headerlink" title="创建目录命令mkdir"></a>创建目录命令mkdir</h2><p>格式：<code>mkdir [选项] &lt;目录&gt;</code></p><p>如果指定目录不存在则创建它。</p><p>主要选项如下：</p><blockquote><p><code>-p</code>：若要建立的目录的上层目录不存在，则先创建它。</p></blockquote><p>例如：执行命令<code>mkdir -p dir1/dir2</code>，表示在当前目录下创建<code>dir1/dir2</code>，如果<code>dir1</code>不存在则先创建它。</p><h2 id="删除目录命令rmdir"><a href="#删除目录命令rmdir" class="headerlink" title="删除目录命令rmdir"></a>删除目录命令rmdir</h2><p>格式：<code>rmdir [选项] &lt;目录&gt;</code></p><p>如果指定目录为空就删除它，若不为空则出现错误信息。</p><p>主要选项如下：</p><blockquote><p><code>-p</code>：当删除指定目录后，若该目录的父目录为空，则也将其删除。</p></blockquote><p>例如：执行命令<code>rmdir -p dir1/dir2</code>，表示在当前目录下的<code>dir1</code>目录中删除<code>dir2</code>子目录，若删除<code>dir2</code>后<code>dir1</code>变为空目录，则也将其删除。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>可以使用<code>”touch file.c“</code>命令在当前目录下创建一个文件，前提是<code>file.c</code>文件不存在。</p><p>可以在命令后加<code>--help</code>来获得帮助信息，如<code>”mkdir --help“</code>命令用于获取<code>mkdir</code>使用方法的帮助信息。</p><h1 id="Linux实用命令"><a href="#Linux实用命令" class="headerlink" title="Linux实用命令"></a>Linux实用命令</h1><h2 id="ps-命令"><a href="#ps-命令" class="headerlink" title="ps 命令"></a>ps 命令</h2><p><code>ps</code>命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束。</p><p>格式：<code>ps [选项]</code></p><p>选项如下：</p><blockquote><p><code>-A</code>：显示所有进程（同-e）</p><p><code>-a</code>：显示当前终端的所有进程</p><p><code>-u</code>：显示进程的用户信息</p><p><code>-o</code>：以用户自定义形式显示进程信息</p><p><code>-f</code>：显示程序间的关系</p><p><code>-x</code>：显示所有程序，不以终端机来区分</p><p><code>-aux</code>：显示所有包含其他使用者的行程</p></blockquote><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -aux|more</span><br><span class="line">ps -aux|grep root|more</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">USER</th><th style="text-align:left">PID</th><th style="text-align:left">%CPU</th><th style="text-align:left">%MEM</th><th style="text-align:left">VSZ</th><th style="text-align:left">RSS</th><th style="text-align:left">TTY</th><th style="text-align:left">STAT</th><th style="text-align:left">START</th><th style="text-align:left">TIME</th><th style="text-align:left">COMMAND</th></tr></thead><tbody><tr><td style="text-align:left">行程拥有者</td><td style="text-align:left">进程ID</td><td style="text-align:left">CPU 使用率</td><td style="text-align:left">内存使用率</td><td style="text-align:left">进程使用的虚拟内存大小，以K为单位</td><td style="text-align:left">驻留空间的大小。显示当前常驻内存的程序的K字节数。</td><td style="text-align:left">终端的号码</td><td style="text-align:left">进程状态</td><td style="text-align:left">进程开始时间</td><td style="text-align:left">执行的时间</td><td style="text-align:left">所执行的指令</td></tr></tbody></table></div><p>STAT进程状态包括下面的状态：</p><ul><li><code>D</code>：不可中断Uninterruptible sleep (usually IO)</li><li><code>R</code>：正在运行，或在队列中的进程</li><li><code>S</code>：处于休眠状态 T 停止或被追踪</li><li><code>Z</code>：僵尸进程</li><li><code>W</code>：进入内存交换（从内核2.6开始无效）</li><li><code>X</code>：死掉的进程</li><li><code>&lt;</code>：高优先级</li><li><code>N</code>：低优先级 L 有些页被锁进内存</li><li><code>s</code>：包含子进程<ul><li>位于后台的进程组</li></ul></li><li><code>l</code>：多线程，克隆线程</li></ul><h2 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h2><p><code>netstat</code>命令用来打印Linux中网络系统的状态信息，可让你得知整个Linux系统的网络情况。</p><p>格式：<code>netstat [选项]</code></p><p>选项如下：</p><blockquote><p><code>-a</code>或<code>--all</code>：显示所有连线中的Socket；</p><p><code>-l</code>或<code>--listening</code>：显示监控中的服务器的Socket；</p><p><code>-n</code>或<code>--numeric</code>：直接使用ip地址，而不通过域名服务器；</p><p><code>-t</code>或<code>--tcp</code>：显示TCP传输协议的连线状况；</p><p><code>-p</code>或<code>--programs</code>：显示正在使用Socket的程序识别码和程序名称；</p></blockquote><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -an</span><br><span class="line">netstat -anltp</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">Proto</th><th style="text-align:left">Recv-Q</th><th>Send-Q</th><th style="text-align:left">Local Address</th><th style="text-align:left">Foreign Address</th><th style="text-align:left">State</th><th style="text-align:left">PID/Program name</th></tr></thead><tbody><tr><td style="text-align:left">协议</td><td style="text-align:left">网络接收队列</td><td>网路发送队列</td><td style="text-align:left">本地地址</td><td style="text-align:left">外部地址</td><td style="text-align:left">端口状态</td><td style="text-align:left">进程ID/程序名</td></tr></tbody></table></div><p><code>协议</code>：主要有tcp协议与udp协议， 网络协议是通信计算机双方必须共同遵从的一组约定。如怎么样建立连接、怎么样互相识别等。只有遵守这个约定，计算机之间才能相互通信交流。</p><p><code>Recv-Q</code>：表示网络接收队列。表示收到的数据已经在本地接收缓冲，但是还有多少没有被进程取走。 如果接收队列Recv-Q——直处于阻塞状态，可能是遭受了拒绝服务denial-of-service攻击。</p><p><code>Send-Q</code>：表示网路发送队列。对方没有收到的数据或者说没有Ack的，还是本地缓冲区。 如果发送队列Send-Q不能很快的清零，可能是有应用向外发送数据包过快，或者是对方接收数据包不够快。</p><p><code>本地地址</code>与<code>外部地址</code>，分别以本地IP+端口，外部IP+端口的形式表达：</p><blockquote><p>IP地址是IP协议提供的一种统一的地址格式，它是由4组从0到255的数字组成，以0.0.0.0至255.255.255.255的形式表达的，可以表示计算机的网络位置（地址）的地址格式。</p><p>端口（port），可以认为是设备与外界通讯交流的出口。如果把IP地址比作一间房子，端口就是出入这间房子的门，计算机上的各类服务借由此“门”与外界通信。一个IP可以有65535（2^16）个端口。在一个计算机上，每个服务都会启用一个端口。</p></blockquote><p><code>State</code>（当前端口状态）有以下几种状态：</p><div class="table-container"><table><thead><tr><th style="text-align:left">端口状态</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">LISTEN</td><td style="text-align:left">侦听来自远方的TCP端口的连接请求</td></tr><tr><td style="text-align:left">SYN-SENT</td><td style="text-align:left">再发送连接请求后等待匹配的连接请求</td></tr><tr><td style="text-align:left">SYN-RECEIVED</td><td style="text-align:left">再收到和发送一个连接请求后等待对方对连接请求的确认</td></tr><tr><td style="text-align:left">ESTABLISHED</td><td style="text-align:left">代表一个打开的连接</td></tr><tr><td style="text-align:left">FIN-WAIT-1</td><td style="text-align:left">等待远程TCP连接中断请求，或先前的连接中断请求的确认</td></tr><tr><td style="text-align:left">FIN-WAIT-2</td><td style="text-align:left">从远程TCP等待连接中断请求</td></tr><tr><td style="text-align:left">CLOSE-WAIT</td><td style="text-align:left">等待从本地用户发来的连接中断请求</td></tr><tr><td style="text-align:left">CLOSING</td><td style="text-align:left">等待远程TCP对连接中断的确认</td></tr><tr><td style="text-align:left">LAST-ACK</td><td style="text-align:left">等待原来的发向远程TCP的连接中断请求的确认</td></tr><tr><td style="text-align:left">TIME-WAIT</td><td style="text-align:left">等待足够的时间以确保远程TCP接收到连接中断请求的确认</td></tr><tr><td style="text-align:left">CLOSED</td><td style="text-align:left">没有任何连接状态</td></tr></tbody></table></div><h2 id="lsof-命令"><a href="#lsof-命令" class="headerlink" title="lsof 命令"></a>lsof 命令</h2><p><code>lsof</code>命令用于查看你进程打开的文件，打开文件的进程，进程打开的端口（TCP、UDP）。找回/恢复删除的文件。是十分方便的系统监视工具，因为lsof命令需要访问核心内存和各种文件，所以需要root用户执行。</p><p>在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p><h3 id="lsof-命令使用"><a href="#lsof-命令使用" class="headerlink" title="lsof 命令使用"></a>lsof 命令使用</h3><p>如果输入<code>lsof</code>命令提示：未找到命令。那么我们需要进行安装。安装命令为<code>yum -y install lsof</code>。</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof |more</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">COMMAND</th><th style="text-align:left">PID TID TASKCMD</th><th style="text-align:left">USER</th><th style="text-align:left">FD</th><th style="text-align:left">TYPE</th><th style="text-align:left">DEVICE</th><th style="text-align:left">SIZE/OFF</th><th style="text-align:left">NODE</th><th style="text-align:left">NAME</th></tr></thead><tbody><tr><td style="text-align:left">进程的名称</td><td style="text-align:left">进程ID</td><td style="text-align:left">进程所有用户</td><td style="text-align:left">文件描述符，应用程序通过文件描述符识别该文件</td><td style="text-align:left">文件类型</td><td style="text-align:left">指定磁盘的名称</td><td style="text-align:left">文件的大小</td><td style="text-align:left">索引节点（文件在磁盘上的标识）</td><td style="text-align:left">打开文件的确切名称</td></tr></tbody></table></div><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lsof 1.txt           <span class="comment">#查看哪些进程打开了1.txt文件</span></span><br><span class="line">lsof -c sshd         <span class="comment">#查看sshd服务所打开的文件</span></span><br><span class="line">lsof -i :22          <span class="comment">#查看22端口有哪些进程在访问</span></span><br><span class="line">lsof -p 1168         <span class="comment">#查看1168进程号所打开的文件</span></span><br><span class="line">lsof -u 0            <span class="comment">#查看uid为0的用户打开的文件</span></span><br><span class="line">lsof|grep /var/log/  <span class="comment">#查看/var/log/下的文件被哪些进程打开</span></span><br></pre></td></tr></table></figure><h3 id="利用-lsof-命令恢复已删除的文件"><a href="#利用-lsof-命令恢复已删除的文件" class="headerlink" title="利用 lsof 命令恢复已删除的文件"></a>利用 lsof 命令恢复已删除的文件</h3><p>需要恢复已删除的文件前提条件是还有进程打开这个文件，比如遭到黑客入侵往往总是会删除一些日志、木马文件等，假设我们ssh的登录日志被删除了，我们使用<code>lsof</code>查看，可以看到最后面有（deleted）这个状态。</p><h2 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h2><p>配置和显示Linux系统网卡的网络参数。</p><p>如果在机器上还没有安装ifconfig命令，则可以使用如下命令安装：<code>yum install net-tools</code></p><p><strong>ifconfig命令</strong>被用于配置和显示Linux内核中网络接口的网络参数。用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存在电脑里，那就要修改网卡的配置文件了。</p><p>格式：<code>ifconfig(参数)</code></p><p>参数：</p><blockquote><p>add&lt;地址&gt;：设置网络设备IPv6的ip地址；<br>del&lt;地址&gt;：删除网络设备IPv6的IP地址；<br>down：关闭指定的网络设备；</p><p><hw<网络设备类型>&lt;硬件地址&gt;：设置网络设备的类型与硬件地址；<br>io_addr<I o地址>：设置网络设备的I/O地址；<br>irq<IRQ地址>：设置网络设备的IRQ；<br>media&lt;网络媒介类型&gt;：设置网络设备的媒介类型；<br>mem_start&lt;内存地址&gt;：设置网络设备在主内存所占用的起始地址；<br>metric&lt;数目&gt;：指定在计算数据包的转送次数时，所要加上的数目；<br>mtu&lt;字节&gt;：设置网络设备的MTU；<br>netmask&lt;子网掩码&gt;：设置网络设备的子网掩码；<br>tunnel&lt;地址&gt;：建立IPv4与IPv6之间的隧道通信地址；<br>up：启动指定的网络设备；<br>-broadcast&lt;地址&gt;：将要送往指定地址的数据包当成广播数据包来处理；<br>-pointopoint&lt;地址&gt;：与指定地址的网络设备建立直接连线，此模式具有保密功能；<br>-promisc：关闭或启动指定网络设备的promiscuous模式；<br>IP地址：指定网络设备的IP地址；<br>网络设备：指定网络设备的名称。</IRQ地址></I></hw<网络设备类型></p></blockquote><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>显示网络设备信息（激活状态的）：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ifconfig</span></span><br><span class="line">eth0      Link encap:Ethernet  HWaddr 00:16:3E:00:1E:51  </span><br><span class="line">          inet addr:10.160.7.81  Bcast:10.160.15.255  Mask:255.255.240.0</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:61430830 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:88534 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:3607197869 (3.3 GiB)  TX bytes:6115042 (5.8 MiB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:16436  Metric:1</span><br><span class="line">          RX packets:56103 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:56103 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:0</span><br><span class="line">          RX bytes:5079451 (4.8 MiB)  TX bytes:5079451 (4.8 MiB)</span><br></pre></td></tr></table></figure><p>说明：</p><p><strong>eth0</strong> 表示第一块网卡，其中<code>HWaddr</code>表示网卡的物理地址，可以看到目前这个网卡的物理地址（MAC地址）是<code>00:16:3E:00:1E:51</code>。</p><p><strong>inet addr</strong> 用来表示网卡的IP地址，此网卡的IP地址是<code>10.160.7.81</code>，广播地址<code>Bcast:10.160.15.255</code>，掩码地址<code>Mask:255.255.240.0</code>。</p><p><strong>lo</strong> 是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 httpd服务器的指定到回坏地址，在浏览器输入127.0.0.1就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。</p><ul><li>第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）。</li><li>第二行：网卡的IP地址、子网、掩码。</li><li>第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节。</li><li>第四、五行：接收、发送数据包情况统计。</li><li>第七行：接收、发送数据字节数统计信息。</li></ul><p><strong>启动关闭指定网卡：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 up</span><br><span class="line">ifconfig eth0 down</span><br></pre></td></tr></table></figure><p><code>ifconfig eth0 up</code>为启动网卡eth0，<code>ifconfig eth0 down</code>为关闭网卡eth0。ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。</p><p><strong>为网卡配置和删除IPv6地址：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 add 33ffe:3240:800:1005::2/64    <span class="comment">#为网卡eth0配置IPv6地址</span></span><br><span class="line">ifconfig eth0 del 33ffe:3240:800:1005::2/64    <span class="comment">#为网卡eth0删除IPv6地址</span></span><br></pre></td></tr></table></figure><p><strong>用ifconfig修改MAC地址：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 hw ether 00:AA:BB:CC:<span class="built_in">dd</span>:EE</span><br></pre></td></tr></table></figure><p><strong>配置IP地址：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 192.168.2.10</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ifconfig eth0 192.168.2.10 netmask 255.255.255.0 broadcast 192.168.2.255</span></span><br></pre></td></tr></table></figure><p><strong>启用和关闭arp协议：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 arp    <span class="comment">#开启网卡eth0 的arp协议</span></span><br><span class="line">ifconfig eth0 -arp   <span class="comment">#关闭网卡eth0 的arp协议</span></span><br></pre></td></tr></table></figure><p><strong>设置最大传输单元：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 mtu 1500    <span class="comment">#设置能通过的最大数据包大小为 1500 bytes</span></span><br></pre></td></tr></table></figure><p><strong>其它实例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig        <span class="comment">#处于激活状态的网络接口</span></span><br><span class="line">ifconfig -a    <span class="comment">#所有配置的网络接口，不论其是否激活</span></span><br><span class="line">ifconfig eth0  <span class="comment">#显示eth0的网卡信息</span></span><br></pre></td></tr></table></figure><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试主机之间网络的连通性（ipv4）。</p><p><strong>ping命令</strong>用来测试主机之间网络的连通性。执行ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><p>格式：<code>ping [选项] (参数)</code></p><p>选项：</p><blockquote><p>-d：使用Socket的SO_DEBUG功能；<br>-c&lt;完成次数&gt;：设置完成要求回应的次数；<br>-f：极限检测；<br>-i&lt;间隔秒数&gt;：指定收发信息的间隔时间；<br>-I&lt;网络界面&gt;：使用指定的网络界面送出数据包；<br>-l&lt;前置载入&gt;：设置在送出要求信息之前，先行发出的数据包；<br>-n：只输出数值；<br>-p&lt;范本样式&gt;：设置填满数据包的范本样式；<br>-q：不显示指令执行过程，开头和结尾的相关信息除外；<br>-r：忽略普通的Routing Table，直接将数据包送到远端主机上；<br>-R：记录路由过程；<br>-s&lt;数据包大小&gt;：设置数据包的大小；<br>-t&lt;存活数值&gt;：设置存活数值TTL的大小；<br>-v：详细显示指令的执行过程。<br>-w&lt;超时秒数&gt;：无论之前发送或接受了多少包，只要超过此秒数，程序退出；</p></blockquote><p>参数：</p><ul><li>目的主机：指定发送ICMP报文的目的主机。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@AY1307311912260196fcZ ~]# ping www.jsdig.com</span><br><span class="line">PING host.1.jsdig.com (100.42.212.8) 56(84) bytes of data.</span><br><span class="line">64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq=1 ttl=50 time=177 ms</span><br><span class="line">64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq=2 ttl=50 time=178 ms</span><br><span class="line">64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq=3 ttl=50 time=174 ms</span><br><span class="line">64 bytes from 100-42-212-8.static.webnx.com (100.42.212.8): icmp_seq=4 ttl=50 time=177 ms</span><br><span class="line">...按Ctrl+C结束</span><br><span class="line"></span><br><span class="line">--- host.1.jsdig.com ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 2998ms</span><br><span class="line">rtt min/avg/max/mdev = 174.068/176.916/178.182/1.683 ms</span><br></pre></td></tr></table></figure><h2 id="telnet命令"><a href="#telnet命令" class="headerlink" title="telnet命令"></a>telnet命令</h2><p>登录远程主机和管理（测试ip端口是否连通）。</p><p><strong>telnet命令</strong>用于登录远程主机，对远程主机进行管理。telnet因为采用<code>明文传送报文</code>，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录，因此弄清楚telnet客户端的使用方式仍是很有必要的。</p><p>如果在自己的机器上 还没有安装 telnet 命令，则可以使用如下命令安装：<code>yum install telnet</code>。</p><p>如果不指定端口号，则telnet命令会使用默认的23号端口。</p><p>格式：<code>telnet [选项] (参数)</code></p><p>选项：</p><blockquote><p>-8：允许使用8位字符资料，包括输入与输出；<br>-a：尝试自动登入远端系统；<br>-b&lt;主机别名&gt;：使用别名指定远端主机名称；<br>-c：不读取用户专属目录里的.telnetrc文件；<br>-d：启动排错模式；<br>-e&lt;脱离字符&gt;：设置脱离字符；<br>-E：滤除脱离字符；<br>-f：此参数的效果和指定”-F”参数相同；<br>-F：使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机；<br>-k&lt;域名&gt;：使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名；<br>-K：不自动登入远端主机；<br>-l&lt;用户名称&gt;：指定要登入远端主机的用户名称；<br>-L：允许输出8位字符资料；<br>-n&lt;记录文件&gt;：指定文件记录相关信息；<br>-r：使用类似rlogin指令的用户界面；<br>-S&lt;服务类型&gt;：设置telnet连线所需的ip TOS信息；<br>-x：假设主机有支持数据加密的功能，就使用它；<br>-X&lt;认证形态&gt;：关闭指定的认证形态。</p></blockquote><p>参数：</p><ul><li>远程主机：指定要登录进行管理的远程主机；</li><li>端口：指定TELNET协议使用的端口号。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">telnet 192.168.2.10</span></span><br><span class="line">Trying 192.168.2.10...</span><br><span class="line">Connected to 192.168.2.10 (192.168.2.10).</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line"></span><br><span class="line">    localhost (Linux release 2.6.18-274.18.1.el5 #1 SMP Thu Feb 9 12:45:44 EST 2012) (1)</span><br><span class="line"></span><br><span class="line">login: root</span><br><span class="line">Password:</span><br><span class="line">Login incorrect</span><br></pre></td></tr></table></figure><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>监视系统输入输出设备和CPU的使用情况。</p><p><strong>iostat命令</strong>被用于监视系统输入输出设备和CPU的使用情况。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。</p><p>格式：<code>iostat [选项] (参数)</code></p><p>选项：</p><blockquote><p><code>-c</code>：仅显示CPU使用情况；<br><code>-d</code>：仅显示设备利用率；<br><code>-k</code>：显示状态以千字节每秒为单位，而不使用块每秒；<br><code>-m</code>：显示状态以兆字节每秒为单位；<br><code>-p</code>：仅显示块设备和所有被使用的其他分区的状态；<br><code>-t</code>：显示每个报告产生时的时间；<br><code>-V</code>：显示版号并退出；<br><code>-x</code>：显示扩展状态。</p></blockquote><p>参数：</p><ul><li>间隔时间：每次报告的间隔时间（秒）；</li><li>次数：显示报告的次数。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>用<code>iostat -x /dev/sda1</code>来观看磁盘I/O的详细情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iostat -x /dev/sda1 </span><br><span class="line">Linux 2.6.18-164.el5xen (localhost.localdomain)</span><br><span class="line">2010年03月26日  </span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait </span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">steal   %idle</span>  </span><br><span class="line">            0.11    0.02    0.18    0.35   </span><br><span class="line">0.03    99.31  </span><br><span class="line"></span><br><span class="line">Device:         tps   Blk_read/s    Blk_wrtn/s  </span><br><span class="line">Blk_read   Blk_wrtn  </span><br><span class="line">sda1                0.02          0.08       </span><br><span class="line">0.00          2014               4 </span><br></pre></td></tr></table></figure><p>详细说明：第二行是系统信息和监测时间，第三行和第四行显示CPU使用情况（具体内容和mpstat命令相同）。这里主要关注后面I/O输出的信息，如下所示：</p><div class="table-container"><table><thead><tr><th>标示</th><th>说明</th></tr></thead><tbody><tr><td>Device</td><td>监测设备名称</td></tr><tr><td>rrqm/s</td><td>每秒需要读取需求的数量</td></tr><tr><td>wrqm/s</td><td>每秒需要写入需求的数量</td></tr><tr><td>r/s</td><td>每秒实际读取需求的数量</td></tr><tr><td>w/s</td><td>每秒实际写入需求的数量</td></tr><tr><td>rsec/s</td><td>每秒读取区段的数量</td></tr><tr><td>wsec/s</td><td>每秒写入区段的数量</td></tr><tr><td>rkB/s</td><td>每秒实际读取的大小，单位为KB</td></tr><tr><td>wkB/s</td><td>每秒实际写入的大小，单位为KB</td></tr><tr><td>avgrq-sz</td><td>需求的平均大小区段</td></tr><tr><td>avgqu-sz</td><td>需求的平均队列长度</td></tr><tr><td>await</td><td>等待I/O平均的时间（milliseconds）</td></tr><tr><td>svctm</td><td>I/O需求完成的平均时间</td></tr><tr><td>%util</td><td>设备带宽的使用率，达到100%表示饱和，达到性能瓶颈，如果是支持处理并发请求的设备则不代表性能瓶颈。</td></tr></tbody></table></div><h2 id="tcpdump命令"><a href="#tcpdump命令" class="headerlink" title="tcpdump命令"></a>tcpdump命令</h2><p>一款sniffer工具，是Linux上的抓包工具，嗅探器。</p><p><strong>tcpdump命令</strong>是一款抓包，嗅探器工具，它可以打印所有经过网络接口的数据包的头信息，也可以使用<code>-w</code>选项将数据包保存到文件中，方便以后分析。</p><p>格式：<code>tcpdump [选项]</code></p><p>选项：</p><blockquote><p>-a：尝试将网络和广播地址转换成名称；<br>-c&lt;数据包数目&gt;：收到指定的数据包数目后，就停止进行倾倒操作；<br>-d：把编译过的数据包编码转换成可阅读的格式，并倾倒到标准输出；<br>-dd：把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出；<br>-ddd：把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出；<br>-e：在每列倾倒资料上显示连接层级的文件头；<br>-f：用数字显示网际网络地址；<br>-F&lt;表达文件&gt;：指定内含表达方式的文件；<br>-i&lt;网络界面&gt;：使用指定的网络截面送出数据包；<br>-l：使用标准输出列的缓冲区；<br>-n：不把主机的网络地址转换成名字；<br>-N：不列出域名；<br>-O：不将数据包编码最佳化；<br>-p：不让网络界面进入混杂模式；<br>-q ：快速输出，仅列出少数的传输协议信息；<br>-r&lt;数据包文件&gt;：从指定的文件读取数据包数据；<br>-s&lt;数据包大小&gt;：设置每个数据包的大小；<br>-S：用绝对而非相对数值列出TCP关联数；<br>-t：在每列倾倒资料上不显示时间戳记；<br>-tt： 在每列倾倒资料上显示未经格式化的时间戳记；<br>-T&lt;数据包类型&gt;：强制将表达方式所指定的数据包转译成设置的数据包类型；<br>-v：详细显示指令执行过程；<br>-vv：更详细显示指令执行过程；<br>-x：用十六进制字码列出数据包资料；<br>-w&lt;数据包文件&gt;：把数据包数据写入指定的文件。</p></blockquote><p>-i：指定要捕获的目标网卡名，网卡名可以使用前面介绍的 ifconfig 命令获得；如果要抓取所有网卡上的包，则可以使用any关键字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 抓取网卡ens33上的包</span></span></span><br><span class="line">tcpdump -i ens33</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 抓取所有网卡上的包</span></span></span><br><span class="line">tcpdump -i any</span><br></pre></td></tr></table></figure><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p><strong>直接启动tcpdump将监视第一个网络接口上所有流过的数据包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump</span><br></pre></td></tr></table></figure><p><strong>监视指定网络接口的数据包</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth1</span><br></pre></td></tr></table></figure><p>如果不指定网卡，默认tcpdump只会监视第一个网络接口，一般是eth0，下面的例子都没有指定网络接口。</p><p><strong>监视指定主机的数据包</strong></p><p>打印所有进入或离开sundown的数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host sundown</span><br></pre></td></tr></table></figure><p>也可以指定ip，例如截获所有210.27.48.1的主机收到的和发出的所有的数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 210.27.48.1</span><br></pre></td></tr></table></figure><p>打印helios与hot或者与ace之间通信的数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host helios and \( hot or ace \)</span><br></pre></td></tr></table></figure><p>截获主机210.27.48.1和主机210.27.48.2或210.27.48.3的通信：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)</span><br></pre></td></tr></table></figure><p>打印ace与任何其他主机之间通信的IP数据包，但不包括与helios之间的数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip host ace and not helios</span><br></pre></td></tr></table></figure><p>如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip host 210.27.48.1 and ! 210.27.48.2</span><br></pre></td></tr></table></figure><p>抓取eth0网卡上的包，使用:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -i eth0</span><br></pre></td></tr></table></figure><p>截获主机hostname发送的所有数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 src host hostname</span><br></pre></td></tr></table></figure><p>监视所有送到主机hostname的数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 dst host hostname</span><br></pre></td></tr></table></figure><p><strong>监视指定主机和端口的数据包</strong></p><p>如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp port 23 and host 210.27.48.1</span><br></pre></td></tr></table></figure><p>对本机的udp 123端口进行监视，123为ntp的服务端口：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump udp port 123</span><br></pre></td></tr></table></figure><p><strong>监视指定网络的数据包</strong></p><p>打印本地主机与Berkeley网络上的主机之间的所有通信数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump net ucb-ether</span><br></pre></td></tr></table></figure><p><code>ucb-ether</code>此处可理解为“Berkeley网络”的网络地址，此表达式最原始的含义可表达为：打印网络地址为ucb-ether的所有数据包。</p><p>打印所有通过网关snup的ftp数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump &#x27;gateway snup and (port ftp or ftp-data)&#x27;</span><br></pre></td></tr></table></figure><p>注意：表达式被单引号括起来了，这可以防止shell对其中的括号进行错误解析。</p><p>打印所有源地址或目标地址是本地主机的IP数据包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump ip and not net localnet</span><br></pre></td></tr></table></figure><p>如果本地网络通过网关连到了另一网络，则另一网络并不能算作本地网络。</p><p>抓取80端口的HTTP报文，以文本形式展示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -i any port 80 -A</span><br></pre></td></tr></table></figure><h2 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h2><p>显示内存的使用情况。</p><p><strong>free命令</strong>可以显示当前系统未使用的和已使用的内存数目，还可以显示被内核使用的内存缓冲区。</p><p>格式： <code>free [选项]</code></p><p>选项：</p><blockquote><p><code>-b</code>：以Byte为单位显示内存使用情况；<br><code>-k</code>：以KB为单位显示内存使用情况；<br><code>-m</code>：以MB为单位显示内存使用情况；<br><code>-g</code>：以GB为单位显示内存使用情况。<br><code>-o</code>：不显示缓冲区调节列；<br><code>-s&lt;间隔秒数&gt;</code>：持续观察内存使用状况；<br><code>-t</code>：显示内存总和列；<br><code>-V</code>：显示版本信息。</p></blockquote><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free -t    #以总和的形式显示内存的使用信息</span><br><span class="line">free -s 10 #周期性的查询内存使用信息，每10s 执行一次命令</span><br></pre></td></tr></table></figure><p> 显示内存使用情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free -m</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          2016       1973         42          0        163       1497</span><br><span class="line">-/+ buffers/cache:        312       1703</span><br><span class="line">Swap:         4094          0       4094</span><br></pre></td></tr></table></figure><p><strong>第一部分Mem行解释：</strong></p><blockquote><p>total：内存总数；<br>used：已经使用的内存数；<br>free：空闲的内存数；<br>shared：当前已经废弃不用；<br>buffers Buffer：缓存内存数；<br>cached Page：缓存内存数。</p></blockquote><p>关系：total = used + free。</p><p><strong>第二部分(-/+ buffers/cache)解释:</strong></p><blockquote><p>(-buffers/cache) used内存数：第一部分Mem行中的used – buffers – cached<br>(+buffers/cache) free内存数: 第一部分Mem行中的free + buffers + cached</p></blockquote><p>可见（-buffers/cache）反映的是被程序实实在在吃掉的内存，而（+buffers/cache）反映的是可以挪用的内存总数。</p><p><strong>第三部分是指交换分区。</strong></p><p>输出结果的第四行是交换分区SWAP的，也就是我们通常所说的虚拟内存。 区别：第二行(mem)的used/free与第三行(-/+ buffers/cache) used/free的区别。 这两个的区别在于使用的角度来看，第一行是从OS的角度来看，因为对于OS，buffers/cached都是属于被使用，所以他的可用内存是2098428KB，已用内存是30841684KB，其中包括，内核（OS）使用+Application(X, oracle, etc)使用的+buffers+cached。</p><p>第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached 是等于可用的，因为buffer/cached是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被回收。</p><p>所以从应用程序的角度来说，可用内存 = 系统free memory + buffers + cached。 如本机情况的可用内存为：</p><p>18007156=2098428KB+4545340KB+11363424KB。</p><p><strong>接下来解释什么时候内存会被交换，以及按什么方交换：</strong></p><p>当可用内存少于额定值的时候，就会开会进行交换。如何看额定值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/meminfo</span><br><span class="line"></span><br><span class="line">MemTotal:       16140816 kB</span><br><span class="line">MemFree:          816004 kB</span><br><span class="line">MemAvailable:    2913824 kB</span><br><span class="line">Buffers:           17912 kB</span><br><span class="line">Cached:          2239076 kB</span><br><span class="line">SwapCached:            0 kB</span><br><span class="line">Active:         12774804 kB</span><br><span class="line">Inactive:        1594328 kB</span><br><span class="line">Active(anon):   12085544 kB</span><br><span class="line">Inactive(anon):    94572 kB</span><br><span class="line">Active(file):     689260 kB</span><br><span class="line">Inactive(file):  1499756 kB</span><br><span class="line">Unevictable:      116888 kB</span><br><span class="line">Mlocked:          116888 kB</span><br><span class="line">SwapTotal:       8191996 kB</span><br><span class="line">SwapFree:        8191996 kB</span><br><span class="line">Dirty:                56 kB</span><br><span class="line">Writeback:             0 kB</span><br><span class="line">AnonPages:      12229228 kB</span><br><span class="line">Mapped:           117136 kB</span><br><span class="line">Shmem:             58736 kB</span><br><span class="line">Slab:             395568 kB</span><br><span class="line">SReclaimable:     246700 kB</span><br><span class="line">SUnreclaim:       148868 kB</span><br><span class="line">KernelStack:       30496 kB</span><br><span class="line">PageTables:       165104 kB</span><br><span class="line">NFS_Unstable:          0 kB</span><br><span class="line">Bounce:                0 kB</span><br><span class="line">WritebackTmp:          0 kB</span><br><span class="line">CommitLimit:    16262404 kB</span><br><span class="line">Committed_AS:   27698600 kB</span><br><span class="line">VmallocTotal:   34359738367 kB</span><br><span class="line">VmallocUsed:      311072 kB</span><br><span class="line">VmallocChunk:   34350899200 kB</span><br><span class="line">HardwareCorrupted:     0 kB</span><br><span class="line">AnonHugePages:   3104768 kB</span><br><span class="line">HugePages_Total:       0</span><br><span class="line">HugePages_Free:        0</span><br><span class="line">HugePages_Rsvd:        0</span><br><span class="line">HugePages_Surp:        0</span><br><span class="line">Hugepagesize:       2048 kB</span><br><span class="line">DirectMap4k:      225536 kB</span><br><span class="line">DirectMap2M:    13279232 kB</span><br><span class="line">DirectMap1G:     5242880 kB</span><br></pre></td></tr></table></figure><p>交换将通过三个途径来减少系统中使用的物理页面的个数：　</p><ol><li>减少缓冲与页面cache的大小，</li><li>将系统V类型的内存页面交换出去，　</li><li>换出或者丢弃页面。(Application占用的内存页，也就是物理内存不足）。</li></ol><p>事实上，少量地使用swap是不会影响到系统性能的。</p><p><strong>那buffers和cached都是缓存，两者有什么区别呢？</strong></p><p>为了提高磁盘存取效率，Linux做了一些精心的设计，除了对dentry进行缓存（用于VFS，加速文件路径名到inode的转换），还采取了两种主要Cache方式：</p><p><code>Buffer Cache</code>和<code>Page Cache</code>。前者针对磁盘块的读写，后者针对文件inode的读写。这些Cache有效缩短了I/O系统调用（比如read，write，getdents）的时间。 磁盘的操作有逻辑级（文件系统）和物理级（磁盘块），这两种Cache就是分别缓存逻辑和物理级数据的。</p><p>Page cache实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到page cache。文件的逻辑层需要映射到实际的物理磁盘，这种映射关系由文件系统来完成。当page cache的数据需要刷新时，page cache中的数据交给buffer cache，因为Buffer Cache就是缓存磁盘块的。但是这种处理在2.6版本的内核之后就变的很简单了，没有真正意义上的cache操作。</p><p>Buffer cache是针对磁盘块的缓存，也就是在没有文件系统的情况下，直接对磁盘进行操作的数据会缓存到buffer cache中，例如，文件系统的元数据都会缓存到buffer cache中。</p><p>简单说来，<strong>page cache用来缓存文件数据，buffer cache用来缓存磁盘数据</strong>。在有文件系统的情况下，对文件操作，那么数据会缓存到page cache，如果直接采用dd等工具对磁盘进行读写，那么数据会缓存到buffer cache。</p><p>所以我们看linux，只要不用swap的交换空间，就不用担心自己的内存太少。如果常常swap用很多，可能你就要考虑加物理内存了。这也是linux看内存是否够用的标准。</p><p>如果是应用服务器的话，一般只看第二行，（+buffers/cache），即对应用程序来说free的内存太少了，也是该考虑优化程序或加内存了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp内存管理</title>
      <link href="/blogs/66f88466.html"/>
      <url>/blogs/66f88466.html</url>
      
        <content type="html"><![CDATA[<h1 id="primitives"><a href="#primitives" class="headerlink" title="primitives"></a>primitives</h1><h2 id="C-应用程序"><a href="#C-应用程序" class="headerlink" title="C++应用程序"></a>C++应用程序</h2><p>进行内存分配时的方法：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125225828744.png" alt="image-20231125225828744" style="zoom: 67%;"></p><h2 id="C-memory-primitives"><a href="#C-memory-primitives" class="headerlink" title="C++ memory primitives"></a>C++ memory primitives</h2><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125230000926.png" alt="image-20231125230000926" style="zoom: 50%;"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* p1 = <span class="built_in">malloc</span>(<span class="number">512</span>);<span class="comment">//512bytes</span></span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line">complex&lt;<span class="type">int</span>&gt;* p2 = <span class="keyword">new</span> comple&lt;<span class="type">int</span>&gt;;<span class="comment">//one object</span></span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* p3 = ::<span class="keyword">operator</span> <span class="built_in">new</span>(<span class="number">512</span>);<span class="comment">//512bytes</span></span><br><span class="line">::<span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(p3)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下使用C++标准库提供的allocators.</span></span><br><span class="line"><span class="comment">//其接口虽有标准规格,但实现厂商并未完全遵守;下面三者形式略异:</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _MSC_VER</span></span><br><span class="line">  <span class="comment">//以下两函数都是non-static,定要通过object调用.以下分配3个ints.</span></span><br><span class="line">  <span class="type">int</span>* p4 = <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">3</span>, (<span class="type">int</span>*)<span class="number">0</span>);<span class="comment">//(int*)0无用</span></span><br><span class="line">  <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>(p4,<span class="number">3</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __BORLANDC__</span></span><br><span class="line">  <span class="comment">//以下两函数都是non-static,定要通过object调用.以下分配5个ints.</span></span><br><span class="line">  <span class="type">int</span>* p4 = <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>(p4, <span class="number">5</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__  <span class="comment">//2.9版</span></span></span><br><span class="line">  <span class="comment">//以下两函数都是static,可通过全名调用.以下分配512bytes.</span></span><br><span class="line">  <span class="type">void</span>* p4 = alloc::<span class="built_in">allocate</span>(<span class="number">512</span>);</span><br><span class="line">  alloc::<span class="built_in">deallocate</span>(p4, <span class="number">512</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __GNUC__  <span class="comment">//4.9版</span></span></span><br><span class="line">  <span class="comment">//以下两函数都是non-static,定要通过object调用.以下分配7个ints.</span></span><br><span class="line">  <span class="type">void</span>* p4 = <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">7</span>);</span><br><span class="line">  <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>((<span class="type">int</span>*)p4,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//以下两函数都是non-static,定要通过object调用.以下分配9个ints.</span></span><br><span class="line">  <span class="type">void</span>* p5 = __gnu_cxx::__pool_alloc&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">9</span>);</span><br><span class="line">  __gnu_cxx::__pool_alloc&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>((<span class="type">int</span>*)p5,<span class="number">9</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="new-expression"><a href="#new-expression" class="headerlink" title="new expression"></a>new expression</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> <span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>编译器将转为如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Complex *pc;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">void</span>* mem = <span class="keyword">operator</span> <span class="built_in">new</span>(<span class="built_in">sizeof</span> (Complex));  <span class="comment">//allocate;operator new函数里面调用的是malloc().</span></span><br><span class="line">    pc = <span class="built_in">static_cast</span>&lt;Complex*&gt;(mem);  <span class="comment">//cast</span></span><br><span class="line">    pc -&gt; Complex::<span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//cnstruct;在GNUC不能通过编译,在VC6能通过编译，所以不能直接调用ctor.</span></span><br><span class="line">    <span class="comment">//欲直接调用ctor，可运用placement new: new(p)Complex(1, 2);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(std::bad_alloc)&#123;</span><br><span class="line">    <span class="comment">//若allocation失败就不执行constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="delete-expression"><a href="#delete-expression" class="headerlink" title="delete expression"></a>delete expression</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Complex* pc = <span class="keyword">new</span> <span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> pc;</span><br></pre></td></tr></table></figure><p>编译器将转为如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pc-&gt;~<span class="built_in">Complex</span>();    <span class="comment">//先析构</span></span><br><span class="line"><span class="function"><span class="keyword">operator</span> <span class="title">delete</span><span class="params">(pc)</span></span>;<span class="comment">//然后释放内存;operator delete函数里面调用的是free()</span></span><br></pre></td></tr></table></figure><h2 id="array-new-array-delete"><a href="#array-new-array-delete" class="headerlink" title="array new, array delete"></a>array new, array delete</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Complex* pca = <span class="keyword">new</span> Complex[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//唤起三次ctor</span></span><br><span class="line"><span class="comment">//无法藉由参数给予初值</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span>[] pca;<span class="comment">//唤起3次dtor</span></span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125232816181.png" alt="image-20231125232816181" style="zoom:50%;"></p><p>没对每个object调用dtor，有什么影响？</p><ul><li>对<code>class without pointer membe</code>r可能没影响</li><li>对<code>class with pointer member</code>通常有影响</li></ul><h2 id="placement-new"><a href="#placement-new" class="headerlink" title="placement new"></a>placement new</h2><ul><li>placement new允许我们将object建构于allocated memory中。</li><li>没有所谓placement delete，因为placement new<code>根本没分配memory</code>。亦或称呼与placement new对应的operator delete为 placement delete。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="type">char</span>* buf = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">sizeof</span>(Complex)*<span class="number">3</span>];</span><br><span class="line">Complex* pc = <span class="built_in">new</span>(buf)<span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">2</span>);<span class="comment">//编译器将这行转为的代码如下</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">delete</span> [] buf;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Complex *pc;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">void</span>* mem = <span class="keyword">operator</span> <span class="built_in">new</span>(<span class="built_in">sizeof</span> (Complex), buf);</span><br><span class="line">    pc = <span class="built_in">static_cast</span>&lt;Complex*&gt;(mem);  <span class="comment">//cast</span></span><br><span class="line">    pc -&gt; Complex::<span class="built_in">Complex</span>(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//cnstruct;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">catch</span>(std::bad_alloc)&#123;</span><br><span class="line">    <span class="comment">//若allocation失败就不执行constructor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span>, <span class="type">void</span>* loc)</span></span></span><br><span class="line"><span class="function"></span>&#123;  <span class="keyword">return</span> loc;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125235236672.png" alt="image-20231125235236672"></p><p>注意：冠以”placement new“，或指<code>new(p)</code>，或指<code>::operator new(size, void*)</code>。</p><h2 id="重载new-和delete"><a href="#重载new-和delete" class="headerlink" title="重载new()和delete()"></a>重载new()和delete()</h2><p>我们可以重载class member <code>operator new()</code>，写出多个版本，前提是每一版本的声明都必须有<code>独特的参数列</code>，其中第一参数必须是<code>size_t</code>，其余参数以<code>new</code>所指定的<code>placement arguments</code>为初值。出现于<code>new (...)</code>小括号内的便是所谓placement arguments。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo* pf = <span class="built_in">new</span>(<span class="number">300</span>,<span class="string">&#x27;c&#x27;</span>) Foo;</span><br></pre></td></tr></table></figure><p>我们也可以重载class member <code>operator delete()</code>（放置操作符删除），写出多个版本。但它们绝不会被<code>delete</code>调用。只有当<code>new</code>所调用的ctor抛出exception，才会调用这些重载版的<code>operator delete()</code>。它只可能这样被调用，主要用来归还<code>未能完全创建成功的object</code>所占用的memory。</p><p>重载placement new，需为它搭配各个与之对应的placement delet。当<code>ctor发出异常</code>，对应的operator（placement）delete就会被调用。其用途是释放对应的placement new分配所得的memory。</p><p>即使operator delete(…)未能一一对应于operator new(….)，也不会出现任何报错。意思是：放弃处理ctor发出的异常。</p><h2 id="basic-string使用new-extra-扩充申请量"><a href="#basic-string使用new-extra-扩充申请量" class="headerlink" title="basic_string使用new(extra)扩充申请量"></a>basic_string使用new(<em>extra</em>)扩充申请量</h2><p>string用的是class basic_string，basic_string内对operator new和operator delete进行了重载。</p><h2 id="static-allocator"><a href="#static-allocator" class="headerlink" title="static allocator"></a>static allocator</h2><p>当你受困于必须为不同的classes重写一遍几乎相同的member operator new和member operator delete时，应该有方法将一个<code>总是分配特定尺寸之区块</code>的memory allocator概念包装起来，使它容易<code>被重复使用</code>。以下展示一种做法，每个allocator object都是个分配器，它体内维护一个free- lists；不同的allocator objects维护不同的free-lists。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">allocator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">obj</span>&#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">obj</span>* next;<span class="comment">//嵌入式指针</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span>* <span class="title">allocate</span><span class="params">(<span class="type">size_t</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">deallocate</span><span class="params">(<span class="type">void</span>*, <span class="type">size_t</span>)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    obj* freeStore = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> CHUNK = <span class="number">20</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其它类（使用allocator分配内存时）每次创建一个对象时（对象的大小为浅蓝色区块），都会有一个next指针：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231126180500745.png" alt="image-20231126180500745"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>* <span class="title">allocator::allocate</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    obj* p;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!freeStore)&#123;</span><br><span class="line">        <span class="comment">//linked list为空,于是申请一大块</span></span><br><span class="line">        <span class="type">size_t</span> chunk = CHUNK*size;</span><br><span class="line">        freeStore = p = (obj*)<span class="built_in">malloc</span>(chunk);<span class="comment">//①</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将分配得来的一大块当做linked list般,小块小块串接起来</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (CHUNK -  <span class="number">1</span>); ++ i)&#123;</span><br><span class="line">            p -&gt; next = (obj*)((<span class="type">char</span>*)p + size);</span><br><span class="line">            p = p -&gt; next;</span><br><span class="line">        &#125;</span><br><span class="line">        p -&gt; next = <span class="literal">nullptr</span>;<span class="comment">//last</span></span><br><span class="line">    &#125;</span><br><span class="line">    p = freeStore;</span><br><span class="line">    freeStore = freeStore -&gt; next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标号①执行完之后freeStore指针指向：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231126220843663.png" alt="image-20231126220843663"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">allocator::deallocate</span><span class="params">(<span class="type">void</span>* p, <span class="type">size_t</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将*p收回插入free list前端</span></span><br><span class="line">    ((obj*)p) -&gt; next = freeStore;</span><br><span class="line">    freeStore = (obj*)p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="global-allocator-with-multiple-free-lists"><a href="#global-allocator-with-multiple-free-lists" class="headerlink" title="global allocator(with multiple free-lists)"></a>global allocator(with multiple free-lists)</h2><p>将allocator进一步发展为具备16条free-lists，并因此不再以application classes内的static呈现，而是一个global allocator——这就是G2.9的std::alloc的雏形。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231127012942547.png" alt="image-20231127012942547"></p><h2 id="new-handler"><a href="#new-handler" class="headerlink" title="new handler"></a>new handler</h2><p>当operator new没能力为你分配出你所申请的memory，会抛出一个std::bad_alloc exception。某些老旧编译器则是返回0——你仍然可以令编译器那么做。</p><p>抛出exception之前会先（不只一次）调用一个<code>可由client指定的handler</code>，以下是new handler的形式和设定方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*new_handler)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">new_handler <span class="title">set_new_handler</span><span class="params">(new_handler p)</span><span class="title">throw</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>设计良好的new handler只有两个选择：</p><ul><li>让更多memory可用</li><li>调用<code>abort()</code>或<code>exit()</code>（山穷水尽时，直接放弃）</li></ul><h1 id="std-allocator"><a href="#std-allocator" class="headerlink" title="std::allocator"></a>std::allocator</h1><p>VC6、BC5、G2.9的<code>allocator</code>只是以::operator new和::operator delete完成allocate()和deallocate()，没有任何特殊设计。</p><p>G2.9容器使用的分配器，不是std::allocator而是<code>std::aloc</code>。</p><p>G4.9标准库中有许多extented allocators，其中<code>__pool_alloc</code>就是G2.9<code>alloc</code>的化身。</p><h2 id="G4-9标准分配器的实现"><a href="#G4-9标准分配器的实现" class="headerlink" title="G4.9标准分配器的实现"></a>G4.9标准分配器的实现</h2><p>G4.9的<code>allocator</code>只是以::operator new和::operator delete完成allocate()和deallocate()，没有任何特殊设计。</p><p><code>__pool_alloc</code>使用该分配器分配内存，不带cookie。</p><h2 id="G2-9-std-alloc运行模式"><a href="#G2-9-std-alloc运行模式" class="headerlink" title="G2.9 std::alloc运行模式"></a>G2.9 std::alloc运行模式</h2><p>16条链表（根指针），每一条间隔8bytes，如果容器发出的需求不为8的倍数，会调整为8的倍数。如果容器每次需求超出128bytes，则交由malloc分配器进行分配。每条链表申请20块（经验值），其实是40块，有20块用来备用，还有一个追加量。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231127165821647.png" alt="image-20231127165821647" style="zoom: 50%;"></p><p>绿色矩形块上面的蓝色矩形块为cookie，最底部也有一个cookie，图中省略了：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231127201906389.png" alt="image-20231127201906389" style="zoom:50%;"></p><p>用户创建的容器由申请的字节数，找到对应的链。若该链为空，先看之前的备用pool是否有余量，如果够一个字节数则拿来用，反之先将pool余量碎片处理（将余量除以8，挂到一个链表上），然后获取新的内存块：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231127203641561.png" alt="image-20231127203641561" style="zoom: 67%;"></p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231127204406971.png" alt="image-20231127204406971" style="zoom:50%;"></p><h3 id="embedded-pointers"><a href="#embedded-pointers" class="headerlink" title="embedded pointers"></a>embedded pointers</h3><p>当客户端获得小区块，获得的即是char*(指向某个union obj)。此时虽然客户端没有诸如LString或ZString之类的信息可得知区块大小，但由于这区块是给object所用，相等于object大小，object ctor自然不会逾份。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231127172127706.png" alt="image-20231127172127706" style="zoom:50%;"></p><p>union可改为<code>struct</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">obj</span>&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="title class_">obj</span>* free_list_link;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj* *p1, *p2;</span><br><span class="line"><span class="comment">//其实为</span></span><br><span class="line">obj** p1;obj* p2;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="title">void</span> <span class="params">(*set_malloc_handler(<span class="type">void</span> (*f)()))</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//等价为:</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*H)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">static</span> H <span class="title">set_malloc_handler</span><span class="params">(H f)</span></span>;</span><br></pre></td></tr></table></figure><p>deallocate()完全没有调用free() or delete：源于其设计上的先天缺陷。</p><h1 id="malloc-free"><a href="#malloc-free" class="headerlink" title="malloc/free"></a>malloc/free</h1><h2 id="VC6内存管理"><a href="#VC6内存管理" class="headerlink" title="VC6内存管理"></a>VC6内存管理</h2><p>malloc和 free 作为 c 语言中的内存申请函数（new是运算符），malloc 实际上依据申请的空间大小，大空间调用操作系统的 API（HeapAlloc()），小空间使用SBH（小于等于1K）。</p><p>SBH 是 Small Block Heap 的缩写，进行<strong>操作系统之上的小区块内存的管理</strong>。在 VC6 中可找到源码实现，升级版本 VC10 中统一使用系统API进行内存申请，SBH 被整合到了操作系统内部。</p><p>malloc与free带来的内存管理是应付小区块的，即SBH（<em>small block heap</em>）。CRT是C run-time library的简称，称为C运行时库。</p><h3 id="区块的合并"><a href="#区块的合并" class="headerlink" title="区块的合并"></a>区块的合并</h3><p>上cookie和下cookie的作用：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231128224356620.png" alt="image-20231128224356620" style="zoom: 50%;"></p><h1 id="loki-allocator"><a href="#loki-allocator" class="headerlink" title="loki::allocator"></a>loki::allocator</h1><h1 id="other-allocators"><a href="#other-allocators" class="headerlink" title="other allocators"></a>other allocators</h1>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++内存管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp面向对象高级编程</title>
      <link href="/blogs/81b624c3.html"/>
      <url>/blogs/81b624c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象高级编程"><a href="#面向对象高级编程" class="headerlink" title="面向对象高级编程"></a>面向对象高级编程</h1><p>基于对象(Object Based)：面对的是<code>单一class</code>的设计</p><p>面向对象(Object Oriented)：面对的是<code>多重classes</code>的设计，classes和classes之间的关系。</p><p>防卫式声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _TypeName_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _TypeName_</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>函数若在class body内定义完成，便自动成为inline候选人。</p><p>在Singleton中，构造函数声明放在private中。</p><p>不改变数据内容，声明常量成员函数，const放在( )后，{ }前。</p><p>参数传递：by reference(to const)。</p><p>相同class的各个objects互为friends(友元)。</p><p>temp object(临时对象)    typename ();</p><p>local object不能return by reference。</p><p>return by reference：<strong>传递者</strong>无需知道<strong>接收者</strong>是以<strong>reference形式</strong>接收。</p><p>如果class带指针，重新写一个拷贝构造和拷贝赋值函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="type">const</span> String&amp; str);</span><br><span class="line">String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str);</span><br></pre></td></tr></table></figure><p><strong>Stack</strong>，是存在于某作用域（scope）的一块内存空间。例如当你调用函数，函数本身即会形成一个stack用来放置它所接收的参数，以及返回地址，以及local object。</p><p>在函数本体（function body）内声明的任何变量，其所使用的内存块都取自上述stack。</p><p><strong>Heap</strong>，或谓system heap，是指由操作系统提供的一块global内存空间，程序可动态分配从其中获得若干区块（blocks）。在它被delete之际结束。</p><p>stack object其声明在作用域<code>结束之际结束</code>。这种作用域内的object，又称为auto object，因为它会被<strong>自动</strong>清理。</p><p>static local objects其生命在作用域<code>结束之后仍然存在</code>，直到整个程序结束。</p><p>global object其生命在<code>整个程序结束之后才结束</code>。你也可以把它视为一种static object，其作用域是<strong>整个程序</strong>。</p><p>new：先分配内存，再调用构造函数。</p><p>delete：先调用析构函数，再释放内存。</p><p>array new一定要搭配array delete。</p><p><code>调用static函数</code>的方式有二：</p><ol><li><p>通过<code>object</code>调用</p></li><li><p>通过<code>class name</code>调用</p></li></ol><h2 id="关系类型"><a href="#关系类型" class="headerlink" title="关系类型"></a>关系类型</h2><h3 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h3><p>Composition（复合），表示has-a。</p><p>deque包含queue的所有用法，而要通过deque来完成queue这个过程可称之为<code>Adapter</code>（改造）。</p><p><code>Composition（复合）</code>关系下的构造和析构：构造由内而外，析构由外而内。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/%25E5%25A4%258D%25E5%2590%2588%25E5%2585%25B3%25E7%25B3%25BB.png" alt="复合关系"></p><p>Container的构造函数首先调用Component的default的构造函数，然后才执行自己。</p><p>Container的析构函数首先执行自己，然后才调用Component的析构函数。</p><h3 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h3><p>Delegation（委托）.Composition by reference.编译防火墙。Handle/Body（pImpl）。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125145915304.png" alt="image-20231125145915304" style="zoom: 80%;"></p><h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>Inheritance（继承），表示is-a。构造由内而外，析构由外而内。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125150424025.png" alt="image-20231125150424025" style="zoom: 67%;"></p><h3 id="Base-amp-Derived"><a href="#Base-amp-Derived" class="headerlink" title="Base &amp; Derived"></a>Base &amp; Derived</h3><p>base class的析构函数必须是virtual，否则会出现undefined behavior。</p><p>Derived的构造函数首先调用Base的default构造函数，然后才执行自己。</p><p>Derived的析构函数首先执行自己，然后才调用Base的析构函数。</p><p>non-virtual函数：你<code>不希望derived class重新定义</code>它。</p><p>virtual函数：你希望derived class重新定义它，且你对它<code>已有默认定义</code>。</p><p>pure virtual函数：你希望derived class<code>一定要重新定义</code>它，你对它<code>没有默认定义</code>。</p><h3 id="Inheritance-Composition"><a href="#Inheritance-Composition" class="headerlink" title="Inheritance+Composition"></a>Inheritance+Composition</h3><p>Inheritance+Composition：构造由内而外，析构由外而内（Base和Component的先后次序根据具体编译器而言）。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125150358607.png" alt="image-20231125150358607" style="zoom:50%;"></p><p>Derived的构造函数首先调用Base的default构造函数，然后调用Component的default构造函数，然后才执行自己。</p><p>Derived的析构函数首先执行自己，然后调用Component的析构函数，然后调用Base的析构函数。</p><h2 id="语法知识"><a href="#语法知识" class="headerlink" title="语法知识"></a>语法知识</h2><p><code>explicit</code>使用的最多场景是用在构造函数前面，用于<code>显示的函数转换</code>。</p><p>pointer-like classes，智能指针 operator*()    operator-&gt;()；迭代器</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231125150625417.png" alt="image-20231125150625417" style="zoom: 50%;"></p><p>function-like classes，所谓仿函数 operator()</p><p>function template，函数模板。编译器会对function template进行实参推导。</p><p>member template，成员模板。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类Derived1-&gt;父类Base1</span></span><br><span class="line">Base1* ptr = <span class="keyword">new</span> Derived1;  <span class="comment">//up-cast</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//智能指针</span></span><br><span class="line">shared_ptr&lt;Base1&gt;<span class="built_in">sptr</span>(<span class="keyword">new</span> Derived1);  <span class="comment">//模拟up-cast</span></span><br></pre></td></tr></table></figure><p>specialization，模板特化。</p><p>partial specialization，模板<strong>偏</strong>特化—<strong>个数</strong>的偏。</p><p>partial specialization，模板<strong>偏</strong>特化—<strong>范围</strong>的偏。</p><p>template template parameter，模板模板参数。</p><p>variadic templates（<em>since C++11</em>），数量不定的模板参数。</p><p>object和其reference的大小相同，地址也相同（全都是假象）。</p><p>reference通常不用于声明变量，而用于参数类型和返回类型的描述。</p><p>以下被视为“same signature”（所以二者不能同时存在）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">double</span> <span class="title">image</span><span class="params">(<span class="type">const</span> <span class="type">double</span>&amp; im)</span> </span>&#123;...&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">image</span><span class="params">(<span class="type">const</span> <span class="type">double</span>  im)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>const是函数签名的一部分。</p><h2 id="对象模型：关于vptr和vtbl"><a href="#对象模型：关于vptr和vtbl" class="headerlink" title="对象模型：关于vptr和vtbl"></a>对象模型：关于vptr和vtbl</h2><p>虚机制：动态绑定的形式。</p><p>1.通过指针来调用；2.指针是up-cast；3.调用的是虚函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么是动态绑定？编译成下面这样，不确定调用什么函数，看p指向</span></span><br><span class="line">(*(p-&gt;vptr)[n])(p);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">(* p-&gt;vptr[n] )(p);</span><br></pre></td></tr></table></figure><p>当成员函数的const和non-const版本同时存在时，const object<code>只会（只能）</code>调用从const版本，non-const object<code>只会（只能）</code>调用non-const版本。</p><p>我们可以重载class member <strong>operator new()</strong>，写出多个版本，前提是每一版本的声明都必须有<strong>独特的参数列</strong>，其中第一参数必须是<strong>size_t</strong>，其余参数以<strong>new</strong>指定的<strong>placement arguments</strong>为初值。出现于<strong>new（……）</strong>小括号内的便是所谓placement arguments。</p><p>我们也可以重载class member <strong>operator delete()</strong>，写出多个版本。但它们绝不会被<strong>delete</strong>调用。<strong>只有当new所调用的ctor抛出exception，才会调用这些重载版的operator delete()</strong>。它只可能这样被调用，主要用来归还未能<strong>完全创建成功</strong>的object所占用的<strong>memory</strong>。</p><p>即使operator delete(…)未能一一对应于operator new(…)，也不会出现任何报错。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++面向对象高级编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp11</title>
      <link href="/blogs/713c1ac0.html"/>
      <url>/blogs/713c1ac0.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="C-Standard之演化"><a href="#C-Standard之演化" class="headerlink" title="C++ Standard之演化"></a>C++ Standard之演化</h2><ul><li>C++ 98（<code>1.0</code>）</li><li>C++ 03（TR1，Technical Report 1）</li><li>C++ 11（<code>2.0</code>）</li><li>C++ 14</li></ul><h2 id="Header-files"><a href="#Header-files" class="headerlink" title="Header files"></a>Header files</h2><p>C++2.0新特性包括<code>语言</code>和<code>标准库</code>两个层面，后者以header files形式呈现。</p><h2 id="确认支持C-11：macro-cplusplus"><a href="#确认支持C-11：macro-cplusplus" class="headerlink" title="确认支持C++11：macro __cplusplus"></a>确认支持C++11：macro __cplusplus</h2><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><h2 id="Variadic-Templates（数量不定的模板参数）"><a href="#Variadic-Templates（数量不定的模板参数）" class="headerlink" title="Variadic Templates（数量不定的模板参数）"></a>Variadic Templates（数量不定的模板参数）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span>  <span class="comment">//处理最后无参数情况(终止条件)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; firstArg, <span class="type">const</span> Types&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; firstArg &lt;&lt; endl;  <span class="comment">//print first argument</span></span><br><span class="line">    <span class="built_in">print</span>(args...);        <span class="comment">//call print() for remaining arguments</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>...</code>就是一个所谓的<code>pack</code>（<code>包</code>）</p><p>用于template parameters，就是template parameters <code>pack</code>（<code>模板参数包</code>）。</p><p>用于function parameters types，就是function parameter types <code>pack</code>（<code>函数参数类型包</code>）。</p><p>用于function parameters，就是function parameters <code>pack</code>（<code>函数参数包</code>）。</p><p>Variadic Templates可以很方便地完成<code>recursive function call</code>和<code>recursive inheritance</code>。</p><h2 id="Spaces-in-Template-Expressions"><a href="#Spaces-in-Template-Expressions" class="headerlink" title="Spaces in Template Expressions"></a>Spaces in Template Expressions</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;list&lt;<span class="type">int</span>&gt;&gt;;  <span class="comment">//OK since C++ 11</span></span><br></pre></td></tr></table></figure><h2 id="nullptr-and-std-nullptr-t"><a href="#nullptr-and-std-nullptr-t" class="headerlink" title="nullptr and std::nullptr_t"></a>nullptr and std::nullptr_t</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">void</span>*)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">0</span>);    <span class="comment">//calls f(int)</span></span><br><span class="line"><span class="built_in">f</span>(<span class="literal">NULL</span>);  <span class="comment">//calls f(int) if NULL is 0,ambiguous otherwise</span></span><br><span class="line"><span class="built_in">f</span>(<span class="literal">nullptr</span>);  <span class="comment">//calls f(void*)</span></span><br></pre></td></tr></table></figure><p>C++11使得<code>nullptr</code>可以代替<code>0</code>或者<code>NULL</code>。</p><p><code>std::nullptr_t</code>在头文件<code>&lt;cstddef&gt;</code>中定义。</p><h2 id="Automatic-Type-Deduction-with-auto"><a href="#Automatic-Type-Deduction-with-auto" class="headerlink" title="Automatic Type Deduction with auto"></a>Automatic Type Deduction with auto</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> i = <span class="number">42</span>;<span class="comment">//i has type int</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">auto</span> d = <span class="built_in">f</span>();<span class="comment">//d has type double</span></span><br></pre></td></tr></table></figure><p>当类型是一个相当长的和/或复杂的表达式时，使用<code>auto</code>特别有用。</p><h2 id="Uniform-Initialization"><a href="#Uniform-Initialization" class="headerlink" title="Uniform Initialization"></a>Uniform Initialization</h2><p>C++11使用<code>&#123; &#125;</code>进行一致性初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> values[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>&#125;;</span><br><span class="line">vector&lt;string&gt; cities&#123;</span><br><span class="line">    <span class="string">&quot;China&quot;</span>,<span class="string">&quot;Berlin&quot;</span>,<span class="string">&quot;New York&quot;</span>,<span class="string">&quot;London&quot;</span>,<span class="string">&quot;Braunschweig&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">complex&lt;<span class="type">double</span>&gt; c&#123;<span class="number">4.0</span>, <span class="number">3.0</span>&#125;;</span><br></pre></td></tr></table></figure><p>其实是利用一个事实：编译器看到{t1, t2… tn} 便做出一个 <code>initializer_list&lt;T&gt;</code>，它关联至一个 <code>array&lt;T,n&gt;</code>。调用函数（例如ctor)）时该 array 内的元素可被编译器分解逐一传给函数。但若函数参数是个<code>initializer_list&lt;T&gt;</code>，调用者却不能给予数个T参数然后以为它们会被自动转为一个<code>initializer_list&lt;T&gt;</code>传入。</p><h2 id="Initializer-Lists"><a href="#Initializer-Lists" class="headerlink" title="Initializer Lists"></a>Initializer Lists</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;    <span class="comment">//i has undefined value</span></span><br><span class="line"><span class="type">int</span> j&#123; &#125;; <span class="comment">//j is initialized by 0</span></span><br><span class="line"><span class="type">int</span>* p;    <span class="comment">//p has undefined value</span></span><br><span class="line"><span class="type">int</span>* q&#123; &#125;;<span class="comment">//q is initialized by nullptr</span></span><br></pre></td></tr></table></figure><p><code>narrowing initializations</code> are <code>not possible with braces</code>（不可能使用大括号进行窄化初始化）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">x1</span><span class="params">(<span class="number">5.3</span>)</span></span>;  <span class="comment">//OK,but:x1 becomes 5</span></span><br><span class="line"><span class="type">int</span> x2 = <span class="number">5.3</span>;  <span class="comment">//OK;but:x2 becomes 5</span></span><br><span class="line"><span class="type">int</span> x3&#123;<span class="number">5.0</span>&#125;;  <span class="comment">//ERROR:narrowing</span></span><br><span class="line"><span class="type">int</span> x4 = &#123;<span class="number">5.3</span>&#125;;  <span class="comment">//ERROR:narrowing</span></span><br></pre></td></tr></table></figure><h3 id="initializer-list-lt-gt"><a href="#initializer-list-lt-gt" class="headerlink" title="initializer_list&lt;&gt;"></a>initializer_list&lt;&gt;</h3><p>C++11提供class template std::initializer_list&lt;&gt;.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">initializer_list者，一定必须也是个<span class="built_in">initializer_list</span>(<span class="keyword">or</span>&#123;...&#125;形式)<span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(std::initializer_list&lt;<span class="type">int</span>&gt; vals)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> p = vals.<span class="built_in">begin</span>(); p != vals.<span class="built_in">end</span>(); ++ p)&#123;<span class="comment">//a list of values</span></span><br><span class="line">        std::cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(&#123;<span class="number">12</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>&#125;);  <span class="comment">//pass a list of values to print()</span></span><br><span class="line"><span class="comment">//传给initializer_list者，一定必须也是个initializer_list(or&#123;...&#125;形式)</span></span><br></pre></td></tr></table></figure><p>如今所有容器都接受指定任意数量的值用于建构或赋值或insert()或assign()；max()和min()也愿意接受任意参数。</p><h2 id="explicit-for-ctors-taking-more-than-one-argument"><a href="#explicit-for-ctors-taking-more-than-one-argument" class="headerlink" title="explicit for ctors taking more than one argument"></a>explicit for ctors taking more than one argument</h2><p>explicit（明确的）只用于ctor前：non explicit one argument才能做隐式转换。</p><h2 id="default-delete"><a href="#default-delete" class="headerlink" title="=default, =delete"></a>=default, =delete</h2><p>如果自行定义了一个ctor，那么编译器就不会再给你一个default ctor。</p><p>如果强制加上=default，就可以重新获得并使用default ctor。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Zoo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Zoo</span>(<span class="type">int</span> i1, <span class="type">int</span> i2):<span class="built_in">d1</span>(i1), <span class="built_in">d2</span>(i2)&#123; &#125;</span><br><span class="line">    <span class="built_in">Zoo</span>(<span class="type">const</span> Zoo&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">    <span class="built_in">Zoo</span>(Zoo&amp;&amp;)=<span class="keyword">default</span>;</span><br><span class="line">    Zoo&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Zoo&amp;)=<span class="keyword">default</span>;</span><br><span class="line">    Zoo&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Zoo&amp;&amp;)=<span class="keyword">delete</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Zoo</span>()&#123; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> d1, d2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>=default</code>；用于Big-Five（构造、拷贝构造、拷贝赋值、移动构造、移动赋值）之外无意义，编译报错。</p><p><code>=delete</code>；可用于任何函数身上。（<code>=0</code>只能用于virtual函数）</p><h3 id="什么时候empty-class不再是-empty呢？"><a href="#什么时候empty-class不再是-empty呢？" class="headerlink" title="什么时候empty class不再是 empty呢？"></a>什么时候empty class不再是 empty呢？</h3><p><code>当C++ 处理过它之后</code>。如果没声明，编译器就会为它声明一个copy ctor、一个 copy assignment operator和一个dtor（都是所谓 synthesized version）。如果你没有声明任何ctor，编译器也会为你声明一个default ctor。所有这些函式都是<code>public</code>且<code>inline</code>。</p><h3 id="这些函式做了什么呢？"><a href="#这些函式做了什么呢？" class="headerlink" title="这些函式做了什么呢？"></a>这些函式做了什么呢？</h3><p>default ctor和dtor主要是<code>给编译器一个地方用来放置藏身幕后的code</code>，像是唤起base classes以及非静态成员的成员和dtors。</p><h2 id="Alias-Template（template-typedef）"><a href="#Alias-Template（template-typedef）" class="headerlink" title="Alias Template（template typedef）"></a>Alias Template（template typedef）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Vec = std::vector&lt;T,MyAlloc&lt;T&gt;&gt;;</span><br><span class="line"><span class="comment">//the term</span></span><br><span class="line">Vec&lt;<span class="type">int</span>&gt; coll;</span><br><span class="line"><span class="comment">//is equivalent to</span></span><br><span class="line">std::vector&lt;<span class="type">int</span>,MyAlloc&lt;<span class="type">int</span>&gt;&gt; coll;</span><br><span class="line"><span class="comment">//使用macro(#define)无法达到相同效果</span></span><br><span class="line"><span class="comment">//使用typedef亦无法达到相同效果，因为typedef是不接受参数的。</span></span><br></pre></td></tr></table></figure><p>有没有template语法能够在模板接受一个template数Container 时，当Container本身又是个class template，能取出Container的template参数？例如，收到一个<code>vector&lt;string&gt;</code>，能够取出其元素类型string？</p><h2 id="template-template-parameter-alias-template"><a href="#template-template-parameter-alias-template" class="headerlink" title="template template parameter + alias template"></a>template template parameter + alias template</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Vec = vector&lt;T, allocator&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Lst = list&lt;T, allocator&lt;T&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> Deq = deque&lt;T, allocator&lt;T&gt;&gt;;</span><br><span class="line"><span class="comment">//不得在function body之内声明</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,</span><br><span class="line">     <span class="keyword">template</span>&lt;<span class="keyword">class</span>&gt;</span><br><span class="line">           <span class="keyword">class</span> <span class="title class_">Container</span></span><br><span class="line">        &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XC1s</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Container&lt;T&gt; c;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">XC1s</span>()&#123;<span class="comment">//constructor</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; SIZE; ++ i)</span><br><span class="line">            c.<span class="built_in">insert</span>(c.<span class="built_in">end</span>(), <span class="built_in">T</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">output_static_data</span>(<span class="built_in">T</span>());</span><br><span class="line">        <span class="function">Container&lt;T&gt; <span class="title">c1</span><span class="params">(c)</span></span>;</span><br><span class="line">        <span class="function">Container&lt;T&gt; <span class="title">c2</span><span class="params">(std::move(c))</span></span>;</span><br><span class="line">        c1.<span class="built_in">swap</span>(c2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">XC1s&lt;MyString, Vec&gt; c1;</span><br><span class="line">XC1s&lt;MyStrNoMove, Vec&gt; c2;</span><br><span class="line"></span><br><span class="line">XC1s&lt;MyString, Lst&gt; c3;</span><br><span class="line">XC1s&lt;MyStrNoMove, Lst&gt; c4;</span><br><span class="line"></span><br><span class="line">XC1s&lt;MyString, Deq&gt; c5;</span><br><span class="line">XC1s&lt;MyStrNoMove, Deq&gt; c6;</span><br></pre></td></tr></table></figure><h2 id="Type-Alias（similar-to-typedef）"><a href="#Type-Alias（similar-to-typedef）" class="headerlink" title="Type Alias（similar to typedef）"></a>Type Alias（similar to typedef）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//typedef void (*func)(int, int);</span></span><br><span class="line"><span class="keyword">using</span> func = <span class="built_in">void</span> (*)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//the name &#x27;func&#x27; now denotes a pointer to function:</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">example</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>&#123;&#125;</span><br><span class="line">func fn = example;</span><br></pre></td></tr></table></figure><p><code>&lt;string&gt;</code>和<code>&lt;string_fwd.h&gt;</code>都有以下typedef：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> basic_string&lt;<span class="type">char</span>&gt; string;</span><br></pre></td></tr></table></figure><h2 id="noexcept"><a href="#noexcept" class="headerlink" title="noexcept"></a>noexcept</h2><p>你需要通知 C++（特别是std::vector）你的<strong>移动构造函数和析构函数不会抛出异常</strong>。然后当vector <code>grows</code>时将调用移动构造函数。<strong>如果构造函数不是noexcept，则std::vector无法使用它</strong>，因为这样它就无法确保标准所要求的异常保证。</p><p><code>growable conatiners</code>（会发生memory reallocation）只有二种：<code>vector</code>和<code>deque</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">char</span>* data;</span><br><span class="line">  <span class="type">size_t</span> len;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//move constructor</span></span><br><span class="line">  <span class="built_in">MyString</span>(MyString&amp;&amp; str) <span class="keyword">noexcept</span></span><br><span class="line">    :_data(str._data),_len(str._len) &#123; ... &#125;</span><br><span class="line">  <span class="comment">//move assignment</span></span><br><span class="line">  MyString&amp; <span class="keyword">operator</span>=(MyString&amp;&amp; str) <span class="keyword">noexcept</span> &#123; ... <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="override"><a href="#override" class="headerlink" title="override"></a>override</h2><p>重写（override）指的是派生类中<code>重新实现</code>基类的虚函数。当一个派生类继承自一个基类，并且定义了与基类中虚函数具有<code>相同签名</code>（即函数名称、参数列表和返回类型相同）的函数时，就说派生类<code>重写</code>了基类的虚函数。如果签名不匹配，编译器会发出错误信息。</p><p>C++ 11提出了关键字override，通过使用override关键字来明确地表示<code>重写某个虚函数</code>，可以提高代码的可读性。重写是实现多态性的关键方式之一。</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>C++11中引入了 final 关键字，它用于<code>修饰类、虚函数和成员函数</code>，表示它们<code>不能被继承或重写</code>。</p><p>final 关键字的作用：为了确保某些代码不被修改或扩展，从而提高代码的可维护性和可读性。</p><h2 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h2><h3 id="used-to-declare-return-types"><a href="#used-to-declare-return-types" class="headerlink" title="used to declare return types"></a>used to declare return types</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T1,<span class="keyword">typename</span> T2&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">add</span><span class="params">(T1 x,T2 y)</span> -&gt; <span class="title">decltype</span><span class="params">(x + y)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="used-to-metaprogramming"><a href="#used-to-metaprogramming" class="headerlink" title="used to metaprogramming"></a>used to metaprogramming</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_decltype</span><span class="params">(T obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map&lt;string,<span class="type">float</span>&gt; coll;</span><br><span class="line">    <span class="keyword">decltype</span>(coll)::value_type elem2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//typedef typename T::iterator iType;</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="title">decltype</span><span class="params">(obj)</span>::iterator iType</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="used-to-pass-the-type-of-a-lambda"><a href="#used-to-pass-the-type-of-a-lambda" class="headerlink" title="used to pass the type of a lambda"></a>used to pass the type of a lambda</h3><p>面对lambda，我们手上往往只有object，没有type。要获得其type就得借助于<code>decltype</code>。</p><h2 id="Lambdas"><a href="#Lambdas" class="headerlink" title="Lambdas"></a>Lambdas</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//call it directly:</span></span><br><span class="line">[]&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello lambda&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;();  <span class="comment">//prints &quot;hello lambda&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//or pass it to objects to get called:</span></span><br><span class="line"><span class="keyword">auto</span> l = []&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello lambda&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">l</span>();  <span class="comment">//prints &quot;hello lambda&quot;</span></span><br></pre></td></tr></table></figure><p>Lambdas通用表达式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...] (...) <span class="keyword">mutable</span> throwSpec -&gt; retType &#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> f=[id] () <span class="keyword">mutable</span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;id: &quot;</span> &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line">    ++ id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">id = <span class="number">42</span>;</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line"><span class="built_in">f</span>();</span><br><span class="line">std::cout &lt;&lt; id &lt;&lt; std::endl;</span><br><span class="line"><span class="comment">/*id: 0</span></span><br><span class="line"><span class="comment">  id: 1</span></span><br><span class="line"><span class="comment">  id: 2</span></span><br><span class="line"><span class="comment">  43</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Variadic-Templates-1"><a href="#Variadic-Templates-1" class="headerlink" title="Variadic Templates 1"></a>Variadic Templates 1</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//②</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span>  <span class="comment">//处理最后无参数情况(终止条件)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//①</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> T&amp; firstArg, <span class="type">const</span> Types&amp;... args)</span><span class="comment">//可用sizeof...(args)求出参数个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; firstArg &lt;&lt; endl;  <span class="comment">//print first argument</span></span><br><span class="line">    <span class="built_in">print</span>(args...);        <span class="comment">//call print() for remaining arguments</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//print(7.5,&quot;hello&quot;,bitset&lt;16&gt;(377),42);</span></span><br><span class="line"><span class="comment">//结果显示:</span></span><br><span class="line"><span class="comment">/*  7.5</span></span><br><span class="line"><span class="comment">  hello</span></span><br><span class="line"><span class="comment">  0000000101111001</span></span><br><span class="line"><span class="comment">  42</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//③</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printX</span><span class="params">(<span class="type">const</span> Types&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>①和③可以并存；①比较特化。</p><h2 id="Variadic-Templates-2"><a href="#Variadic-Templates-2" class="headerlink" title="Variadic Templates 2"></a>Variadic Templates 2</h2><p>使用variadic templates重写printf()：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*s == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(++s) != <span class="string">&#x27;%&#x27;</span>)</span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;invalid format string:missing arguments&quot;</span>);</span><br><span class="line">      std::cout &lt;&lt; *s++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Args&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s,T value,Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(*s)&#123;</span><br><span class="line">        <span class="keyword">if</span> (*s == <span class="string">&#x27;%&#x27;</span> &amp;&amp; *(++s) != <span class="string">&#x27;%&#x27;</span>)&#123;</span><br><span class="line">            std::cout &lt;&lt; value;</span><br><span class="line">            <span class="built_in">printf</span>(++s, args...);<span class="comment">//call even when *s == 0 to detect extra arguments</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        std::cout &lt;&lt; *s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;extra arguments provided to printf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* pi = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%s%p%f\n&quot;</span>,<span class="number">15</span>,<span class="string">&quot;This is Ace.&quot;</span>,pi,<span class="number">3.141592653</span>);</span><br><span class="line"><span class="comment">//打印显示:</span></span><br><span class="line"><span class="comment">/*15 This is Ace. 0x3e4ab8 3.141592653</span></span><br></pre></td></tr></table></figure><h2 id="Variadic-Templates-3"><a href="#Variadic-Templates-3" class="headerlink" title="Variadic Templates 3"></a>Variadic Templates 3</h2><p>递归调用处理的都是参数，使用function template。</p><p>递归继承处理的是类型（type），使用class template。</p><p>用于递归继承，recursive inheritance：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Values&gt; <span class="keyword">class</span> <span class="title class_">tuple</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">class</span> <span class="title class_">tuple</span>&lt;&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tuple</span>&lt;Head, Tail...&gt;</span><br><span class="line">:<span class="keyword">private</span> tuple&lt;Tail...&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> tuple&lt;Tail...&gt; inherited;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Head m_head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">tuple</span>() &#123; &#125;</span><br><span class="line">  <span class="built_in">tuple</span>(Head v, Tail... vtail)</span><br><span class="line">    :<span class="built_in">m_head</span>(v), <span class="built_in">inherited</span>(vtail...) &#123; &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">auto</span> <span class="title">head</span><span class="params">()</span>-&gt;<span class="title">decltype</span><span class="params">(m_head)</span> </span>&#123;<span class="keyword">return</span> m_head; &#125;<span class="comment">//①</span></span><br><span class="line">  <span class="function">inherited&amp; <span class="title">tail</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Values&gt; <span class="keyword">class</span> <span class="title class_">tuple</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">class</span> <span class="title class_">tuple</span>&lt;&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tuple</span>&lt;Head, Tail...&gt;</span><br><span class="line">:<span class="keyword">private</span> tuple&lt;Tail...&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> tuple&lt;Tail...&gt; inherited;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">tuple</span>() &#123; &#125;</span><br><span class="line">  <span class="built_in">tuple</span>(Head v, Tail... vtail)</span><br><span class="line">    :<span class="built_in">m_head</span>(v), <span class="built_in">inherited</span>(vtail...) &#123; &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="function">Head <span class="title">head</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_head; &#125;<span class="comment">//②</span></span><br><span class="line">  <span class="function">inherited&amp; <span class="title">tail</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  Head m_head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">float</span>, string&gt; <span class="title">t</span><span class="params">(<span class="number">41</span>, <span class="number">6.3</span>, <span class="string">&quot;nico&quot;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(t) &lt;&lt; endl;<span class="comment">//12</span></span><br><span class="line">cout &lt;&lt; t.<span class="built_in">head</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; t.<span class="built_in">tail</span>().<span class="built_in">head</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; t.<span class="built_in">tail</span>().<span class="built_in">tail</span>().<span class="built_in">head</span>() &lt;&lt; endl;</span><br><span class="line"><span class="comment">//打印输出：</span></span><br><span class="line"><span class="comment">/*41</span></span><br><span class="line"><span class="comment">  6.3</span></span><br><span class="line"><span class="comment">  nico</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Variadic-Templates-4"><a href="#Variadic-Templates-4" class="headerlink" title="Variadic Templates 4"></a>Variadic Templates 4</h2><p>用于递归复合，recursive composition：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Values&gt; <span class="keyword">class</span> <span class="title class_">tup</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="keyword">class</span> <span class="title class_">tup</span>&lt;&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Head, <span class="keyword">typename</span>... Tail&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">tup</span>&lt;Head, Tail...&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">typedef</span> tup&lt;Tail...&gt; composited;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    composited m_tail;</span><br><span class="line">  Head m_head;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">tup</span>() &#123; &#125;</span><br><span class="line">  <span class="built_in">tup</span>(Head v, Tail... vtail)</span><br><span class="line">    :<span class="built_in">m_head</span>(v), <span class="built_in">m_tail</span>(vtail...) &#123; &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="function">Head <span class="title">head</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_head; &#125;</span><br><span class="line">  <span class="function">composited&amp; <span class="title">tail</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_tail; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">float</span>, string&gt; <span class="title">it1</span><span class="params">(<span class="number">41</span>, <span class="number">6.3</span>, <span class="string">&quot;nico&quot;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(it1) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; it1.<span class="built_in">head</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; it1.<span class="built_in">tail</span>().<span class="built_in">head</span>() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; it1.<span class="built_in">tail</span>().<span class="built_in">tail</span>().<span class="built_in">head</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="Rvalue-references"><a href="#Rvalue-references" class="headerlink" title="Rvalue references"></a>Rvalue references</h2><p>Lvalue：可以出现于operator= 左侧者</p><p>Rvalue：只能出现于operator= 右侧者</p><p>临时对象是一个右值。</p><p>当Rvalue出现于operator=（copy assignment）右侧，我们认为对其资源进行偷取/搬移（move）而非拷贝（copy）是可以的，是合理的。那么：</p><ol><li>必须有语法让我们在<code>调用端</code>告诉编译器“这是个Rvalue”。</li><li>必须有语法让我们在<code>被调用端</code>写出一个专门处理Rvalue的所谓move assignment函数。</li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpp设计模式</title>
      <link href="/blogs/1155b381.html"/>
      <url>/blogs/1155b381.html</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h1><h2 id="深入理解面向对象"><a href="#深入理解面向对象" class="headerlink" title="深入理解面向对象"></a>深入理解面向对象</h2><p>向下：深入理解三大面向对象机制</p><ul><li>封装，隐藏内部实现</li><li>继承，复用现有代码</li><li>多态，改写对象行为</li></ul><p>向上：深刻把握面向对象机制所带来的抽象意义，理解如何使用这些机制来表达现实世界，掌握什么是“好的面向对象设计”。</p><p>解决复杂性：</p><ul><li><strong>分解</strong><ul><li>分而治之，将大问题分解为多个小问题，将复杂问题分解为多个简单问题。</li></ul></li><li><strong>抽象</strong><ul><li>由于不能掌握全部的复杂对象，选择忽视它的非本质细节，而去处理泛化和理想化了的对象模型。</li></ul></li></ul><h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><h2 id="重新认识面向对象"><a href="#重新认识面向对象" class="headerlink" title="重新认识面向对象"></a>重新认识面向对象</h2><ul><li><p>理解隔离变化</p><ul><li>从<code>宏观层面</code>来看，面向对象的构建方式更能适应软件的变化，能将变化所带来的影响减为最小</li></ul></li><li><p>各司其职</p><ul><li>从<code>微观层面</code>来看，面向对象的方式更强调各个类的“责任”</li><li>由于需求变化导致的新增类型不应该影响原来类型的实现——是所谓<code>各负其责</code></li></ul></li><li>对象是什么?<ul><li>从<code>语言实现</code>层面来看，对象封装了代码和数据</li><li>从<code>规格层面</code>讲，对象是一系列可被使用的公共接口</li><li>从<code>概念层面</code>讲，对象是某种拥有责任的抽象</li></ul></li></ul><h2 id="面向对象设计原则-1"><a href="#面向对象设计原则-1" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><p><code>依赖倒置原则</code>（<em>DIP</em>）：</p><ul><li>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）</li><li>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象（稳定）</li></ul><p><code>开放封闭原则</code>（<em>OCP</em>）：</p><ul><li>对扩展开放，对更改封闭</li><li>类模块应该是可扩展的，但是不可修改</li></ul><p><code>单一职责原则</code>（<em>SRP</em>）：</p><ul><li>一个类应该仅有一个引起它变化的原因</li><li>变化的方向隐含着类的责任</li></ul><p><code>Liskov替换原则</code>（<em>LSP</em>）：</p><ul><li>子类必须能够替换它们的基类（IS-A）</li><li>继承表达类型抽象</li></ul><p><code>接口隔离原则</code>（<em>ISP</em>）：</p><ul><li>不应该强迫客户程序依赖它们不用的方法</li><li>接口应该小而完备</li></ul><p><code>优先使用对象组合，而不是类继承</code>：</p><ul><li>类继承通常为”白箱复用“，对象组合通常为”黑箱复用“</li><li>继承在某种程度上破坏了封装性，子类父类耦合度高</li><li>而对象组合则只要求被组合的对象具有良好定义的接口，耦合度低</li></ul><p><code>封装变化点</code>：</p><ul><li>使用封装来创建对象之间的分界层，让设计者可以在分界层的一侧进行修改，而不会对令另一侧产生不良的影响，从而实现层次间的松耦合</li></ul><p><code>针对接口编程，而不是针对实现编程</code>：</p><ul><li>不将变量类型声明为某个特定的具体类，而是声明为某个接口</li><li>客户程序无需获知对象的具体类型，只需要知道对象所具有的接口</li><li>减少系统中各部分的依赖关系，从而实现“高聚内、松耦合”的类型设计方案</li></ul><h1 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h1><h2 id="“组件协作”模式"><a href="#“组件协作”模式" class="headerlink" title="“组件协作”模式"></a>“组件协作”模式</h2><p>​    <code>框架</code>与<code>应用程序</code>的划分，”组件协作”模式通过<code>晚期绑定</code>，来实现框架与应用程序之间的<code>松耦合</code>，是二者之间协作时常用的模式。</p><p>典序模式：</p><ul><li><strong>Template Method</strong></li><li><strong>Strategy</strong></li><li><strong>Observer/Event</strong></li></ul><h3 id="Template-Method模式"><a href="#Template-Method模式" class="headerlink" title="Template Method模式"></a>Template Method模式</h3><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>​    在软件构建过程中，对于某一项任务，它常常有稳定的整体操作结构，但各个子步骤却有很多改变的需求，或者由于固有的原因（比如框架与应用之间的关系）而无法和任务的整体结构同时实现。</p><h4 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h4><p>​    定义一个操作中的算法的<code>骨架</code>（稳定），而将一些步骤<code>延迟</code>（变化）到子类中。Template Method使得子类可以不改变（复用）一个算法的结构即可重定义（override重写）该算法的某些特定步骤。</p><h4 id="结构类图"><a href="#结构类图" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120222618841.png" alt="image-20231120222618841"></p><h4 id="要点总结"><a href="#要点总结" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Template Method模式说一种非常<code>基础性</code>的设计模式，在面向对象系统中有着大量的应用。它用最简洁的机制（<code>虚函数的多态性</code>）为很多应用程序框架提供了灵活的<code>扩展点</code>，是代码复用的方面的基本实现结构。</li><li>除了可以灵活应对子步骤的变化外，“不要调用我，让我来调用你” 的<code>反向控制结构</code>是Template Method的典型应用。</li><li>在具体实现方面，被Template Method调用的虚方法可以具有实现，也可以没有任何实现（抽象方法、纯虚方法），但一般推荐将它们设置为<code>protected</code>方法。</li></ul><h3 id="Strategy策略模式"><a href="#Strategy策略模式" class="headerlink" title="Strategy策略模式"></a>Strategy策略模式</h3><h4 id="动机-1"><a href="#动机-1" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，某些对象使用的算法可能多种多样，经常改变，如果将这些算法都编码到对象中，将会使对象变得异常复杂，而且有时候支持不使用的算法也是一个性能负担。</p><h4 id="模式定义-1"><a href="#模式定义-1" class="headerlink" title="模式定义"></a>模式定义</h4><p>定义一系列算法，把它们一个个封装起来，并且使它们可互相替换（变化）。该模式使得算法可独立于使用它的客户程序（稳定）而变化（扩展，子类化）。</p><h4 id="结构类图-1"><a href="#结构类图-1" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120222409218.png" alt="image-20231120222409218"></p><h4 id="要点总结-1"><a href="#要点总结-1" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Strategy及其子类为组件提供了一系列可重用的算法，从而可以使得类型在<code>运行时</code>方便地根据需要在各个算法之间进行切换。</li><li>Strategy模式提供了用条件判断语句以外的另一种选择，消除条件判断语句，就是在<code>解耦合</code>。含有<code>许多条件判断语句</code>的代码通常都需要Strategy模式。</li><li>如果Strategy对象没有实例变量，那么各个上下文可以共享同一个Strategy对象，从而节省对象开销。</li></ul><h3 id="Observer观察者模式"><a href="#Observer观察者模式" class="headerlink" title="Observer观察者模式"></a>Observer观察者模式</h3><h4 id="动机-2"><a href="#动机-2" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，我们需要为某些对象建立一种“通知依赖关系”——一个对象（目标对象）的状态发生改变，<code>所有的依赖对象</code>（观察者对象）都将得到<code>通知</code>。如果这样的依赖关系过于紧密，将使软件不能很好地抵御变化。</p><p>使用面向对象技术，可以将这种依赖关系弱化，并形成一种稳定的依赖关系。从而实现软件体系结构的<code>松耦合</code>。</p><h4 id="模式定义-2"><a href="#模式定义-2" class="headerlink" title="模式定义"></a>模式定义</h4><p>定义对象间的一种<code>一对多</code>（变化）的依赖关系，以便当<code>一个对象</code>（<em>Subject</em>）的状态发生改变时，<code>所有依赖于它的对象</code>都得到通知并自动更新。</p><h4 id="结构类图-2"><a href="#结构类图-2" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120222300089.png" alt="image-20231120222300089"></p><h4 id="要点总结-2"><a href="#要点总结-2" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>使用面向对象的抽象，Observer模式使得我们可以<code>独立地改变</code>目标与观察者，从而使二者之间的依赖关系达致松耦合。</li><li>目标发送通知时，<code>无需指定观察者</code>，通知（可以携带通知信息作为参数）会自动传播。</li><li>观察者自己决定是否需要订阅通知，目标对象对此一无所知。</li><li>Observer模式是基于事件的UI框架中非常常用的设计模式，也是MVC模式的一个重要组成部分。</li></ul><h2 id="“单一职责”模式"><a href="#“单一职责”模式" class="headerlink" title="“单一职责”模式"></a>“单一职责”模式</h2><p>在软件组件的设计中，如果责任划分的不清晰，使用继承得到的结果往往是随着需求的变化，子类急剧膨胀，同时充斥着重复代码，这时候的关键是划清责任。</p><p>典型模式：</p><ul><li><strong>Decorator</strong></li><li><strong>Bridge</strong></li></ul><h3 id="Decorator装饰模式"><a href="#Decorator装饰模式" class="headerlink" title="Decorator装饰模式"></a>Decorator装饰模式</h3><h4 id="动机-3"><a href="#动机-3" class="headerlink" title="动机"></a>动机</h4><ul><li>在某些情况下我们可能会“过度地使用继承来扩展对象的功能”，由于<code>继承</code>为类型引入的<code>静态特质</code>，使得这种扩展方式缺乏灵活性；并且随着子类的增多（扩展功能的增多），各种子类的组合（扩展功能的组合）会导致更多子类的膨胀。</li></ul><h4 id="模式定义-3"><a href="#模式定义-3" class="headerlink" title="模式定义"></a>模式定义</h4><p><code>动态</code>（组合）地给一个对象增加一些额外的职责。就增加功能而言，Decorator模式比生成子类（继承）更为灵活（<code>消除重复代码</code>&amp;<code>减少子类个数</code>）。</p><h4 id="结构类图-3"><a href="#结构类图-3" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/R3D2TU9_8B_IUS1Y0H0BK%252.png" alt="img"></p><h4 id="要点总结-3"><a href="#要点总结-3" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>通过采用组合而非继承的手法，Decorator模式实现了在运行时动态扩展对象功能的能力，而且可以根据需要扩展多个功能。避免了使用继承带来的“灵活性差”和“多子类衍生问题”。</li><li>Decorator类在接口上表现为<code>is-a Component</code>的<code>继承</code>关系，即 Decorator类继承了Component类所具有的接口。但在实现上又表现为<code>has-a Component</code>的<code>组合</code>关系，即Decorator类又使用了另外一个Component类。</li><li>Decorator模式的目的并非解决“多子类衍生的多继承”问题，Decorator模式应用的要点在于解决<code>“主体类在多个方向上的扩展功能”</code>——是为<code>“装饰”</code>的含义。</li></ul><h3 id="Bridge桥模式"><a href="#Bridge桥模式" class="headerlink" title="Bridge桥模式"></a>Bridge桥模式</h3><h4 id="动机-4"><a href="#动机-4" class="headerlink" title="动机"></a>动机</h4><p>由于某些类型的固有的实现逻辑，使得它们具有两个变化的维度，乃至多个维度的变化。</p><h4 id="模式定义-4"><a href="#模式定义-4" class="headerlink" title="模式定义"></a>模式定义</h4><p>将抽象部分（业务功能）与实现部分（平台实现）分离，使它们都可以独立地变化。</p><h4 id="结构类图-4"><a href="#结构类图-4" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231119233730329.png" alt="image-20231119233730329"></p><h4 id="要点总结-4"><a href="#要点总结-4" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Bridge模式使用“对象间的组合关系”解耦了抽象和实现之间固有的绑定关系，使得抽象和实现可以沿着各自的维度来变化。所谓抽象和实现沿着各自纬度的变化，即“子类化”它们。</li><li>Bridge模式有时候类似于多继承方案，但是多继承方案往往违背单—职责原则（即一个类只有一个变化的原因），复用性比较差。 Bridge模式是比多继承方案更好的解决方法。</li><li>Bridge模式的应用一般在“两个非常强的变化维度”，有时一个类也有多于两个的变化维度，这时可以使用Bridge的扩展模式。</li></ul><h2 id="“对象创建”模式"><a href="#“对象创建”模式" class="headerlink" title="“对象创建”模式"></a>“对象创建”模式</h2><p>通过”对象创建“模式<code>绕开new</code>，来避免对象创建（new）过程中所导致的<code>紧耦合</code>（依赖具体类），从而支持对象创建的稳定。它是接口抽象之后的第一步工作。</p><p>典型模式：</p><ul><li><strong>Factory Method</strong></li><li><strong>Abstract Factory</strong></li><li><strong>Prototype</strong></li><li><strong>Builder</strong></li></ul><h3 id="Factory-Method工厂方法"><a href="#Factory-Method工厂方法" class="headerlink" title="Factory Method工厂方法"></a>Factory Method工厂方法</h3><h4 id="动机-5"><a href="#动机-5" class="headerlink" title="动机"></a>动机</h4><p>在软件系统中，经常面临着创建对象的工作；由于需求的变化，需要创建的对象的具体类型经常变化。</p><h4 id="模式定义-5"><a href="#模式定义-5" class="headerlink" title="模式定义"></a>模式定义</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪个一个类。Factory Method使得一个类的<code>实例化延迟</code>（目的：解耦，手段：虚函数）<code>到子类</code>。</p><h4 id="结构类图-5"><a href="#结构类图-5" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120200340583.png" alt="image-20231120200340583"></p><h4 id="要点总结-5"><a href="#要点总结-5" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Factory Method模式用于隔离类对象的使用者和具体类型之间的耦 合关系。面对一个经常变化的具体类型，紧耦合关系（<em>new</em>）会导致软件的脆弱。</li><li>Factory Method模式通过面向对象的手法，将所要创建的具体对象工作<code>延迟</code>到子类，从而实现一种<code>扩展</code>（而非更改）的策略，较好地解决了这种紧耦合关系。</li><li>Factory Method模式解决<code>“单个对象”</code>的需求变化。缺点在于要求创建<code>方法/参数</code>相同。</li></ul><h3 id="Abstract-Factory抽象工厂"><a href="#Abstract-Factory抽象工厂" class="headerlink" title="Abstract Factory抽象工厂"></a>Abstract Factory抽象工厂</h3><h4 id="动机-6"><a href="#动机-6" class="headerlink" title="动机"></a>动机</h4><p>在软件系统中，经常面临着<code>“一系列相互依赖的对象”</code>的创建工作；同时，由于需求的变化，往往存在<code>更多系列对象</code>的创建工作。</p><h4 id="模式定义-6"><a href="#模式定义-6" class="headerlink" title="模式定义"></a>模式定义</h4><p>提供一个接口，让该接口负责创建一系列“相关或者相互依赖的对象”，无需指定它们具体的类。</p><h4 id="结构类图-6"><a href="#结构类图-6" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120205243838.png" alt="image-20231120205243838"></p><h4 id="要点总结-6"><a href="#要点总结-6" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>如果没有应对“多系列对象构建”的需求变化,则没有必要使用Abstract Factory模式，这时候使用简单的工厂完全可以。</li><li><code>“系列对象”</code>指的是在某一特定系列下的对象之间有相互依赖、或作用的关系。不同系列的对象之间不能相互依赖。</li><li>Abstract Factory模式主要在于应对<code>“新系列”</code>的需求变动。其缺点在于难以应对<code>“新对象”</code>的需求变动。</li></ul><h3 id="Prototype原型模式"><a href="#Prototype原型模式" class="headerlink" title="Prototype原型模式"></a>Prototype原型模式</h3><h4 id="动机-7"><a href="#动机-7" class="headerlink" title="动机"></a>动机</h4><p>在软件系统中，经常面临着<code>“某些结构复杂的对象”</code>的创建工作；由于需求的变化，这些对象经常面临着剧烈的变化，但是它们却拥有比较稳定一致的接口。</p><h4 id="模式定义-7"><a href="#模式定义-7" class="headerlink" title="模式定义"></a>模式定义</h4><p>使用<code>原型实例</code>指定创建对象的种类，然后通过<code>拷贝</code>（深拷贝）这些原型来创建新的对象。</p><h4 id="结构类图-7"><a href="#结构类图-7" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120211241207.png" alt="image-20231120211241207"></p><h4 id="要点总结-7"><a href="#要点总结-7" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Prototype模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些“易变类”拥有<code>“稳定的接口”</code>。</li><li>Prototype模式对于“如何创建易变类的实体对象”采用<code>“原型克隆”</code>的方法来做，它使得我们可以非常灵活地动态创建“拥有某些稳定接口”的新对象——所需工作仅仅是注册一个新类的对象（即原型）， 然后在任何需要的地方Clone。</li><li>Prototype模式中的<code>Clone方法</code>可以利用某些框架中的<code>序列化</code>来实现<code>深拷贝</code>。</li></ul><h3 id="Builder构建器（不常用）"><a href="#Builder构建器（不常用）" class="headerlink" title="Builder构建器（不常用）"></a>Builder构建器（不常用）</h3><h4 id="动机-8"><a href="#动机-8" class="headerlink" title="动机"></a>动机</h4><p>在软件系统中，有时候面临着<code>“一个复杂对象”</code>的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们<code>组合</code>在一起的算法却相对稳定。</p><h4 id="模式定义-8"><a href="#模式定义-8" class="headerlink" title="模式定义"></a>模式定义</h4><p>将一个复杂对象的<code>构建</code>与其表示相分离，使得同样的构建过程（稳定）可以创建不同的表示（变化）。</p><h4 id="结构类图-8"><a href="#结构类图-8" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120214135747.png" alt="image-20231120214135747"></p><h4 id="要点总结-8"><a href="#要点总结-8" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Builder 模式主要用于“分步骤构建一个复杂的对象”。在这其中“分步骤”是一个稳定的算法，而复杂对象的各个部分则经常变化。</li><li>变化点在哪里，封装哪里—— Builder模式主要在于应对“复杂对象各个部分”的频繁需求变动。其缺点在于难以应对“分步骤构建算法”的需求变动。</li><li>在Builder模式中，要注意不同语言中构造器内<code>调用虚函数</code>的差别 (C++ vs C#)。</li></ul><h2 id="“对象性能”模式"><a href="#“对象性能”模式" class="headerlink" title="“对象性能”模式"></a>“对象性能”模式</h2><p>面向对象很好地解决了“抽象”的问题，但是必不可免地要付出一定的代价。对于通常情况来讲，面向对象的成本大都可以忽略不计。但是<code>某些情况</code>，面向对象所带来的成本必须谨慎处理。</p><p>典型模式：</p><ul><li><strong>Singleton</strong></li><li><strong>Flyweight</strong></li></ul><h3 id="Singleton单件模式"><a href="#Singleton单件模式" class="headerlink" title="Singleton单件模式"></a>Singleton单件模式</h3><h4 id="动机-9"><a href="#动机-9" class="headerlink" title="动机"></a>动机</h4><p>在软件系统中，经常有这样一些特殊的类，必须保证它们在系统中<code>只存在一个实例</code>，才能确保它们的逻辑正确性、以及良好的效率。</p><h4 id="模式定义-9"><a href="#模式定义-9" class="headerlink" title="模式定义"></a>模式定义</h4><p>保证一个类仅有一个实例，并提供一个该实例的全局访问点。</p><h4 id="结构类图-9"><a href="#结构类图-9" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231120221457163.png" alt="image-20231120221457163"></p><h4 id="要点总结-9"><a href="#要点总结-9" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Singleton模式中的实例构造器可以设置为protected以允许子类派生。</li><li>Singleton模式一般<code>不要支持拷贝构造函数</code>和<code>Clone接口</code>，因为这有可能导致多个对象实例，与Singleton模式的初衷违背。</li><li>如何实现多线程环境下安全的Singleton? 注意对<code>双检查锁</code>的正确实现。</li></ul><h3 id="Flyweight享元模式"><a href="#Flyweight享元模式" class="headerlink" title="Flyweight享元模式"></a>Flyweight享元模式</h3><h4 id="动机-10"><a href="#动机-10" class="headerlink" title="动机"></a>动机</h4><p>在软件系统采用纯粹对象方案的问题在于大量细粒度的对象会很块充斥在系统中，从而带来很高的运行时代价——主要指内存需求方面的代价。</p><h4 id="模式定义-10"><a href="#模式定义-10" class="headerlink" title="模式定义"></a>模式定义</h4><p>运用<code>共享</code>技术有效地支持<code>大量</code>细粒度的对象。</p><h4 id="结构类图-10"><a href="#结构类图-10" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121173601268.png" alt="image-20231121173601268"></p><h4 id="要点总结-10"><a href="#要点总结-10" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>面向对象很好地解决了抽象性的问题，但是作为一个运行在机器中的程序实体，我们需要考虑对象的代价问题。Flyweight主要解决面向对象的<code>代价问题</code>，一般不触及面向对象的抽象性问题。</li><li>Flyweight采用对象共享的做法来降低系统中对象的个数，从而降低细粒度对象给系统带来的内存压力。在具体实现方面，要注意对象<code>状态</code>（最好是只读）的处理。</li><li>对象的数量太大从而导致对象内存开销加大——什么样的数量才算大？这需要我们仔细的根据具体应用情况进行<code>评估</code>，而不能<code>凭空臆断</code>。</li></ul><h2 id="“接口隔离”模式"><a href="#“接口隔离”模式" class="headerlink" title="“接口隔离”模式"></a>“接口隔离”模式</h2><p>在组件构建过程中，某些接口之间直接的依赖常常会带来很多问题、甚至根本无法实现。采用添加一层<code>间接</code>（稳定）接口，来隔离本来互相紧密关联的接口是一种常见的解决方案。</p><p>典型模式：</p><ul><li><strong>Façade</strong></li><li><strong>Proxy</strong></li><li><strong>Adapter</strong></li><li><strong>Mediator</strong></li></ul><h3 id="Facade门面模式"><a href="#Facade门面模式" class="headerlink" title="Façade门面模式"></a>Façade门面模式</h3><h4 id="系统间耦合的复杂度"><a href="#系统间耦合的复杂度" class="headerlink" title="系统间耦合的复杂度"></a>系统间耦合的复杂度</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121181251775.png" alt="image-20231121181251775"></p><h4 id="动机-11"><a href="#动机-11" class="headerlink" title="动机"></a>动机</h4><p>上述A方案的问题在于组件的客户和组件各种复杂的<code>子系统</code>有了<code>过多的耦合</code>，随着外部客户程序和各子系统的演化，这种过多的耦合面临很多变化的挑战。</p><h4 id="模式定义-11"><a href="#模式定义-11" class="headerlink" title="模式定义"></a>模式定义</h4><p>为子系统中的一组接口提供一个<code>一致</code>（稳定）的界面，Façade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用（<code>复用</code>）。</p><h4 id="结构类图-11"><a href="#结构类图-11" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121184512984.png" alt="image-20231121184512984"></p><h4 id="要点总结-11"><a href="#要点总结-11" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>从客户程序的角度来看，Façade模式简化了整个组件系统的接口，对于组件内部与外部客户程序来说，达到了一种<code>“解耦”</code>的效果—— 内部子系统的任何变化不会影响到Façade接口的变化。</li><li>Façade设计模式更注重从<code>架构</code>的层次去看整个系统，而不是单个类的层次。Façade很多时候更是一种架构设计模式。</li><li>Façade设计模式并非一个集装箱，可以任意地放进任何多个对象。 Façade模式中组件的内部应该是<code>“相互耦合关系比较大的一系列组件”</code>，而不是一个简单的功能集合。</li></ul><h3 id="Proxy代理模式"><a href="#Proxy代理模式" class="headerlink" title="Proxy代理模式"></a>Proxy代理模式</h3><h4 id="动机-12"><a href="#动机-12" class="headerlink" title="动机"></a>动机</h4><p>在面向对象系统中，有些对象由于某种原因（比如<code>对象创建的开销很大</code>，或者<code>某些操作需要安全控制</code>，或者<code>需要进程外的访问</code>等），直接访问会给使用者、或者系统结构带来很多麻烦。</p><h4 id="模式定义-12"><a href="#模式定义-12" class="headerlink" title="模式定义"></a>模式定义</h4><p>为其他对象提供一种代理以<code>控制（隔离，使用接口）</code>对这个对象的访问。</p><h4 id="结构类图-12"><a href="#结构类图-12" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121185353338.png" alt="image-20231121185353338"></p><h4 id="要点总结-12"><a href="#要点总结-12" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li><code>“增加一层间接层”</code>是软件系统中对许多复杂问题的一种常见解决方 法。在面向对象系统中，直接使用某些对象会带来很多问题，作为间接层的proxy对象便是解决这一问题的常用手段。</li><li>具体proxy设计模式的实现方法、实现粒度都<code>相差很大</code>，有些可能对单个对象做细粒度的控制，如copy-on-write技术，有些可能对组件模块提供抽象代理层，在架构层次对对象做proxy。</li><li>Proxy并不一定要求保持接口完整的一致性，只要能够实现间接控制，有时候<code>损及一些透明性</code>是可以接受的。</li></ul><h3 id="Adapter适配器"><a href="#Adapter适配器" class="headerlink" title="Adapter适配器"></a>Adapter适配器</h3><h4 id="动机-13"><a href="#动机-13" class="headerlink" title="动机"></a>动机</h4><p>在软件系统中，由于应用环境的变化，常常需要将<strong>“一些现存的对象”</strong>放在新的环境中应用，但是<strong>新环境要求的接口</strong>是这些现存对象所不满足的。</p><h4 id="模式定义-13"><a href="#模式定义-13" class="headerlink" title="模式定义"></a>模式定义</h4><p>将一个类的接口转换成客户希望的另一个接口。Adapter模式使得原本由于<strong>接口不兼容</strong>而不能一起工作的那些类<strong>可以一起工作</strong>。</p><h4 id="结构类图-13"><a href="#结构类图-13" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121200241869.png" alt="image-20231121200241869"></p><h4 id="要点总结-13"><a href="#要点总结-13" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Adapter模式主要应用于<strong>“希望复用一些现存的类，但是接口又与复用环境要求不一致的情况”</strong>，在<code>遗留代码复用</code>、<code>类库迁移</code>等方面非常有用。</li><li>GoF 23定义了两种Adapter模式的实现结构：<code>对象适配器</code>和<code>类适配器</code>。但类适配器采用<code>“多继承”</code>的实现方式，<code>一般不推荐使用</code>。<strong>对象适配器采用“对象组合”的方式，更符合松耦合精神</strong>。</li><li>Adapter模式可以实现的非常灵活，不必拘泥于Gof23中定义的两种结构。例如，完全可以将Adapter模式中的“现存对象”作为新的接口方法参数，来达到适配的目的。</li></ul><h3 id="Mediator中介者（不常用）"><a href="#Mediator中介者（不常用）" class="headerlink" title="Mediator中介者（不常用）"></a>Mediator中介者（不常用）</h3><h4 id="动机-14"><a href="#动机-14" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，经常会出现<strong>多个对象</strong>互相关联交互的情况，对象之间常常会维持一种<strong>复杂的引用关系</strong>，如果遇到一些需求的更改，这种直接的引用关系将面临不断的变化。</p><p>在这种情况下，使用一个”中介对象“来管理对象间的关联关系，<strong>避免相互交互的对象之间的紧耦合引用关系</strong>，从而更好地抵御变化。</p><h4 id="模式定义-14"><a href="#模式定义-14" class="headerlink" title="模式定义"></a>模式定义</h4><p>用一个中介对象来<strong>封装</strong>（<code>封装变化</code>）一系列的对象交互。中介者使各对象不需要显式的<strong>相互引用</strong>（<code>编译时依赖</code> -&gt; 运行时依赖），从而使其<strong>耦合松散</strong>（管理变化），而且可以独立地改变它们之间的交互。</p><h4 id="结构类图-14"><a href="#结构类图-14" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121203025050.png" alt="image-20231121203025050"></p><h4 id="要点总结-14"><a href="#要点总结-14" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>将多个对象间复杂的关联关系<code>解耦</code>，Mediator模式将多个对象间的控制逻辑进行集中管理，变“多个对象互相关联”为<code>“多个对象和一个中介者关联”</code>，<strong>简化了系统的维护，抵御了可能的变化。</strong></li><li>随着控制逻辑的复杂化，Mediator具体对象的实现<strong>可能相当复杂</strong>。 这时候可以对Mediator对象进行<code>分解处理</code>。</li><li><strong>Façade模式</strong>是<code>解耦系统间（单向）</code>的对象关联关系；<strong>Mediator模式</strong>是<code>解耦系统内各个对象之间（双向）</code>的关联关系。</li></ul><h2 id="“状态变化”模式"><a href="#“状态变化”模式" class="headerlink" title="“状态变化”模式"></a>“状态变化”模式</h2><p>在组件构建过程中，某些<strong>对象的状态</strong>经常面临变化，如何对这些变化进行有效的管理？同时又维持高层模块的稳定？<strong>”状态变化“模式</strong>为这一问题提供了一种解决方案。</p><p>典型模式：</p><ul><li><strong>State</strong></li><li><strong>Memento</strong></li></ul><h3 id="State状态模式"><a href="#State状态模式" class="headerlink" title="State状态模式"></a>State状态模式</h3><h4 id="动机-15"><a href="#动机-15" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，某些对象的状态如果改变，其行为也会随之而发生变化，比如<code>文档处于只读状态</code>，其支持的行为和读写状态支持的行为就可能完全不同。</p><h4 id="模式定义-15"><a href="#模式定义-15" class="headerlink" title="模式定义"></a>模式定义</h4><p>允许一个对象在其<code>内部状态改变时改变它的行为</code>。从而使对象看起来似乎修改了其行为。</p><h4 id="结构类图-15"><a href="#结构类图-15" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121210733382.png" alt="image-20231121210733382"></p><h4 id="要点总结-15"><a href="#要点总结-15" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>State模式将<strong>所有与一个特定状态相关的行为都放入一个State的子类对象中</strong>，在对象状态切换时，切换相应的对象；但同时维持State的接口，这样实现了<strong>具体操作与状态转换之间的解耦</strong>。</li><li>为不同的状态引入不同的对象使得状态转换变得更加明确，而且可以保证<strong>不会出现状态不一</strong>致的情况，因为转换是<code>原子性的</code>——即要么彻底转换过来，要么不转换。</li><li>如果State对象<strong>没有实例变量</strong>，那么各个上下文可以<strong>共享同一个 State对象</strong>，从而节省对象开销。</li></ul><h3 id="Memento备忘录（过时）"><a href="#Memento备忘录（过时）" class="headerlink" title="Memento备忘录（过时）"></a>Memento备忘录（过时）</h3><h4 id="动机-16"><a href="#动机-16" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，某些对象的状态在转换过程中，可能由于某种需要，要求程序能够<code>回溯</code>到对象之前处于某个点时的状态。如果使用一些共有接口来让其他对象得到对象的状态，便会暴露对象的细节实现。</p><h4 id="模式定义-16"><a href="#模式定义-16" class="headerlink" title="模式定义"></a>模式定义</h4><p>在<code>不破坏封装性</code>的前提下，捕获一个对象的内部状态，并在该<code>对象之外</code>保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。</p><h4 id="结构类图-16"><a href="#结构类图-16" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121221204619.png" alt="image-20231121221204619"></p><h4 id="要点总结-16"><a href="#要点总结-16" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>备忘录（<em>Memento</em>）存储原发器（<em>Originator</em>）对象的内部状态，在需要时恢复原发器状态。</li><li>Memento模式的核心是<code>信息隐藏</code>，即Originator需要向外接隐藏信息，<code>保持其封装性</code>。但同时又需要将状态<code>保持到外界</code>（<em>Memento</em>）。</li><li>由于现代语言运行时（如C#、Java等）都具有相当的对象序列化支持，因此往往采用效率较高、又较容易正确实现的<code>序列化方案</code>来实现Memento模式。</li></ul><h2 id="”数据结构“模式"><a href="#”数据结构“模式" class="headerlink" title="”数据结构“模式"></a>”数据结构“模式</h2><p>常常有一些组件在内部具有特定的数据结构，如果让客户程序依赖这些特定的数据结构，将极大地破坏组件的复用。这时候，将这些特定数据结构封装在内部，在外部提供统一的接口，来实现与特定数据结构无关的访问，是一种行之有效的解决方案。</p><p>典型模式：</p><ul><li><strong>Composite</strong></li><li><strong>Iterator</strong></li><li><strong>Chain of Resposibility</strong></li></ul><h3 id="Composite组合模式"><a href="#Composite组合模式" class="headerlink" title="Composite组合模式"></a>Composite组合模式</h3><h4 id="动机-17"><a href="#动机-17" class="headerlink" title="动机"></a>动机</h4><p>软件在某些情况下，客户代码过多地依赖于对象容器复杂的内部实现结构，对象容器内部实现结构（而非抽象接口）的变化将引起客户代码的频繁变化，带来了代码的维护性、扩展性等弊端。</p><h4 id="模式定义-17"><a href="#模式定义-17" class="headerlink" title="模式定义"></a>模式定义</h4><p>将对象组合成<code>树形结构</code>以表示<code>”部分-整体“</code>的层次结构。Composite使得用户对单个对象和组合对象的使用<code>具有一致性</code>（稳定）。</p><h4 id="结构类图-17"><a href="#结构类图-17" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121223440958.png" alt="image-20231121223440958"></p><h4 id="要点总结-17"><a href="#要点总结-17" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Composite模式采用<code>树形结构</code>来实现普遍存在的对象容器，从而将<strong>“一对多”</strong>的关系转化为<strong>“一对一”</strong>的关系，使得客户代码可以<code>一致地</code>（复用）处理对象和对象容器，无需关心处理的是单个的对象，还是组合的对象容器。</li><li><code>将“客户代码与复杂的对象容器结构”解耦</code>是Composite的核心思想，解耦之后，客户代码将与纯粹的抽象接口——而非对象容器的内部实现结构——发生依赖，从而更能“应对变化”。</li><li>Composite模式在具体实现中，可以让父对象中的子对象<strong>反向追溯</strong>；如果父对象有频繁的遍历需求，可使用<strong>缓存技巧</strong>来改善效率。</li></ul><h3 id="Iterator迭代器（面向对象实现已过时）"><a href="#Iterator迭代器（面向对象实现已过时）" class="headerlink" title="Iterator迭代器（面向对象实现已过时）"></a>Iterator迭代器（面向对象实现已过时）</h3><h4 id="动机-18"><a href="#动机-18" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，集合对象内部结构常常变化各异。但对于这些集合对象，我们希望在不暴露其内部结构的同时，可以让外部客户代码透明地访问其中包含的元素；同时这种<strong>“透明遍历”</strong>也为“同一种算法在多种集合对象上进行操作”提供了可能。</p><h4 id="模式定义-18"><a href="#模式定义-18" class="headerlink" title="模式定义"></a>模式定义</h4><p>提供一种方法<code>顺序访问</code>一个聚合对象中的各个元素，而又<code>不暴露</code>（稳定）该对象的内部表示。</p><h4 id="结构类图-18"><a href="#结构类图-18" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121224544481.png" alt="image-20231121224544481"></p><h4 id="要点总结-18"><a href="#要点总结-18" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>迭代抽象：访问一个聚合对象的内容而无需暴露它的内部表示。</li><li>迭代多态：为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作。</li><li>迭代器的健壮性考虑：遍历的同时更改迭代器所在的集合结构，会导致问题。</li></ul><h3 id="Chain-of-Resposibility职责链（过时）"><a href="#Chain-of-Resposibility职责链（过时）" class="headerlink" title="Chain of Resposibility职责链（过时）"></a>Chain of Resposibility职责链（过时）</h3><h4 id="动机-19"><a href="#动机-19" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，一个请求可能被多个对象处理，但是每个请求在运行时只能有一个接收者，如果显示指定，将必不可少地带来请求发送者与接收者的紧耦合。</p><h4 id="模式定义-19"><a href="#模式定义-19" class="headerlink" title="模式定义"></a>模式定义</h4><p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象<code>连成一条链</code>，并沿着这条链传递请求，直到有一个对象处理它为止。</p><h4 id="结构类图-19"><a href="#结构类图-19" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231121230805596.png" alt="image-20231121230805596"></p><h4 id="要点总结-19"><a href="#要点总结-19" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Chain of Responsibility 模式的应用场合在于“一个请求可能有多个接受者,但是最后真正的接受者只有一个”，这时候请求发送者与接受者的耦合有可能出现“变化脆弱”的症状，职责链的目的就是将二者解耦，从而更好地应对变化。</li><li>应用了Chain of Responsibility 模式后，对象的职责分派将更具灵活性。我们可以在运行时动态添加/修改请求的处理职责。</li><li>如果请求传递到职责链的末尾仍得不到处理，应该有一个合理的缺省机制。这也是每一个接受对象的责任，而不是发出请求的对象的责任。</li></ul><h2 id="“行为变化”模式"><a href="#“行为变化”模式" class="headerlink" title="“行为变化”模式"></a>“行为变化”模式</h2><p>在组件的构建过程中，组件行为的变化经常导致组件本身剧烈的变化。”行为变化“模式将组件的行为和组件本身进行解耦，从而支持组件行为的变化，实现两者之间的松耦合。</p><p>典型模式：</p><ul><li><strong>Command</strong></li><li><strong>Visitor</strong></li></ul><h3 id="Command命令模式（应用不广泛）"><a href="#Command命令模式（应用不广泛）" class="headerlink" title="Command命令模式（应用不广泛）"></a>Command命令模式（应用不广泛）</h3><h4 id="动机-20"><a href="#动机-20" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，”行为请求者“与”行为实现者“通常呈现一种”紧耦合“。但在某些场合——比如需要对行为进行”记录、撤销/重做（undo/redo）、事务“等处理，这种无法抵御变化的紧耦合是不合适的。</p><h4 id="模式定义-20"><a href="#模式定义-20" class="headerlink" title="模式定义"></a>模式定义</h4><p>将一个请求（行为）<code>封装为一个对象</code>，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作。</p><h4 id="结构类图-20"><a href="#结构类图-20" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231122001510001.png" alt="image-20231122001510001"></p><h4 id="要点总结-20"><a href="#要点总结-20" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Command模式的根本目的在于将<strong>“行为请求者”与“行为实现者”解耦</strong>，在面向对象语言中，常见的实现手段是<code>“将行为抽象为对象”</code>。</li><li>实现Command接口的具体命令对象ConcreteCommand有时候根据需要可能会保存一些额外的状态信息。通过使用Composite模式，可以将多个“命令”封装为一个<code>“复合命令”MacroCommand</code>。</li><li>Command模式与C++中的函数对象有些类似。但两者定义行为接口的规范有所区别：Command以面向对象中的<code>“接口-实现”</code>来定义<br>行为接口规范，更严格，但有性能损失；C++函数对象以<code>函数签名</code>来定义行为接口规范，更灵活，性能更高。</li></ul><h3 id="Visitor访问器（不常用）"><a href="#Visitor访问器（不常用）" class="headerlink" title="Visitor访问器（不常用）"></a>Visitor访问器（不常用）</h3><h4 id="动机-21"><a href="#动机-21" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，由于需求的改变，某些类层次结构中常常需要增加新的行为（方法），如果直接在基类中做这样的更改，将会给子类带来很繁重的变更负担，甚至破坏原有设计。</p><h4 id="模式定义-21"><a href="#模式定义-21" class="headerlink" title="模式定义"></a>模式定义</h4><p>表示一个作用于某对象结构中的各元素的操作。使得可以在<code>不改变</code>（稳定）各元素的类的前提下定义（<code>扩展</code>）作用于这些元素的新操作（变化）。</p><h4 id="结构类图-21"><a href="#结构类图-21" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231122122555418.png" alt="image-20231122122555418"></p><h4 id="要点总结-21"><a href="#要点总结-21" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Visitor模式通过所谓<code>双重分发</code>（<em>double dispatch</em>）来实现在不更改 （不添加新的操作-编译时）Element类层次结构的前提下，在运行时透明地为类层次结构上的各个类动态添加新的操作（支持变化）。</li><li>所谓双重分发即Visitor模式中间包括了<code>两个多态分发</code>（注意其中的多态机制）：第一个为<strong>accept方法的多态辨析</strong>；第二个为 <strong>visitElementX方法的多态辨析</strong>。</li><li>Visitor模式的最大<strong>缺点</strong>在于<strong>扩展类层次结构</strong>（增添新的Element子类），<strong>会导致Visitor类的改变</strong>。因此Vistor模式适用于<code>“Element类层次结构稳定，而其中的操作却经常面临频繁改动”</code>。</li></ul><h2 id="“领域规则”模式"><a href="#“领域规则”模式" class="headerlink" title="“领域规则”模式"></a>“领域规则”模式</h2><p>在特定领域中，某些变化虽然频繁，但可以抽象为某种规则。这时候，结合特定领域，将问题抽象为语法规则，从而给出在该领域下的一般性解决方案。</p><p>典型模式：</p><ul><li><strong>Interpreter</strong></li></ul><h3 id="Interpreter解析器（不常用）"><a href="#Interpreter解析器（不常用）" class="headerlink" title="Interpreter解析器（不常用）"></a>Interpreter解析器（不常用）</h3><h4 id="动机-22"><a href="#动机-22" class="headerlink" title="动机"></a>动机</h4><p>在软件构建过程中，如果某一特定领域的问题比较复杂，类似的结构不断重复出现，如果使用普通的编程方式来实现将面临非常频繁的变化。</p><h4 id="模式定义-22"><a href="#模式定义-22" class="headerlink" title="模式定义"></a>模式定义</h4><p>给定一个语言，定义它的文法的一种表示，并定义一种解释器，这个解释器使用该表示来解释语言中的句子。</p><h4 id="结构类图-22"><a href="#结构类图-22" class="headerlink" title="结构类图"></a>结构类图</h4><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231122133536927.png" alt="image-20231122133536927"></p><h4 id="要点总结-22"><a href="#要点总结-22" class="headerlink" title="要点总结"></a>要点总结</h4><ul><li>Interpreter模式的应用场合是Interpreter模式应用中的难点，只有满足<strong>“业务规则频繁变化，且类似的结构不断重复出现，并且容易抽象为语法规则的问题”</strong>才适合使用Interpreter模式。</li><li>使用Interpreter模式来表示文法规则，从而可以使用面向对象技巧来方便地<strong>“扩展”</strong>文法。</li><li>Interpreter模式比较适合<strong>简单的文法表示</strong>，对于复杂的文法表示，Interpreter模式会产生比较大的类层次结构，需要求助于<strong>语法分析生成器</strong>这样的标准工具。</li></ul><h1 id="重构技法"><a href="#重构技法" class="headerlink" title="重构技法"></a>重构技法</h1><ul><li>静态 -&gt; 动态</li><li>早绑定 -&gt; 晚绑定</li><li>继承 -&gt; 组合</li><li>编译时依赖 -&gt; 运行时依赖</li><li>紧耦合 -&gt; 松耦合</li></ul><h1 id="成长之路"><a href="#成长之路" class="headerlink" title="成长之路"></a>成长之路</h1><ul><li>“手中无剑，心中无剑”：见模式而不知</li><li>“手中有剑，心中无剑”：可以识别模式，作为应用开发人员使用模式</li><li>“手中有剑，心中有剑”：作为框架开发人员为应用设计某些模式</li><li>“手中无剑，心中有剑”：忘掉模式，只有原则</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/blogs/3006dc10.html"/>
      <url>/blogs/3006dc10.html</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h2><h3 id="STL六大部件"><a href="#STL六大部件" class="headerlink" title="STL六大部件"></a>STL六大部件</h3><p>容器，分配器，算法，迭代器，适配器，仿函数。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231028111900946.png" alt="image-20231028111900946"></p><ul><li>容器通过内存分配器分配空间</li><li>容器和算法分离</li><li>算法通过迭代器访问容器</li><li>仿函数协助算法完成不同的策略变化</li><li>适配器套接仿函数</li></ul><h3 id="容器的分类与各种测试"><a href="#容器的分类与各种测试" class="headerlink" title="容器的分类与各种测试"></a>容器的分类与各种测试</h3><p>​    vector扩展内存时，两倍扩展。</p><p>​    容器list，内部有一个sort()，标准库全局也有一个sort()。容器自我提供的sort()会更快一些。</p><p>​    容器deque，分段连续。客户使用是完整连续（假象）。</p><p>​    有序关联式容器（set/multiset，map/multimap），底层设计是红黑树，容器自我查找（find()）快。</p><p>​    无序关联式容器（unordered_multiset/unordered_set，unordered_multimap/unordered_map），底层设计是hash table，容器自我查找（find()）快。</p><h2 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h2><p>源码之前，了无秘密。</p><p>GNU C++ 2.91。</p><p>OOP（<em>Object-Oriented programming</em>）企图将datas和methods关联在一起；GP（<em>Generic Programming</em>）欲是将datas和methods分开来。</p><p>​    采用GP：</p><p>​    Containers和Algorithms内随可各自闭门造车，其间以Iterator沟通即可。</p><p>​    Algorithms通过Iterators确定操作范围，并通过Iterators取用Container元素。</p><p>所有algorithms，其内最终<strong>涉及元素本身</strong>的操作，无非就是<strong>比大小</strong>。</p><h3 id="分配器allocator"><a href="#分配器allocator" class="headerlink" title="分配器allocator"></a>分配器allocator</h3><p>operator new会调用malloc()。</p><p>operator delete会调用free()。</p><p>​    VC6的allocator只是以::operator new和::operator delete完成allocate()和deallocate()，没有任何特殊设计。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分配512ints</span></span><br><span class="line"><span class="type">int</span>* p = <span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">allocate</span>(<span class="number">512</span>,(<span class="type">int</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="built_in">allocator</span>&lt;<span class="type">int</span>&gt;().<span class="built_in">deallocate</span>(p,<span class="number">512</span>);<span class="comment">//归还512ints</span></span><br></pre></td></tr></table></figure><p>​    GCC2.9allocator只是以::operator new和::operator delete完成allocate()和deallocate()，没有任何特殊设计。但是G2.9并没有用这个分配器，而是用的alloc分配器，可以省下很多内存。</p><p>​    G4.9的allocator分配器又用回了VC6的allocator，但是依然有alloc分配器。</p><p>postfix form：（i++）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self <span class="keyword">operator</span>++(<span class="type">int</span>)  <span class="comment">//(i++)++ 不能这么做</span></span><br></pre></td></tr></table></figure><p>prefix form：（++i）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self&amp; <span class="keyword">operator</span>++()    <span class="comment">//++(++i)</span></span><br></pre></td></tr></table></figure><h3 id="迭代器的设计原则和Iterator-Traits的作用与设计"><a href="#迭代器的设计原则和Iterator-Traits的作用与设计" class="headerlink" title="迭代器的设计原则和Iterator Traits的作用与设计"></a>迭代器的设计原则和Iterator Traits的作用与设计</h3><p>​    <code>Iterator Traits</code>（萃取机）萃取出Iterator的特性。</p><p>​    算法提问，迭代器回答。iterators必须有能力回答algorithms的提问。</p><p>​    Iterator必须提供的5种associated types：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iterator_category;</span><br><span class="line">value_type;</span><br><span class="line">difference_type;</span><br><span class="line">pointer;  <span class="comment">//这两种在STL里面没见过</span></span><br><span class="line">reference;  <span class="comment">//但是需要</span></span><br></pre></td></tr></table></figure><p>​    Non class（template）iterators亦即native pointer，无法定义associated types。但它的associated types其实很直观。</p><p>​    class（template）iterators都有能力定义自己的associated types。</p><p>​    <code>Iterator Traits</code>用以分离<code>class</code> iterators和<code>non-class</code>iterators。</p><p>​    这个traits机器（看成中间层）必须有能力分辨它所获得的iterator是（1）class iterator T或是（2）native pointer to T。利用partial specialization（偏特化）可连到目标。</p><p>​    <code>value_type</code>的主要目的是用来声明变量，而声明一个<code>无法被赋值</code>的变量没什么用，所以iterator（即便是constant iterator）的value type不应加上const。iterator若是const int*，其<code>value_type</code>应该是int，而非const int。</p><h3 id="队列和栈"><a href="#队列和栈" class="headerlink" title="队列和栈"></a>队列和栈</h3><p>​    stack或queue都<code>不允许</code>遍历，也<code>不提供</code>iterator。</p><p>​    stack和queue都<code>可</code>选择list或deque做为底层结构。</p><p>​    stack<code>可</code>选择vector做为底层结构。queue<code>选择</code>vector做为底结构。</p><p>​    stack和queue都<code>不可</code>选择set或map做为底层结构。</p><h3 id="RB树"><a href="#RB树" class="headerlink" title="RB树"></a>RB树</h3><p>​    <code>Red-Black tree</code>（红黑树）是平衡二元（分）搜索树中常被使用的一种。平衡二元搜索树的特征：排列规则有利search和insert，并保持适度平衡—无任何节点过深。</p><p>​    rb_tree提供“遍历”操作及iterators。按正常规则（++ite）遍历，便能获得排序状态。</p><p>​    我们<code>不应</code>使用rb_tree 的 iterators改变元素值（因为元素有其严谨排列规则）。编程层面（<em>programming leve</em>）<code>并未阻绝此事</code>。如此设计是正确的，因为 rb_tree 即将为 set 和 map 服务（做为其底部支持），而map允许<code>元素的data</code> 被改变，只有<code>元素的key</code>才是不可被改变的。</p><p>​    rb_tree 提供两种 insertion 操作：<code>insert_unique()</code>和 <code>insert_equal()</code>。前者表示节点的key一定在整个 tree 中独一无二，否则安插失败；后者表示节点的key可重复。</p><h3 id="set、multiset"><a href="#set、multiset" class="headerlink" title="set、multiset"></a>set、multiset</h3><p>​    set/multiset 以rb_tree 为底层结构，因此有「元素自动排序」特性 排序的依据是key，而 <code>set/multiset元素的value 和key合一：value就是key</code>。</p><p>​    set/multiset 提供“遍历”操作及 iterators。按正常规则(++ite)遍历，便能获得排序状态(sorted)。</p><p>​    我们<code>无法</code>使用 set/multiset 的 iterators 改变元素值（因为key有其严谨排列规则） 。 set/multiset的iterator是其底部的RB tree 的 const-iterator，就是为了<code>禁止</code> user 对元素赋值。</p><p>​    set元素的key必须独一无二，因此其 insert()用的是rb_tree的<code>insert_unique()</code>。 multiset元素的key可以重复，因此其 insert()用的是rb_tree的<code>insert_equal()</code>。</p><h3 id="map、multimap"><a href="#map、multimap" class="headerlink" title="map、multimap"></a>map、multimap</h3><p>​    map/multimap 以rb_tree 为底层结构，因此有「元素自动排序」特性。排序的依据是 key 。</p><p>​    map/multimap 提供“遍历”操作及 iterators。按正常规则（<em>++ite</em>）遍历，便能获得排序状态（<em>sorted</em>）。</p><p>​    我们<code>无法</code>使用 map/multimap 的 iterators 改变元素的key（因为key有其严谨排列规则），但<code>可以</code>用它来改变元素的data。因此 map/multimap内部自动将<code>user指定的key type</code> 设为 <code>const</code>，如此便能<code>禁止</code>user对<code>元素的key</code>赋值。</p><p>​    map元素的 key 必须独一无二，因此其insert()用的是rb_tree的insert_unique()。multimap 元素的key可以重复，因此其 insert()用的是rb_tree的insert_equal()。</p><p>​    multimap不可使用[]做insertion，map可以。</p><h3 id="hashtable（哈希表、散列表）"><a href="#hashtable（哈希表、散列表）" class="headerlink" title="hashtable（哈希表、散列表）"></a>hashtable（哈希表、散列表）</h3><p>​    存储方式（拉链法，单链表）：<code>Separate Chaining</code>。虽然list是线性搜寻时间，如果list够小，搜寻速度仍然很快。</p><p>​    可以使用hashtable iterators改变元素的data，但不能改变元素的key（因为hashtable根据key实现严谨的元素排列）。</p><p>​    如果元素总量超过当时buckets vector大小，将rehashing。</p><p>​    C++ 11将hash改成unordered。</p><h2 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h2><h3 id="算法的形式"><a href="#算法的形式" class="headerlink" title="算法的形式"></a>算法的形式</h3><p>从语言层面讲：</p><ul><li>容器 Container 是个 class template</li><li>算法 Algorithm 是个 function template</li><li>迭代器 Iterator 是个 class template</li><li>仿函数 Functor 是个 class template</li><li>适配器 Adapter 是个class template</li><li>分配器 Allocator 是个 class template    </li></ul><p>​    Algorithms 看不见 Containers，对其一无所知；所以，它所需要的一切信息都必须从 Iteratrors 取得，而 Iterators（由 Containers 供应）必须能够回答 Algorithm 的所有提问，才能搭配该 Algorithm 的所有操作。</p><h3 id="算法源代码剖析"><a href="#算法源代码剖析" class="headerlink" title="算法源代码剖析"></a>算法源代码剖析</h3><p>​    容器<code>不带</code>成员函数 count()：array, vector, list, forward_list, deque。</p><p>​    容器<code>带有</code>成员函数 count()：set/multiset，map/multimap，unordered_set/unordered_multiset，unordered_map/unordered_multimap。</p><p>​    容器<code>不带</code>成员函数 find()：array, vector, list, forward_list, deque。</p><p>​    容器<code>带有</code>成员函数 find()：set/multiset，map/multimap，unordered_set/unordered_multiset，unordered_map/unordered_multimap。</p><p>​    容器<code>不带</code>成员函数 sort()：array, vector, deque，set/multiset，map/multimap，unordered_set/unordered_multiset，unordered_map/unordered_multimap。</p><p>​    容器<code>带有</code>成员函数 sort()：list, forward_list。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rbegin</span>() — <span class="built_in">reverse_iterator</span>(<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">rend</span>() — <span class="built_in">reverse_iterator</span>(<span class="built_in">begin</span>());</span><br></pre></td></tr></table></figure><h3 id="仿函数functors"><a href="#仿函数functors" class="headerlink" title="仿函数functors"></a>仿函数functors</h3><p>​    算术类（Arithmetic），逻辑运算类（Logical），相对关系类（Relational）。</p><p>​    typename( )，创建临时对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Arg</span>, <span class="keyword">class</span> <span class="title class_">Result</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">unary_function</span>&#123;</span><br><span class="line">  <span class="keyword">typedef</span> Arg argument_type;</span><br><span class="line">  <span class="keyword">typedef</span> Result result_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Arg1</span>, <span class="keyword">class</span> <span class="title class_">Arg2</span>, <span class="keyword">class</span> <span class="title class_">Result</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">binary_function</span>&#123;</span><br><span class="line">  <span class="keyword">typedef</span> Arg1 first_argument_type;</span><br><span class="line">  <span class="keyword">typedef</span> Arg2 second_argument_type;</span><br><span class="line">  <span class="keyword">typedef</span> Result result_type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    仿函数functors的<code>可适配</code>（<em>adaptable</em>）条件：STL规定每个Adaptable Function都应挑选<code>适当者</code>继承之（因为Function Adapter将会提问）。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">less</span> : <span class="keyword">public</span> binary_function&lt;T, T, <span class="type">bool</span>&gt;&#123;</span><br><span class="line">  <span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> T&amp; x, <span class="type">const</span> T&amp; y)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;<span class="keyword">return</span> x &lt; y;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    于是<code>less&lt;int&gt;</code>便有了三个typedef，分别是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> first_argument_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> second_argument_type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">bool</span> result_type;</span><br></pre></td></tr></table></figure><h3 id="适配器Adapters"><a href="#适配器Adapters" class="headerlink" title="适配器Adapters"></a>适配器Adapters</h3><h4 id="函数适配器：binder1st，binder2nd，not1。"><a href="#函数适配器：binder1st，binder2nd，not1。" class="headerlink" title="函数适配器：binder1st，binder2nd，not1。"></a>函数适配器：binder1st，binder2nd，not1。</h4><h4 id="新型适配器bind取代binder1st、binder2nd。"><a href="#新型适配器bind取代binder1st、binder2nd。" class="headerlink" title="新型适配器bind取代binder1st、binder2nd。"></a>新型适配器bind取代binder1st、binder2nd。</h4><p>​    bind只能绑定一个模板参数。</p><p>​    std::bind可以绑定：</p><ol><li>functions</li><li>function objects</li><li>member functions，_1必须是某个object地址。</li><li>data members，_1必须是某个object地址。</li></ol><h4 id="迭代器适配器：reverse-iterator"><a href="#迭代器适配器：reverse-iterator" class="headerlink" title="迭代器适配器：reverse_iterator"></a>迭代器适配器：reverse_iterator</h4><p>逆向迭代器的5种associated types都和其对应的正向迭代器相同。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Iterator iterator_type;<span class="comment">//代表正向迭代器</span></span><br><span class="line"><span class="keyword">typedef</span> reverse_iterator&lt;Iterator&gt; self;<span class="comment">//代表逆向迭代器</span></span><br></pre></td></tr></table></figure><p>对逆向迭代器取值，就是将对应的正向迭代器退一位取值。</p><p>前进变成后退，后退变成前进。</p><h4 id="迭代器适配器：inserter"><a href="#迭代器适配器：inserter" class="headerlink" title="迭代器适配器：inserter"></a>迭代器适配器：inserter</h4><p>这个adapter将iterator的赋值（<em>assign</em>）操作改变为安插（<em>insert</em>）操作，并将iterator右移一个位置。如此便可让user连续执行<code>表面上assign而实际上insert</code>的行为。</p><h4 id="X适配器：ostream-iterator"><a href="#X适配器：ostream-iterator" class="headerlink" title="X适配器：ostream_iterator"></a>X适配器：ostream_iterator</h4><h4 id="X适配器：istream-iterator"><a href="#X适配器：istream-iterator" class="headerlink" title="X适配器：istream_iterator"></a>X适配器：istream_iterator</h4><h2 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h2><p>​    type traits实现is_class，is_union，is_enum，is_pod这些未曾出现于C++标准库源代码。</p><p>​    moveable元素对于vector速度效能的影响：存储时间差别很大，有时候更是巨大得多；copy跟move copy差别巨大。</p><p>​    moveable元素对于list、deque、multiset、unordered_multiset速度效能的影响：存储时间差别不大；copy跟move copy差别巨大。</p><p>​    元素：move copy之后，原来的东西不可使用；确保不再使用原来的东西，才使用move copy。</p><p>​    std::string带着moveable功能。</p><h2 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h2><h3 id="模板观念与函数模板"><a href="#模板观念与函数模板" class="headerlink" title="模板观念与函数模板"></a>模板观念与函数模板</h3><p>​    模板（Templates）是C++的一种特性，允许函数或类（对象）通过泛型（generic types）的形式表现或运行。</p><p>​    模板可以使得函数或类在对应不同的型别（types）的时候正常工作，而无需为每一个型别都写一份代码。</p><p>​    模板被编译了两次：</p><ol><li>没有实例化之前，检查模板代码本身是否有语法错误</li><li>实例化期间，检查对模板代码的调用是否合法</li></ol><h3 id="泛型编程-1"><a href="#泛型编程-1" class="headerlink" title="泛型编程"></a>泛型编程</h3><h4 id="特化（Traits）"><a href="#特化（Traits）" class="headerlink" title="特化（Traits）"></a>特化（Traits）</h4><p>​    型别T与其trait的关系推演如下：</p><blockquote><p>T -&gt; association -&gt; characteristic of T -&gt; another type -&gt; trait!</p></blockquote><p>​    Traits可以实现模板类，而关联（association）则是针对每个具体型别T的特化。</p><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><ul><li><p>迭代器是指针的泛化。</p><ul><li><p>迭代器本身是一个对象，指向另外一个（可以被迭代的）对象。</p></li><li><p>用来迭代一组对象，即如果迭代器指向一组对象中的某个元素，则通过increment以后它就可以指向这组对象中的下一个元素。</p></li></ul></li><li><p>在STL中迭代器是容器与算法之间的接口。</p><ul><li>算法通常以迭代器做为输入参数。</li><li>容器只要提供一种方式，可以让迭代器访问容器中的元素即可。</li></ul></li></ul><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><p>​    仿函数又称为函数对象（<em>Function Object</em>），其作用相当于一个函数指针。</p><p>​    STL中将这种行为函数指针定义为所谓的仿函数，其实现是一个class，再以该仿函数产生一个对象做为算法参数。</p><p>​    仿函数的类别定义中必须重载函数调用运算子operator()，从而使得仿函数对象可以像函数一样被调用。</p><p>​    自定义的仿函数必须重载operator()。</p><p>​    为什么要用仿函数而不是普通函数指针作为算法的行为参数？</p><ul><li>普通函数指针不能满足STL的抽象要求</li><li>函数指针无法和STL其他组件交互</li></ul><h3 id="仿函数适配器"><a href="#仿函数适配器" class="headerlink" title="仿函数适配器"></a>仿函数适配器</h3><p>​    仿函数适配器（Functor Adapter），目的在于将无法匹配的仿函数“套接”成可以匹配的型别。</p><p>​    仿函数适配器（mem_fun/mem_fun_ref）：用来适配对象的成员函数。</p><p>​    对于函数f以及对象obj，在obj上调用f的形式可以有3种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">f</span>(obj)    <span class="comment">// f是全局函数（非obj成员函数）</span></span><br><span class="line">obj.<span class="built_in">f</span>()    <span class="comment">// f是obj的成员函数，obj非指针</span></span><br><span class="line">obj-&gt;<span class="built_in">f</span>()  <span class="comment">// f是obj的成员函数，obj是指针</span></span><br></pre></td></tr></table></figure><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p>（1）std::string/std::wstring与<code>vector&lt;char&gt;</code>/<code>vector&lt;wchar_t&gt;</code></p><ul><li>单线程情况下涉及对字符串的操作，首选std::string/std::wstring</li><li>多线程情况下需注意string是否带引用计数（reference count）<ul><li>原本reference count的目的是避免不必要的内存分配和字符拷贝</li><li>在多线程环境下，避免分配和拷贝所节省下的开销转嫁到了并发控制上</li><li>可考虑使用<code>vector&lt;char&gt;</code>/<code>vector&lt;wchar_t&gt;</code>替代，而vector的实现是不带引用计数的</li></ul></li></ul><p>（2）当new出对象并放入容器时，要在销毁容器前delete那些对象。</p><p>（3）尽量用算法调用代替手写循环。例：</p><ul><li><p>使用for_each而不是for循环</p></li><li><p>定义DeleteElement对象并重载operator()</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DeleteElement</span>&#123;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> TElement&gt;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="type">const</span> TElement* p)</span> <span class="type">const</span></span>&#123;</span><br><span class="line">  <span class="keyword">delete</span> p;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用for_each销毁容器中对象</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">DeleteElement</span>());</span><br></pre></td></tr></table></figure></li></ul><p>（4）通过swap为容器“缩水”</p><p>（5）在有对象继承情况下，建立指针的容器而不是对象的容器</p><ul><li><p>STL容器装入的对象是原始对象的一个拷贝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;Object&gt; v;</span><br><span class="line"><span class="function">Object <span class="title">obj</span><span class="params">(...)</span></span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(obj);<span class="comment">//push进去的不是原始obj，而是obj的一个拷贝</span></span><br></pre></td></tr></table></figure></li><li><p>如果对象很大，拷贝需要大量性能开销</p></li><li><p>由于继承的存在，拷贝会发生slicing，即：如果以基类对象建立一个容器而插入派生类对象， 那么当对象通过基类的拷贝构造函数拷入容器的时候对象的派生部分会被切割</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubObject</span>:<span class="keyword">public</span> Object&#123;...&#125;<span class="comment">//继承Object的对象</span></span><br><span class="line">std::vector&lt;Object&gt; v;</span><br><span class="line">SubObject subObj;</span><br><span class="line">v.<span class="built_in">push_back</span>(subObj);<span class="comment">//slicing! subObj被当作基类拷贝进vector</span></span><br></pre></td></tr></table></figure></li><li><p>在有对象继承情况下，建立指针的容器而不是对象的容器</p><ul><li><p>一个好的做法是建立指针的容器而不是对象的容器</p><ul><li><p>拷贝指针总是很快，开销小</p></li><li><p>不会产生slicing问题</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubObject</span>:<span class="keyword">public</span> Object&#123;...&#125;<span class="comment">//继承Object的对象</span></span><br><span class="line">std::vector&lt;Object*&gt; v;</span><br><span class="line">Object* ptrSubObj = <span class="keyword">new</span> <span class="built_in">SubObject</span>();</span><br><span class="line">v.<span class="built_in">push_back</span>(ptrSubObj);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h3><h4 id="非变易算法"><a href="#非变易算法" class="headerlink" title="非变易算法"></a>非变易算法</h4><p>​    <code>非变易算法</code>是一系列模板函数，在<code>不改变</code>操作对象的前提下对元素进行处理，诸如：查找、子序列搜索、统计、匹配等等。</p><p>​    具体包括：for_each、find、find_if、adjacent_find、find_first_of、count、count_if、mismatch、equal、search。</p><h4 id="变易算法"><a href="#变易算法" class="headerlink" title="变易算法"></a>变易算法</h4><p>​    <code>变易算法</code>是指那些<code>改变</code>容器中对象的操作。</p><p>​    具体包括：copy、swap、transform、replace、fill、generate、remove、unique、reserve、rotate、random_shuffle、partition。</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>sort、partial_sort、binary_search、merge。</p><p>基于堆的算法：make_heap（大根堆）、push_heap、pop_heap（堆顶弹出）、sort_heap。</p><h4 id="泛型数值算法"><a href="#泛型数值算法" class="headerlink" title="泛型数值算法"></a>泛型数值算法</h4><p>​    <code>泛型数值算法</code>包含在<code>&lt;numeric&gt;</code>头文件中，包括：accumulate、inner_product、partial_sum、adjacent_difference。</p><h4 id="内存分配器"><a href="#内存分配器" class="headerlink" title="内存分配器"></a>内存分配器</h4><p>​    如果需要自己写一个allocator，则需满足以下接口：</p><ul><li><p>一组typedef：</p><ul><li><p>allocator::<code>value_type</code></p></li><li><p>allocator::<code>pointer</code></p></li><li><p>allocator::<code>const_pointer</code></p></li><li><p>allocator::<code>reference</code></p></li><li><p>allocator::<code>const_reference</code></p></li><li><p>allocator::<code>size_type</code></p></li><li><p>allocator::<code>difference_type</code></p></li></ul></li><li><p>allocator::<code>rebind</code>：allocator的内嵌模板，需要定义other成员</p></li><li><p>allocator::<code>allocator</code>()：构造函数</p></li><li><p>allocator::<code>allocator</code>(const allocator&amp;)：拷贝构造函数</p></li><li><code>template&lt;typename T&gt; allocator::allocator(const allocator&lt;T&gt;&amp;)</code>：泛化的拷贝构造函数</li><li>allocator::<code>~allocator()</code>：析构函数</li><li>pointer allocator::<code>address</code>(reference x) const：返回对象地址，allocator.address(x)相当于&amp;x</li><li>pointer allocator::<code>address</code>(size_type n, const void* = 0)：分配可以容纳n个对象的空间，对象型别是T</li><li>void allocator::<code>deallocator</code>(pointer p, size_type n)：释放空间</li><li>size_type allocator::<code>max_size</code>() const：可以分配的最大空间</li><li>void allocator::<code>construct</code>(pointer p, const T&amp;x)：相当于new(const void* p) T(x)</li><li>void allocator::<code>destory</code>(pointer p)：相当于p-&gt;~T()</li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国科大移动互连网技术考试</title>
      <link href="/blogs/22e916fa.html"/>
      <url>/blogs/22e916fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>1.移动互联网MI(Mobile Internet) 就是将<code>移动通信</code>和<code>互联网</code>二者结合起来，成为一体。</p><p>2.移动互联网三要素：<code>网络</code>、<code>应用</code>、<code>终端</code></p><p>3.移动互联网的主要特点：</p><ul><li>高便携性</li><li>终端移动性</li><li>业务、终端、网络的强关联性</li><li>业务使用的私密性</li><li>局限性：主要体现在网络能力和终端能力两方面的限制</li></ul><p>4.移动互联网的发展速度已远远超越<code>摩尔定律</code>。</p><p>5.Web3.0的关键技术有<code>区块链技术</code>、<code>去中心化应用</code>等。</p><p>6.Web发展简史：</p><ul><li>Web1.0是Web的“<code>可读取</code>”阶段</li><li>Web2.0是Web的“<code>可交互</code>”阶段</li><li>Web3.0是网络的“<code>可执行</code>”阶段</li></ul><p>7.移动网络类型：</p><ul><li>蜂窝网</li><li>无线局域网 (WLAN)</li><li>个人局域网(PAN)</li></ul><p>8.为什么需要蜂窝：<code>频率复用</code>。</p><p>9.蜂窝技术分类：</p><ul><li><code>宏蜂窝</code>技术</li><li><code>微蜂窝</code>技术</li><li><code>智能蜂窝</code>技术</li></ul><p>10.（4G）当前，被ITU所承认主流技术：</p><ul><li><code>LTE</code>（ Long Term Evolution，长期演进）</li><li><code>LTE-A</code>（ LTE-Advanced ）</li></ul><p>11.4G的主要技术：</p><ul><li>正交频分复用（OFDM） </li><li>多输入多输出技术（MIMO） </li><li>载波聚合技术 </li><li>多点协作传输技术 </li><li>无线中继技术 </li><li>上/下行多天线增强技术</li></ul><p>12.（5G）从市场需求来看，<code>移动互联网</code>和<code>物联网</code>是下一代移动通信系统发展的两大主要驱动力。</p><p>13.无线网络的基本类型：</p><ul><li>无线广域网（WWAN）</li><li>无线城域网（WMAN）</li><li>无线局域网（WLAN）</li><li>无线个域网（WPAN）</li><li>无线体域网（WBAN）</li></ul><p>14.<code>不同类型</code>的无线网络所<code>重点关注</code>的协议<code>层次</code>是不一样的。</p><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h2 id="简单爬虫1"><a href="#简单爬虫1" class="headerlink" title="简单爬虫1"></a>简单爬虫1</h2><p>1.搜索引擎的工作过程：</p><ul><li>抓取网页信息</li><li>分析网页</li><li>找到相关文档</li></ul><p>2.搜索引擎并不真正搜索互联网，它搜索的实际上是预先整理好的<code>网页索引数据库</code>。</p><p>3.搜索引擎的发展阶段：</p><ul><li>第一代搜索引擎：集中式检索</li><li>第二代搜索引擎：分布式检索</li><li>第三代搜索引擎的代表是Google</li><li>第四代搜索引擎：主要的变化是从<code>信息检索到信息推送</code>的转变</li></ul><p>4.网络爬虫是一种通过既定<code>规则（网络爬虫算法）</code>，能够<code>自动提取</code>网页信息的<code>程序</code>，是<code>搜索引擎的重要组成部分</code>。</p><p>5.通用网络爬虫的基本工作流程：</p><ul><li>获取初始的URL</li><li>爬取网页，获取新的URL</li><li>将新的URL放入URL队列</li><li>从URL队列中读取新的URL进行网页下载</li><li>设置停止条件</li></ul><p>6.传统爬虫的基本流程：</p><ul><li>发起请求（Request）</li><li>获取响应内容（Response）</li><li>解析内容</li><li>保存数据</li></ul><p>7.HTTP（HyperText Transfer Protocol），即<code>超文本传输协议</code>。采用HTTP协议的程序默认使用的端口号为<code>80</code>。</p><p>8.HTTPS：<code>安全套接字层超文本传输协议</code>。采用HTTPS协议的程序默认使用的端口号为<code>443</code>。</p><p>9.GET和POST的简单比较：</p><blockquote><p>GET和POST的区别就是：请求的数据GET是在url中，POST则是存放在头部 </p><p><code>GET请求</code>：请求的数据会附加在URL之后，以<code>?</code>分割URL和传输数据，多个参数用<code>&amp;</code>连接。URL的编码格式采用的是ASCII编码，而不是unicode， 即是说所有的非ASCII字符都要编码之后再传输。 </p><p> <code>POST请求</code>：POST请求会把请求的数据放置在HTTP请求包的<code>包体</code>中，需要构造一个<code>表单</code>，通过表单提交得到POST请求。 </p><p><code>GET请求的数据会暴露(明文)在地址栏中，而POST请求则不会</code>。 </p><p>get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制。</p></blockquote><p>10.Request—请求头：</p><ul><li><code>Accept</code>请求头表示可接受的响应内容</li><li><code>User-Agent</code>属性表示客户端的身份标识字符串</li><li><code>Cookie</code>是请求报文中可用的属性，也是客户端最重要的请求头</li></ul><p>11.HTTP协议本身是 <code>无状态的</code>，实现状态保持需要 <code>Cookie</code>和<code>Session</code>。</p><p>12.HTTP状态码是用来表示网页服务器响应状态：</p><ul><li><strong>200：请求成功</strong></li><li><strong>400：request错误</strong></li><li><strong>403：服务器拒绝执行</strong></li><li><strong>404：请求的资源没发现</strong></li><li><strong>500：未知错误</strong></li><li><strong>503：服务器当前过载或维护</strong></li></ul><p>13.简单爬虫框架：</p><ul><li>爬虫调度</li><li>模块URL管理器</li><li>网页下载器</li><li>网页解析器</li></ul><h2 id="简单爬虫2"><a href="#简单爬虫2" class="headerlink" title="简单爬虫2"></a>简单爬虫2</h2><p>14.Python中提供了多种解析网页数据的技术，包括<code>正则表达式</code>、<code>XPath</code>、 <code>Beautiful Soup</code>、<code>JSONPath</code>。</p><p>15.什么是正则表达式？</p><ul><li>正则表达式是一种定义了搜索模式的<code>特征序列</code>，主要用于字符串的模式匹 配或字符的匹配</li><li><code>正则表达式就是其中一种进行数据筛选的表达式</code></li></ul><ol><li>贪婪模式就是<code>尽可能多</code>的匹配 ：<code>.*</code>；懒惰模式就是<code>尽可能少</code>的匹配: <code>.*?</code>。</li></ol><p>17.HTML就是网页源代码，是一种结构化的标记语言。HTML 可以描述一个网页的<code>结构信息</code>。</p><p>18.BeautifulSoup提供了<code>CSS选择器</code>来获取节点内容。</p><p>19.CSS（层叠样式表）的选择器用于选择网页元素，可以分为<code>标签选择器</code>、<code>类选择器</code>和<code>id选择器</code>三种。</p><p>20.Robots协议（也称为爬虫协议、机器人协议等）的全称是“<code>网络爬虫排除标准</code>”。</p><p>21.robots.txt 是存放在站点根目录下的一个纯文本文件。例如：<a href="https://www.baidu.com/robots.txt。">https://www.baidu.com/robots.txt。</a></p><p>22.图的遍历算法有两种， 即深度优先算法<code>DFS</code>和宽度优先算法<code>BFS</code>。</p><h2 id="动态爬虫"><a href="#动态爬虫" class="headerlink" title="动态爬虫"></a>动态爬虫</h2><p>23.动态页面的内容生成方式可以分成两类：<code>服务端生成</code>，<code>客户端生成</code>。</p><p>24.Web页面中经常使用的脚本语言有：<code>jsp</code>、<code>asp</code>、<code>php</code>等。</p><p>25.AJAX 最大的优点是<code>在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容</code>。</p><p>26.爬取动态加载的内容方法：</p><ul><li>通过浏览器审查元素解析地址</li><li>通过Selenium模拟浏览器抓取</li></ul><p>27.模拟登录的两种主要方法：</p><ul><li>表单登录 </li><li>Cookie登录</li><li>使用Selenium模拟登录（第三种方法）</li></ul><h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h2><p>28.Scrapy是一个使用Python语言编写的开源网络<code>爬虫框架</code>。</p><p>29.Scrapy爬虫框架主要由：</p><ul><li>引擎</li><li>调度器</li><li>下载器</li><li>Spiders</li><li>Item Pipelines</li><li>下载器中间件</li><li>Spider中间件</li></ul><p>30.Scrapy框架中三种数据流对象：<code>Request</code>、 <code>Response</code>和<code>Items</code></p><ul><li><code>Request</code>是Scrapy中的HTTP<code>请求对象</code></li><li><code>Response</code>是Scrapy中的HTTP<code>响应对象</code></li><li><code>Item</code>是种简单的容器，用于设置目标和<code>保存</code>爬取得到的数据</li></ul><p>31.<code>Basic：基本爬虫模板；Crawl：自动爬虫模板</code>。</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>32.所谓<code>分词</code>，指的就是将一个中文文本分割成若干个<code>独立的</code>、<code>有意义</code>的基本单位的过程。</p><p>33.一般分词方法：</p><ul><li>基于<code>词典</code>的分词方法</li><li>基于<code>理解</code>的分词方法：语义信息</li><li>基于<code>统计</code>的分词方法：频率</li></ul><p>34.正向最大匹配法（FMM）：从<code>句子开头</code>开始处理，没有匹配成功就从<code>段末尾</code>减去一个字。</p><p>35.逆向最大匹配法（BMM）：从<code>句子末尾</code>开始处理，匹配不成功时去掉的是<code>前面</code>的一个汉字。</p><p>36.逆向匹配的切分精度略高于正向匹配。</p><p>37.Jieba分词三种分词模式：</p><ul><li>精确模式（默认）</li><li>全模式</li><li>搜索引擎模式</li></ul><p>38.分词匹配效率：<code>Trie树</code>常用于加速分词查找词典问题。</p><p>39.基于统计分词的步骤：</p><ul><li>建立<code>统计语言模型</code></li><li>对句子进行<code>单词</code>划分，然后对划分结果进行<code>概率计算</code>，获得概率最大的分词方式</li></ul><p>40.概率语言模型是一种基于统计的分词方法，主要思想：<code>词是稳定的组合</code>。</p><p>41.分词方法中所应用的统计模型有：条件随机场模型<code>CRF</code>、隐Markov 模型<code>HMM</code>、<code>最大熵</code>模型、<code>N-gram</code>模型</p><p>42.HMM用来描述一个含有<code>隐含未知参数</code>的马尔可夫过程。</p><p>43.HMM的三个基本问题：</p><ul><li>评估问题</li><li>解码问题</li><li>学习问题</li></ul><p>44.HMM是将分词作为<code>字</code>在<code>字符串</code>中的<code>序列标注</code>来实现的。</p><p>45.Jieba分词算法：<code>有向无环图（DAG)</code>。</p><h2 id="文本相似性"><a href="#文本相似性" class="headerlink" title="文本相似性"></a>文本相似性</h2><p>46.文本相似度计算的常用模型：<code>词袋</code>模型、<code>词向量</code>模型。</p><p>47.文本表示：</p><ul><li>文本表示的意思是把<code>字词</code>处理成<code>向量</code>或<code>矩阵</code>，以便计算机能进行处理。 </li><li>文本表示按照粗细粒度划分，一般可分为<code>字</code>级别、<code>词语</code>级别和<code>句子</code>级别的文本表示。</li><li>文本表示分为<code>离散表示</code>（代表是词袋模型）和<code>分布式（词嵌入）表示</code>。</li></ul><p>48.<code>TF-IDF</code>（词频-逆文件频率）是一种统计方法，用以评估一<code>字词</code>对于文件的重要程度。</p><p>49.TF（词频）：<code>衡量⼀个词在⽂档中出现的频繁程度，但是没有考虑到该词对文档的区分能力</code>。</p><p>50.IDF（逆向文件频率 ）：<code>强调词的区分能力</code>。</p><p>51.TextRank算法能够从一个给定的文本中提取出该文本的<code>关键词</code>、<code>关键词组</code>。</p><p>52.PageRank算法构造的网络中的边是<code>有向无权边</code>，而TextRank算法构造的网络中的边是<code>无向有权边</code>。</p><p>53.进行文档<code>句子相似度</code>分析可以采用<code>词频统计</code>及<code>余弦相似性</code>分析，基本思想是<code>两个句子或文档越相似，则它们的内容（文本）也越相似</code>。</p><p>54.Simhash算法的简单过程：</p><blockquote><p>将每个字符串进行字符串二进制化</p><p>对字符串的二进制值进行加 权</p><p>将所有字符串的加权字符串进行累加，累加顺序按照各自位置进行</p><p>进行降维得到签名的二进制字符串</p></blockquote><p>55.词语是表达<code>语义</code>的基本单元。</p><p>56.神经网络语言模型NNLM有三层：<code>嵌入层</code>、<code>全连接层</code>、<code>输出层</code>。</p><p>57.Word2Vec是一种著名的<code>词嵌入</code>方法， 它可以计算每个单词在其给定语料库环境下的<code>分布式词向量</code>。</p><p>58.word2vec工具主要包含两个模型：<code>跳字模型</code>（skip-gram） 和<code>连续词袋模型</code>（CBOW）。</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>1.Android系统架构采用了软件堆层的架构，主要分为四部分：</p><ul><li>Linux核心层</li><li>Android 运行环境</li><li>应用程序框架层</li><li>应用程序层</li></ul><p>2.AVD（Android Virtual Device，安卓虚拟设备），一般称其为<code>Android模拟器</code>，可以用来模拟一个Android手机或平板电脑。</p><p>3.<code>AndroidManifest.xml</code>是每个应用程序都需要的系统配置文件，它位于应用程序根目录下。<code>入口为MainActivity</code>。</p><h2 id="应用界面"><a href="#应用界面" class="headerlink" title="应用界面"></a>应用界面</h2><p>4.在手机上设计用户界面必须满足以下两点基本要求：</p><ul><li>界面与程序分离</li><li>自适应手机屏幕</li></ul><p>5.Android布局的类型：</p><ul><li>线性布局</li><li>相对布局</li><li>表格布局</li><li>层布局（帧布局）</li><li>网格布局（Android4.0新增的布局管理器）</li><li>约束布局</li></ul><p>6.Android UI都是由<code>布局</code>和<code>控件</code>组成。</p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>7.Android应用程序包括：<code>逻辑控制层</code>与<code>表现层</code>。分开设计。</p><p>8.Android程序的四大组件：</p><ul><li><code>Activity</code>（活动）：根本</li><li><code>Service</code>（服务）</li><li><code>Broadcast Receiver</code>（广播接收器）</li><li><code>Content Provider</code>（内容提供器）</li><li>Intent（意图）：是一个将要执行的操作的<code>抽象描述</code></li></ul><p>9.一个Android应用通常都会包含多个Activity，但<code>只有一个Activity会作为程序的入口</code>。</p><p>10.Android系统是一个<code>多任务</code>的操作系统。</p><p>11.Activity主要有如下的四种状态：</p><ul><li>Running（运行）</li><li>Paused（暂停）</li><li>Stopped（停止）</li><li>Destroyed（销毁）</li></ul><h2 id="应用开发"><a href="#应用开发" class="headerlink" title="应用开发"></a>应用开发</h2><p>12.Android提供了以下三种数据存储方式：</p><ul><li>文件存储</li><li>SharedPreferences存储</li><li>SQLite数据库存储</li></ul><p>13.在TCP/IP通信协议中，套接字（Socket）就是<code>IP地址</code>与<code>端口号</code>的组合。</p><h2 id="移动端机器学习"><a href="#移动端机器学习" class="headerlink" title="移动端机器学习"></a>移动端机器学习</h2><p>14.Tensorflow的设计目标是保证<code>灵活性</code>、 <code>高效性</code>、良好的<code>可扩展性</code>以及<code>可移植性</code>。</p><p>15.TensorFlow有两种编程模式：<code>图模式</code>与<code>eager execution模式</code>。</p><p>16.TensorFlow Lite包括两个主要组件：<code>转换器</code>和<code>解释器</code>。</p><p>17.卷积神经网络：借助<code>卷积核</code>提取特征后，送入全连接网络。</p><p>18.卷积是什么？即特征提取器，就是CBAPD。</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><p>1.移动通信系统的分类，按消息传送的方向与时间分类：<code>单工制</code>、<code>半双工制</code>、<code>双工制</code>（目前基本采用）。</p><p>2.双工制分类：</p><ul><li>频分双工 （FDD）：GSM使用</li><li>时分双工 （TDD）：TD-SCDMA使用</li></ul><p>3.TDD的优势：<code>频谱利用效率更高，系统地容量更大</code>。</p><p>4.通信系统的主要性能指标是<code>有效性</code>和<code>可靠性</code>。</p><p>5.移动通信的特点：</p><ul><li>远近效应</li><li>多普勒效应：当移动台以恒定的速率沿某一方向移动时，由于<code>传播路程差的原因</code>，会出现合成频率在中心频率上下偏移的现象。<strong>速度越大，多普勒效应越明显</strong>。</li><li>电波传播存在多径衰落</li></ul><p>6.<code>信源编码</code>：在发送端，把经过<code>采样</code>和<code>量化</code>后的模拟信号变换成数字脉冲信号的过程</p><p>7.信源编码通常分为三类：</p><ul><li><code>波形编码</code>：语音波形</li><li><code>参数编码</code>：人的发音机制</li><li><code>混合编码</code>：波形编码+参数编码</li></ul><p>8.信道编码技术的目的是如何<code>以最小的监督码元，获得最大检错和纠错能力</code>。</p><p>9.在发送端被传送的信息中附加一些冗余比特（称为<code>监督码元</code>）。</p><p>10.主要的信道编码方式：</p><ul><li>奇偶校验码</li><li>线性分组码：卷积码（非分组码）和Turbo码</li><li>熵编码：香农(Shannon)编码、哈夫曼(Huffman)编码和算术编码 (arithmetic coding)</li></ul><p>11.Turbo码， 又称<code>并行级联卷积码(PCCC)</code>，为2个卷积码的并联，它巧妙地将<code>卷积码</code>和<code>随机交织器</code>结合 在一起， 实现了<code>随机编码</code>的思想。</p><p>12.交织器和删余器的主要作用</p><blockquote><p>把可能存在的连续差错比特分散，以便于信道解码时纠错。 </p><p>从两个校验序列中周期地删除一些校验位，形成校验位序列。</p></blockquote><h2 id="调制和接入"><a href="#调制和接入" class="headerlink" title="调制和接入"></a>调制和接入</h2><p>13.待传输的信号称为<code>调制信号</code>，调制之后的信号称为<code>已调信号</code>。</p><p>14.调制方式可分为<code>模拟调制</code>和<code>数字调制</code>。</p><p>15.模拟调制又可分为<code>幅度调制</code>（AM）、<code>频率调制</code>（FM）和<code>相位调制</code>（PM）。</p><p>16.数字调制三种方式：<code>幅移键控</code>（ASK）、<code>频移键控</code>（FSK）和<code>相移键控</code>（PSK）。</p><p>17.各种调制之间的差别都反映在<code>同相分量</code>I(t)和<code>正交分量</code>Q(t)上。</p><p>18.二进制振幅键控是利用<code>载波的幅度</code>变化来传递数字信息的，其<code>频率</code>和<code>初始相位</code>保持不变。</p><p>19.星座图中的点，可以指示调制信号<code>幅度</code>和<code>相位</code>的可能状态。</p><p>20.常见的多址技术：</p><ul><li><strong>FDMA：不同的用户分配在频率不同的信道上</strong></li><li><strong>TDMA：不同的信号被分配到不同时隙里</strong></li><li><strong>CDMA：码分多址技术</strong></li><li><strong>SDMA：空分多址技术</strong></li></ul><h2 id="4G-5G"><a href="#4G-5G" class="headerlink" title="4G-5G"></a>4G-5G</h2><p>21.4G（IMT-Advanced系统的俗称）是一种<code>宽带接入</code>和分布式的<code>全IP构架</code>网络，是<code>集成多功能</code>的宽带移动通信系统。</p><p>22.移动通信网由三大部分组成：接入网、承载网、核心网。</p><p>23.<code>多载波传输</code>是将<code>高速串行</code>的数据码流转换为N路<code>并行的低速</code>数据码流，然后调制到等频率间隔的N个<code>相互正交的子载波</code>上同时进行传输。</p><p>24.OFDM系统中，需要考虑两种类型的干扰：</p><ul><li>符号间干扰ISI：通过引入<code>保护间隔</code>几乎可以完全消除<code>符号间干扰</code>（保护间隔长度大于无线信道的最大时延扩展）</li><li>载波间干扰ICI：在保护间隔内填入循环前缀信号可消除载波间干扰</li></ul><p>25.OFDM技术的缺点：存在较高的<code>峰值平均功率比</code>。</p><p>26.多天线技术通过在发送端和接收端同时使用<code>多根天线</code>，扩展了<code>空间域</code>。</p><p>27.多天线构成的信道称为<code>MIMO</code>(Multiple Input Multiple Output) 信道，使用多天线技术的系统称为 MIMO无线通信系统。</p><p>28.MIMO系统利用各发送接收天线间的<code>通道响应的独立性</code>. 通过空时编码创造出多个<code>并行的传输空间</code>。</p><p>29.LTE的基本MIMO模型是：</p><ul><li><strong>上行采用单发双收的1×2配置</strong></li><li><strong>下行采用双发双收的2×2配置</strong></li></ul><p>30.<code>MIMO系统中，信道容量随着天线数的增加而线性增大</code>。</p><p>31.LTE最终采用了 统一的多址技术</p><ul><li><strong>上行使用SC-FDMA（单载波频分多址）</strong>：OFDMA峰均比高，在上行使用会增加终端的功放成本和终端功耗</li><li><strong>下行使用OFDMA（正交频分多址）</strong></li></ul><p>32.OFDMA：以OFDM技术为基础，<code>通过为用户分配不同的子载波来区分用户的多址方式</code>。</p><p>33.LTE中，1ms作为<code>LTE的一个调度时间单位</code>，称为一个<code>TTI</code>（transmission time-interval）。</p><p>34.OFDMA的主要思想是从<code>时域</code>和<code>频域</code>两个维度将系统的无线资源划分成<code>资源块RB</code>，<code>每个用户占用其中一个或多个资源块</code>。</p><p>35.LTE的<code>空中接口资源分配的基本单位是物理资源块</code>（Physical RB，PRB）。</p><p>36.<code>带宽的动态配置是通过调整资源块RB数目的多少来完成</code>。</p><p>37.SC-FDMA兼有单载波传输技术<code>峰均比低</code>和频分多址技术<code>频谱利用率高</code>的优点。</p><p>38.LTE-A（Advanced）关键技术：</p><ul><li>载波聚合技术</li><li>增强的MIMO技术</li><li>协作多点传输技术</li></ul><p>39.5G关键技术：</p><ul><li>提高速率技术</li><li>降低时延技术</li><li>提升覆盖技术</li></ul><h2 id="短距离无线通信-wifi"><a href="#短距离无线通信-wifi" class="headerlink" title="短距离无线通信-wifi"></a>短距离无线通信-wifi</h2><p>40.WiFi是一个国际无线局域网（WLAN）标准，全称为Wireless Fidelity（无线保真），又称IEEE802.11b标准。</p><p>41.跳频扩频 (Frequency Hopping Spread Spectrum，简称 FHSS) ，就是载波可以在一个很宽的频带上按照伪随机码的定义从一 个频率<code>跳变</code>到另一个频率。</p><p>42.直接序列扩频 (Direct Sequence Spread Spectrum，简称DSSS)就是<code>使用具有高码率的扩频序列</code>。</p><p>43.RF传输标准是<code>跳频扩频</code>（FHSS）和<code>直接序列扩频</code>（DSSS）。</p><p>44.ALOHA的最大吞吐量为<code>0.184</code> ；时隙ALOHA的最大吞吐量为<code>0.368</code>。</p><p>45.CSMA/CD比CSMA又增加了一个功能， <code>“边说边听”</code>。这种边发送边监听的功能称为<code>冲突检测</code>。</p><p>46.802.11 就使用 CSMA/CA （<code>碰撞避免</code>）协议。而在使用 CSMA/CA 的同时， 还增加使用<code>停止等待协议</code>。</p><p>47.<code>DCF（分布式协调功能）</code>是IEEE802.11 MAC 的基本接入方法，所有要传输数据的用户拥有平等接入网络的机会，通过<code>CSMA/CA</code>和<code>随机退避时间</code>来完成接入。</p><p>48.<code>帧间间隔IFS</code>：所有的站在完成发送后，必须再等待一段很短的时间（继续监听）才能发送下一帧。</p><p>49.帧间间隔类型：</p><ul><li>SIFS（Short IFS）：最高优先级</li><li>PIFS（PCF IFS）：中等优先级</li><li>DIFS（DCF IFS）：最低优先级</li></ul><p>50.SIFS等于节点从<code>发送状态切换到接收状态并能正确解码所需要的时间</code>，或者<code>从接收状态转为发送状态所需要的时间</code>。</p><p>51.信道从忙态变为空闲时，任何一个站要发送数据帧时，不仅都必须<code>等待一个IFS 的间隔</code>，而且还要进入<code>竞争窗口</code>，并计算<code>随机退避时间</code>以便再次重新试图接入到信道。</p><p>52.短距离无线通信主要工作在<code>高频段</code>。</p><p>53.分组传输采用<code>先听后说</code>的思想。</p><p>54.802.11MAC中的载波侦听有<code>物理载波侦听</code>和<code>虚拟载波侦听</code>两种方式。</p><p>55.802.11MAC 中的载波侦听有两种方式：</p><ul><li>物理载波侦听，由物理层提供</li><li>虚拟载波侦听，由 MAC 层提供</li></ul><h2 id="移动自组织网络"><a href="#移动自组织网络" class="headerlink" title="移动自组织网络"></a>移动自组织网络</h2><p>56.移动自组织网络的节点间可通过<code>空中接口</code>直接通信，且具有<code>分组转发</code>能力。</p><p>57.移动Ad Hoc网络由一组<code>无线移动节点</code>组成，是一种<code>不需要</code>依靠现有固定通信网络基础设施的、能够迅速展开使用的网络体系， 所需人工干预最少，是<code>没有任何中心实体</code>、<code>自组织</code>、<code>自愈</code>的网络。</p><p>58.DSDV（destination-sequenced distance-vector）<code>带目的地序列号的距离向量协议</code>。</p><p>59.DV算法不能直接用于Ad Hoc网络。</p><p>60.节点周期在DSDV协议中，每个节点的路由表包括4部分：</p><ul><li>目的节点：序列号保持为<code>偶数</code></li><li>下一跳节点</li><li>度量值（距离值）</li><li>目的节点的序列号</li></ul><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>1.移动互联网和发展特征：</p><ul><li>网络ALL-IP</li><li>终端智能化</li><li>宽带百/千兆</li></ul><p>2.移动终端安全性：</p><ul><li>代码安全</li><li>接入权限</li><li>数字签名</li><li>沙箱隔离</li><li>Android应用典型安全问题</li></ul><p>3.应用程序签名机制：<code>规定APK文件必须被开发者进行数字签名，以便标识应用程序作者和应用程序之间的信任关系</code>。</p><p>4.<code>沙箱</code>（sandbox）为运行中的程序提供<code>隔离环境</code>，它通常严格控制其中的程序所能访问的资源。</p><p>5.防止反编译：</p><ul><li>尽量将敏感信息不放在客户端</li><li>自定义加载器</li><li>增加无用代码进行混淆</li></ul><p>5.在AndroidManifest.xml中利用<code>sharedUserId</code>属性给不同的 package分配相同的userID，通过这样做，两个package可以被当做同一个程序。</p><p>6.新型隐私信息：窃取应用程序内部的用户数据以及通过<code>侧信道攻击技术</code>获取一些敏感数据。</p><p>7.侧信道攻击方法</p><ul><li>功耗攻击（最强有力）</li><li>电磁场攻击</li><li>时间攻击</li></ul><p>8.界面劫持，顾名思义就是正常应用的界面<code>被恶意攻击者劫持</code>，替换上仿冒的恶意界面作恶。</p><p>9.<code>点击劫持是一种视觉上的欺骗手段</code>。</p><p>10.UID的权限：</p><ul><li>声明：&lt; permission&gt;</li><li>使用：&lt; uses-permission&gt;</li></ul><p>11.浏览器设计中使用的最重要的一个安全策略叫做<code>同源策略</code>。</p><p>12.源（origin）就是协议、域名和端口号。<code>若地址里面的协议、域名和端口号均相同则属于同源</code>。</p><blockquote><p>例如： <a href="http://www.a.com/test/index.html">http://www.a.com/test/index.html</a> 的同源检测 </p><p><a href="http://www.a.com/dir/page.html">http://www.a.com/dir/page.html</a> ——成功 </p><p><a href="http://www.child.a.com/test/index.html">http://www.child.a.com/test/index.html</a> ——失败，域名不同 </p><p><a href="https://www.a.com/test/index.html">https://www.a.com/test/index.html</a> ——失败，协议不同 </p><p><a href="http://www.a.com:8080/test/index.html">http://www.a.com:8080/test/index.html</a> ——失败，端口号不同</p></blockquote><p>13.一个域内的脚本仅仅具有本域内的权限，可以理解为<code>本域脚本只能读写本域内的资源</code>，而无法访问其它域的资源。</p><p>14.<code>SQL注入</code>（SQL Injection）就是把SQL命令插入到Web表单然 后提交到所在页面请求（查询字符串），从而达到欺骗服务器执行恶意的SQL命令。</p><p>15.SQL注入可以分为：<code>平台层注入</code>和<code>代码注入</code>。</p><h1 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h1><p>1.PageRank算法：对于某个页面u，<code>Bu</code>表示指向u的所有页面的集合，即u的<code>入链</code>集合，<code>L(v)</code>为页面v所指向的页面个数，即v的<code>出链</code>集合。</p><p>PageRank—算法1：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001147243.png" alt="image-20231108001147243"></p><p>PageRank—算法2：引入参数d，称为阻尼因子，指通过链接点击进入该网页的概率， 那么通过地址栏输入而跳转的概率就是1-d。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001311358.png" alt="image-20231108001311358"></p><p>PageRank算法3：一个页面被访问的随机性应当来自其他所有页面。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231108001358516.png" alt="image-20231108001358516"></p><p>2.4g和5g各种指标：</p><blockquote><p>峰值数据传输速率：这是网络能够提供的最高数据传输速率。在4G中，峰值速率通常为100 Mbps至1 Gbps，而在5G中，可以达到10 Gbps以上。<br>延迟：延迟是指数据从发送到接收所需的时间。在4G中，延迟通常为10毫秒至50毫秒，而在5G中，延迟可以降低到1毫秒以下。<br>频谱效率：频谱效率是指在特定频段内传输的数据量。5G比4G更高效，可以实现更高的频谱效率，从而在相同的频谱资源下提供更多的数据传输。<br>连接密度：连接密度是指网络可以同时支持的设备数量。5G相对于4G具有更高的连接密度，可以同时连接更多的设备。<br>覆盖范围：覆盖范围是指网络信号可以传播的距离。尽管5G的覆盖范围较4G更小，但5G可以通过使用更多的小型基站来提供更广泛的覆盖。<br>流量密度。</p></blockquote><p>3.4g和5g带宽、速率、间隔长度：</p><blockquote><p>带宽：4G网络的带宽通常为20 MHz，而5G网络的带宽可以达到100 MHz或更高。这意味着5G网络具有更大的带宽，可以支持更多的数据传输。<br>速率：4G网络的理论最高下载速率为100 Mbps（兆比特每秒），而5G网络的理论最高下载速率可以达到10 Gbps（千兆比特每秒）。 这意味着5G网络具有更快的传输速度，可以更快地下载和上传数据。<br>间隔长度：4G网络的子载波间隔长度为15 kHz，而5G网络的子载波间隔长度为15 kHz或更小。这意味着5G网络可以在更小的频谱间隔内传输更多的数据，从而提高了频谱利用率。</p></blockquote><p>4.什么是隐藏节点？什么是暴露节点？CSMA/CD协议为什么不能用于WLAN？</p><blockquote><p>隐藏节点：在接收者的通信范围内而在发送者的通信范围外的终端。</p><p>暴露节点：在发送者的通信范围之内而在接收者的通信范围之外的终端。</p><p>无线系统中很难实现冲突检测（CD）：</p><p>难以同时收发</p><p>同时收发时，发送方难以实现冲突检测</p><p>发送方实现CD时，由于隐藏节点和暴露节点，即使发送方检测到信道空闲，在接收端仍可能存在冲突</p><p>并非所有站都能侦听到一个站的发送</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 国科大课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动互连网技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective_Cpp笔记</title>
      <link href="/blogs/2b7e9eb2.html"/>
      <url>/blogs/2b7e9eb2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231027152734799.png" alt="image-20231027152734799"></p><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><ul><li><p>构造函数：ctor</p></li><li><p>析构函数：dtor</p></li><li><p>left-hand side(左手端)：lhs</p></li><li><p>right-hand side(右手端)：rhs</p></li><li><p>成员函数：左侧实参由this指针表现出来，单独使用参数名称rhs。</p></li></ul><blockquote><p>“指向一个T型对象”的指针命名为pt，意思是“pointer to T”。</p><p>对于references使用类似习惯：rw可能是个reference to Widget，ra则是个reference to Airplane。</p></blockquote><h2 id="TR1和Boost"><a href="#TR1和Boost" class="headerlink" title="TR1和Boost"></a>TR1和Boost</h2><ul><li><code>Tr1（“Technical Report 1”）</code>是一份规范，描述加入C++标准程序库的诸多新机能。这些技能以新的class templates和function templates形式体现，针对的题目有<code>hash tables</code>，<code>reference-counting smart pointers</code>，regular expressions，以及更多。所有TR1组件都被置于命名空间tr1内，后者嵌套与命名空间std内。</li><li><code>Boost</code>是个组织，亦是一个网站<a href="http://boost.org">Boost</a>，提供可移植、同僚复审、源码开放的C++程序库。大多数TR1机能是以Boost的工作为基础。在编译器厂商于其C++程序库中含入TR1之前，对那些搜寻TR1实现品的开发人员而言，Boost网站可能是第一个逗留点。Boost提供比TR1更多的东西，所以无论如何值得了解它。</li></ul><h1 id="让自己习惯C"><a href="#让自己习惯C" class="headerlink" title="让自己习惯C++"></a>让自己习惯C++</h1><h2 id="条款1：-视C-为一个语言联邦"><a href="#条款1：-视C-为一个语言联邦" class="headerlink" title="条款1： 视C++为一个语言联邦"></a>条款1： 视C++为一个语言联邦</h2><p>将C++视为一个由语言组成的联邦而非单一语言。C++主要的4个次语言：</p><ul><li><code>C</code>。C++仍是以C为基础。许多时候C++对问题的解法其实不过就是较高级的C解法，但当你以C++内的C成分工作时，高效编程守则映照出C语言的局限：没有模板（<em>templates</em>），没有异常（<em>exceptions</em>），没有重载（<em>overloading</em>）。</li><li><code>Object-Oriented C++</code>。这部分也就是C with Classes所诉求的：classes（包括构造函数和析构函数），封装、继承、多态、virtual函数（动态绑定）等等。</li><li><code>Template C++</code>。实际上由于templates威力强大，它们带来崭新的编程泛型，也就是所谓的template metaprogramming（TMP，模板元编程）。</li><li><code>STL</code>。STL是个template程序库，看名称也知道，但它是非常特殊的一个。STL有自己特殊的办事方式，当你伙同STL一起工作，你必须遵守它的规约。</li></ul><p>C++并不是一个带有一组守则的一体语言，它是从四个次语言组成的联邦政府，每个次语言都有自己的规约。</p><h2 id="条款2：尽量以const，enum，inline替换-define"><a href="#条款2：尽量以const，enum，inline替换-define" class="headerlink" title="条款2：尽量以const，enum，inline替换#define"></a>条款2：尽量以const，enum，inline替换#define</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ASPECT_RATIO 1.653</span></span><br></pre></td></tr></table></figure><p>​    记号名称ASPECT_RATIO也许从未被编译器看见；也许在编译器开始处理源码之前它就被预处理器移走了。于是记号名称ASPECT_RATIO有可能没进入记号表（<em>symbol table</em>）。</p><p>​    以常量替换#define，有两种特殊情况：</p><ol><li><strong>定义常量指针</strong>。由于常量定义式通常被放在头文件内（以便被不同的源码含入），因此有必要将指针（而不是指针所指之物）声明为const。</li><li><strong>class专属常量</strong>。为了将常量的作用域（scope）限制于class内，你必须让它成为class的一个成员（member）；而为确保此常量至多只有一份实体，你必须让它成为一个static成员。</li></ol><p>​    <strong>无法利用#define创建一个class专属常量，因为#define并不重视作用域（<em>scope</em>）</strong>。一旦宏被定义，它就在其后的编译过程中有效（除非在某处被#undef）。这意味着#define不仅不能够用来定义class专属常量，也不能够提供任何封装性。</p><p>​    <strong>enum hack的行为某方面说比较像#define而不像const</strong>。取一个const的地址是合法的，但取一个enum的地址不合法，而取一个#define的地址通常也不合法。</p><h5 id="Remember："><a href="#Remember：" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>对于单纯常量，最好以const对象或enum替换#define。</p><p>对于形似函数的宏，最好改用inline函数替换#define。</p></blockquote><h2 id="条款3：尽可能使用const"><a href="#条款3：尽可能使用const" class="headerlink" title="条款3：尽可能使用const"></a>条款3：尽可能使用const</h2><p>​    const的一件奇妙事情是，它允许你指定一个语义约束（也就是指定一个“不该被改动”的对象），而编译器会强制实施这项约束。它允许你告诉编译器和其他程序员某值应该保持不变。只要这（某值保持不变）是事实，你就该确实说出来，因为说出来可以获得编译器的襄助，确保这条约束不被违反。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">char</span>* p = greeeting;    <span class="comment">//non-const pointer,const data</span></span><br><span class="line"><span class="type">char</span>* <span class="type">const</span> p = greeeting;      <span class="comment">//const pointer,non-const data</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* <span class="type">const</span> p = greeting;  <span class="comment">//const pointer,const data</span></span><br></pre></td></tr></table></figure><p>​    以下两种写法意义相同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">const</span> Widget* pw)</span></span>;  <span class="comment">//f1获得一个指针，指向一个常量的Widget对象</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(Widget <span class="type">const</span> * pw)</span></span>; <span class="comment">//f2也是</span></span><br></pre></td></tr></table></figure><p>​    在一个函数声明式内，const可以和函数返回值、各参数、函数自身（如果是成员函数）产生关联。令函数返回一个常量值，往往可以降低因客户错误而造成的意外，而又不至于放弃安全性和高效性。</p><h3 id="const成员函数"><a href="#const成员函数" class="headerlink" title="const成员函数"></a>const成员函数</h3><ol><li>它们使class接口比较容易被理解。得知哪个函数可以改动对象内容而哪个函数不行，很重要。</li><li>使“操作const对象”成为可能。</li></ol><p>​    两个成员函数如果只是常量性不同，可以被重载。</p><p>​    <code>bitwise const</code>阵营的人相信，成员函数只有在不更改对象之任何成员变量（static除外）时才可以说是const。也就是说它不更改对象内的任何一个bit。</p><p>​    <code>logical constness</code>这一派拥护者主张，一个const成员函数可以修改它所处理的对象内的某些bits，但只有在客户端侦测不出的情况下才得如此。</p><p>​    利用C++的一个与const相关的摆动场：<code>mutable</code>（可变的）。mutable释放掉non-static成员变量的bitwise constness约束。</p><h3 id="在const和non-const成员函数中避免重复"><a href="#在const和non-const成员函数中避免重复" class="headerlink" title="在const和non-const成员函数中避免重复"></a>在const和non-const成员函数中避免重复</h3><p>​    对于”bitwise-constness非我所欲”的问题，mutable是个解决办法，但它不能解决所有的const相关难题。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TextBlock</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> ...</span><br><span class="line"> <span class="type">const</span> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position) <span class="type">const</span></span><br><span class="line"> &#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> text[position];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">char</span>&amp; <span class="keyword">operator</span>[](std::<span class="type">size_t</span> position)  <span class="comment">//现在只调用 const op[]</span></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">     <span class="built_in">const_cast</span>&lt;<span class="type">char</span>&amp;&gt;(          <span class="comment">//将op[]返回值的const转除</span></span><br><span class="line">       <span class="built_in">static_cast</span>&lt;<span class="type">const</span> TextBlock&amp;&gt;(*<span class="keyword">this</span>)      <span class="comment">//为*this加上const</span></span><br><span class="line">          [position]                <span class="comment">//调用const op[]</span></span><br><span class="line">     );</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    共有两次转型：第一次用来为*this添加const（这使接下来调用operator[]时得以调用const版本），第二次则是以const operator[]的返回值中移除const。</p><p>​    添加const的那一次转型强迫进行了一次安全转型（将non-const对象转为const对象），所以我们使用static_cast。移除const的那个动作只可以藉由const_cast完成，没有其他选择。</p><h5 id="Remember：-1"><a href="#Remember：-1" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>将某些东西声明为const可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象、函数参数、函数返回类型、成员函数本体。</p><p>编译器强制实施bitwise constness，但你编写程序时应该使用“概念上的常量性”（<em>conceptual constness</em>）。</p><p>当const和non-const成员函数有着实质等价的实现时，令non-const版本调用const版本可避免代码重复。</p></blockquote><h2 id="条款4：确定对象被使用前已先被初始化"><a href="#条款4：确定对象被使用前已先被初始化" class="headerlink" title="条款4：确定对象被使用前已先被初始化"></a>条款4：确定对象被使用前已先被初始化</h2><p>​    永远在使用对象之前先将它初始化。无任何成员的内置类型，手工完成此事。内置类型以外，确保每一个构造函数都将对象的每一个成员初始化。别混淆<strong>赋值（<em>assignment</em>）</strong>和<strong>初始化（<em>initialization</em>）</strong>。</p><p>​    C++规定，对象的成员变量的初始化动作发生在进入构造函数本体之前。</p><p>​    C++有着十分固定的“成员初始化次序”。次序总是相同：base classes更早于其derived classes被初始化，而class的成员变量总是以其声明次序被初始化。</p><p>​     <code>static 对象</code>，其寿命从被构造出来直到程序结束为止，因此 stack 和 heap-based 对象都被排除。这种对象包括global 对象、定义于 namespace 作用域内的对象、在 classes 内、在函数内，以及在file作用域内被声明为static的对象。 函数内的 static 对象称为local static 对象（因为它们对函数而言是local），其他static 对象称为 non-local static 对象。程序结束时 static 对象会被自动销毁，也就是它们的析构函数会在main()结束时被自动调用。</p><p>​    <code>编译单元</code>（<em>translation unit</em>）是指产出单一目标文件（<em>single object file</em>）的那些源码。基本上它是单一源码文件加上其所含入的头文件（<em>#include files</em>）。</p><p>​    <code>Real problem</code>：如果某编译单元内的某个 non-local static 对象的初始化动作使用了另一编译单元内的某个 non-local static 对象，它所用到的这个对象可能尚未被初始化，因为<strong>C++对“定义于不同编译单元内的non-local static 对象”的初始化次序并无明确定义</strong>。</p><p>​    <strong>Reason</strong>：决定它们的初始化次序相当困难，非常困难，根本无解。在其最常见形式，也就是<strong>多个编译单元内的non-local static对象经由“模板隐式具现化，implicit template instantiations”形成</strong>，不但不可能决定正确的初始化次序，甚至往往不值得寻找“可决定正确次序”的特殊情况。</p><p>​    <strong>Eliminate the problem</strong>：将每个non-local static对象搬到自己的专属函数内（该对象在此函数内被声明为static）。这些函数返回一个reference指向它所含的对象。然后用户调用这些函数，而不直接指涉这些对象。换句话说，non-local static对象被local static对象替换了。这是<code>Singleton</code>模式的一个常见实现手法。</p><p>​    任何一种non-const static对象，不论它是local或non-local，在多线程环境下“等待某事发生”都会有麻烦。处理这个麻烦的一种做法是：在程序的单线程启动阶段（<em>single-threaded startup portion</em>）手工调用所有reference-returning函数，这可消除与初始化有关的”竞速形势（<em>race conditions</em>）“。</p><h5 id="Remember：-2"><a href="#Remember：-2" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>为内置对象进行手工初始化，因为C++不保证初始化它们。</p><p>构造函数最好使用成员初值列（<em>member initialization list</em>），而不要在构造函数本体内使用赋值操作（<em>assignment</em>）。初值列列出的成员变量，其排列次序 应该和它们在class中的声明次序相同。</p><p>为免除”跨编译单元之初始化次序“问题，请以local static对象替换non-local static对象。</p></blockquote><h1 id="构造-析构-赋值运算"><a href="#构造-析构-赋值运算" class="headerlink" title="构造/析构/赋值运算"></a>构造/析构/赋值运算</h1><h2 id="条款5：了解C-默默编写并调用哪些函数"><a href="#条款5：了解C-默默编写并调用哪些函数" class="headerlink" title="条款5：了解C++默默编写并调用哪些函数"></a>条款5：了解C++默默编写并调用哪些函数</h2><p>​    什么时候empty class（空类）不再是个empty class呢？<strong>当C++处理过它之后</strong>。</p><p>​    <strong>notice</strong>：编译器产出的析构函数是个non-virtual，除非这个class的base class自身声明有virtual析构函数（这种情况下这个函数的虚属性virtualness主要来自base class）。</p><h5 id="Remember：-3"><a href="#Remember：-3" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>编译器可以暗自为class创建default构造函数、copy构造函数、copy assignment操作符，以及析构函数。</p></blockquote><h2 id="条款6：若不想使用编译器自动生成的函数，就该明确拒绝"><a href="#条款6：若不想使用编译器自动生成的函数，就该明确拒绝" class="headerlink" title="条款6：若不想使用编译器自动生成的函数，就该明确拒绝"></a>条款6：若不想使用编译器自动生成的函数，就该明确拒绝</h2><p>​    要阻止copying，可以将copy构造函数或copy assignment操作符声明为private。藉由明确声明一个成员函数，你阻止了编译器暗自创建其专属版本；而令这些函数为private，使你得以成功阻止人们调用它。</p><p>​    一般而言这个做法并不绝对安全，因为member函数和friend函数还是可以调用你的private函数。<strong>将成员函数声明为private而且故意不实现它们</strong>，将阻止copying行为，如果某些人不慎调用任何一个，会获得一个<strong>连接错误（<em>linkage error</em>）</strong>。</p><h5 id="Remember：-4"><a href="#Remember：-4" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>为驳回编译器自动（暗自）提供的机能，可将相应的成员函数声明为private并且不予实现。</p></blockquote><h2 id="条款7：为多态基类声明virtual析构函数"><a href="#条款7：为多态基类声明virtual析构函数" class="headerlink" title="条款7：为多态基类声明virtual析构函数"></a>条款7：为多态基类声明virtual析构函数</h2><p>​    如果class不含virtual函数，通常表示它并不意图被用来做一个base class。</p><p>​    欲实现出 virtual 函数，对象必须携带某些信息，主要用来在运行期决定哪一个 virtual 函数该被调用。这份信息通常是由一个所谓<code>vptr （virtual table pointer）</code>指针指 出。vptr 指向一个函数指针构成的数组，称为<code>vtbl（virtual table）</code>；每一个带有 virtual 函数的 class 都有一个相应的vtbl。当对象调用某一virtual函数，实际被调用的函数取决于该对象的vptr所指的那个vtbl——编译器在其中寻找适当的函数指针。</p><p>​    只有当class内含至少一个virtual函数，才为它声明virtual析构函数。</p><p>​    标准string不含任何virtual函数。不要企图继承一个标准容器或任何其他“带有non-virtual析构函数”的class。</p><p>​    <code>pure virtual</code>函数导致<code>abstract</code>（抽象）classes——也就是不能被实体化（<em>instantiated</em>）的class。也就是说，你不能为那种类型创建对象。</p><p>​    必须为pure virtual析构函数提供一份定义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AWOV</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">AWOV</span>() = <span class="number">0</span>;<span class="comment">//声明pure virtual析构函数</span></span><br><span class="line">&#125;</span><br><span class="line">AWOV::~AWOV &#123; &#125;    <span class="comment">//pure virtual析构函数的定义</span></span><br></pre></td></tr></table></figure><p>​    析构函数的运作方式是，最深层派生（<em>most derived</em>）的那个class其析构函数最先被调用，然后是其每一个base class的析构函数被调用。</p><p>​    “给base classes一个virtual析构函数”，这个规则只适用于<code>polymorphic</code>（带多态性质的）base classes身上。这种base classes的设计目的是为了用来“通过base class接口处理derived class对象”。</p><h5 id="Remember：-5"><a href="#Remember：-5" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>polymorphic（带多态性质的）base classes应该声明一个virtual析构函数。如果class带有任何virtual函数，它就应该拥有一个virtual析构函数。</p><p>Classes的设计目的如果不是作为base classes使用，或不是为了具备多态性（<em>polymorphically</em>），就不该声明virtual析构函数。</p></blockquote><h2 id="条款8：别让异常逃离析构函数"><a href="#条款8：别让异常逃离析构函数" class="headerlink" title="条款8：别让异常逃离析构函数"></a>条款8：别让异常逃离析构函数</h2><h5 id="Remember：-6"><a href="#Remember：-6" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>析构函数绝对不要吐出异常。如果一个被析构函数调用的函数可能抛出异常，析构函数应该捕捉任何异常，然后吞下它们（不传播）或结束程序。</p><p>如果客户需要对某个操作函数运行期间抛出的异常做出反应，那么class应该提供一个普通函数（而非在析构函数中）执行该操作。</p></blockquote><h2 id="条款9：绝不在构造和析构过程中调用virtual函数"><a href="#条款9：绝不在构造和析构过程中调用virtual函数" class="headerlink" title="条款9：绝不在构造和析构过程中调用virtual函数"></a>条款9：绝不在构造和析构过程中调用virtual函数</h2><p>​    base class构造期间virtual函数绝不会下降到derived classes阶层。取而代之的是，对象的作为就像隶属base类型一样。非正式的说法或许比较传神：在base class构造期间，virtual函数不是virtual函数。</p><p>​    确定你的构造函数和析构函数都没有（在对象被创建和被销魂期间）调用virtual函数，而它们调用的所有函数也都服从同一约束。</p><p>​    你无法使用virtual函数从base classes向下调用，在构造期间，你可以藉由“令derived classes将必要的构造信息向上传递至base class构造函数”替换之而加以弥补。</p><p>​    比起在成员初值列（<em>member initialization list</em>）内给予base class所需数据，利用辅助函数创建一个值传给base class构造函数往往比较方便（也比较可读）。令此函数为static，也就不可能意外指向“初期未成熟之对象内尚未初始化的成员变量”。这很重要，正是因为“那些成员变量处于未定义状态”，所以“在base class构造和析构期间调用的virtual函数不可下降至derived classes”。</p><h5 id="Remember：-7"><a href="#Remember：-7" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>在构造和析构期间不要调用virtual函数，因为这类调用从不下降至derived class（比起当前执行构造函数和析构函数的那层）。</p></blockquote><h2 id="条款10：令operator-返回一个reference-to-this"><a href="#条款10：令operator-返回一个reference-to-this" class="headerlink" title="条款10：令operator=返回一个reference to *this"></a>条款10：令operator=返回一个reference to *this</h2><p>​    为了实现“连锁赋值”，赋值操作符必须返回一个reference指向操作符的左侧实参。</p><p>​    这只是个协议，并无强制性。</p><h5 id="Remember：-8"><a href="#Remember：-8" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>令赋值（<em>assignment</em>）操作符返回一个reference to *this。</p></blockquote><h2 id="条款11：在operator-中处理”自我赋值”"><a href="#条款11：在operator-中处理”自我赋值”" class="headerlink" title="条款11：在operator=中处理”自我赋值”"></a>条款11：在operator=中处理”自我赋值”</h2><p>​    并不明显的自我赋值，是<code>“别名”（aliasing）</code>带来的结果：所谓“别名”就是”有一个以上的方法指称（指涉）某对象“。</p><p>​    在operator=函数内手工排列语句（确保代码不但“异常安全”而且“自我赋值安全”）的一个替代方案是，使用所谓的 copy and swap 技术。</p><h5 id="Remember：-9"><a href="#Remember：-9" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>确保当对象自我赋值时 operator= 有良好行为。其中技术包括比较“来源对象” 和“目标对象”的地址、精心周到的语句顺序、以及 copy-and-swap。</p><p>确定任何函数如果操作一个以上的对象，而其中多个对象是同一个对象时，其行为仍然正确。</p></blockquote><h2 id="条款12：复制对象时勿忘其每一个成分"><a href="#条款12：复制对象时勿忘其每一个成分" class="headerlink" title="条款12：复制对象时勿忘其每一个成分"></a>条款12：复制对象时勿忘其每一个成分</h2><p>​    copying函数：copy构造函数和copy assignment操作符。</p><p>​    编写一个copying函数，（1）确保复制所有local成员变量，（2）调用所有base classes内的适当的copying函数。</p><p>​    不该令copy assignment操作符调用copy构造函数。反方向，令copy构造函数调用copy assignment操作符同样无意义。构造函数来初始化新对象，而assignment操作符只施行于已初始化对象身上。</p><p>​    如果copy构造函数和copy assignment操作符有相近的代码，消除重复代码的做法是，建立一个新的成员函数给两者调用。这样的函数往往是private而且常被命名为init。这个策略可以安全消除copy构造函数和copy assignment操作符之间的代码重复。</p><h5 id="Remember：-10"><a href="#Remember：-10" class="headerlink" title="Remember："></a><strong>Remember</strong>：</h5><blockquote><p>Copying 函数应该确保复制“对象内的所有成员变量”及“所有 base class 成分”。 </p><p>不要尝试以某个 copying 函数实现另一个copying 函数。应该将共同机能放进第三个函数中，并由两个coping 函数共同调用。</p></blockquote><h1 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h1><p>​    资源一旦利用，将来必须归还给系统，不然将导致内存泄漏。</p><h2 id="条款13：以对象管理资源"><a href="#条款13：以对象管理资源" class="headerlink" title="条款13：以对象管理资源"></a>条款13：以对象管理资源</h2><p>​    把资源放进对象内，我们便可依赖C++的“析构函数自动调用机制”确保资源被释放。</p><ul><li><strong>获得资源后立刻放进管理对象（<em>managing object</em>）内</strong>。“以对象管理资源”的观念被称为“资源取得时机便是初始化时机”（<em>Resource Acquisition Is Initialization</em>;<code>RAII</code>）。</li><li><strong>管理对象运用析构函数确保资源被释放</strong>。如果资源释放动作可能抛出异常，但<a href="# 条款8：别让异常逃离析构函数">条款8</a>能解决问题。</li></ul><p>​    <code>auto_ptr</code>是个“类指针对象”，即<strong>“智能指针”</strong>。auto_ptrs有一个性质：不能通过copy构造函数或copy assignment操作符复制它们，否则它们会变成null，而复制所得的指针将取得资源的唯一拥有权！</p><p>​    <code>RCSP</code>（<em>reference-counting smart pointer</em>），“引用计数型智慧指针”，也是个智能指针，持续追踪共有多少对象指向某笔资源，并在无人指向它时自动删除该资源。提供的行为类似垃圾回收（<em>garbage collection</em>），不同的是无法打破环状引用（<em>cycles of reference</em>）。</p><h5 id="Remember：-11"><a href="#Remember：-11" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>为防止资源泄漏，请使用RAII对象，它们在构造函数中获得资源并在析构函数中释放资源。</p><p>两个常被使用的RAII classes分别是<code>tr1::shared_ptr</code>和auto_ptr。前者通常是较佳选择，因为其copy行为比较直观。若选择auto_ptr，复制动作会使它（被复制物）指向null。</p></blockquote><h2 id="条款14：在资源管理类中小心coping行为"><a href="#条款14：在资源管理类中小心coping行为" class="headerlink" title="条款14：在资源管理类中小心coping行为"></a>条款14：在资源管理类中小心coping行为</h2><p>​    当<a href="# 条款13：以对象管理资源">RAII</a>对象被复制，选择有两种可能：</p><ul><li><strong>禁止复制</strong>。复制动作对RAII class并不合理，便应该禁止。</li><li><strong>对底层资源祭出“引用计数法”（reference-count）</strong>。内含一个<code>tr1::shared_ptr</code>成员变量，RAII classes便可实现出reference-counting copying行为。</li></ul><p>tr1::shared_ptr允许指定所谓的“删除器”（<em>deleter</em>），是一个函数或函数对象（<em>function object</em>），当引用次数为0时便被调用（此机能并不存在于auto_ptr——它总是将其指针删除）。删除器对tr1::shared_ptr构造函数而言是可有可无的第二参数。</p><ul><li><strong>复制底部资源</strong>。复制资源管理对象时，进行的是“深度拷贝”。</li><li><strong>转移底部资源的拥有权</strong>。这是auto_ptr奉行的复制意义。</li></ul><h5 id="Remember：-12"><a href="#Remember：-12" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>复制RAII对象必须一并复制它所管理的资源，所以资源的copying行为决定RAII对象的copying行为。</p><p>普遍而常见的RAII class copying行为是：抑制copying、施行引用计数法。不过其他行为也都可能被实现。</p></blockquote><h2 id="条款15：在资源管理类中提供对原始资源的访问"><a href="#条款15：在资源管理类中提供对原始资源的访问" class="headerlink" title="条款15：在资源管理类中提供对原始资源的访问"></a>条款15：在资源管理类中提供对原始资源的访问</h2><p>​    tr1::shared_ptr和auto_ptr都提供一个<code>get成员函数</code>，用来执行显示转换，会返回智能指针内部的原始指针（的复件）。它们重载了指针取值（<em>pointer dereferencing</em>）操作符（operator-&gt;和operator*），允许隐式转换至底部原始指针。</p><p>​    RAII classes并不是为了封装某物而存在，它们的存在是为了确保一个特殊行为——资源释放会发生。</p><h5 id="Remember：-13"><a href="#Remember：-13" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>APIs往往要求访问原始资源（<em>raw resource</em>），所以每一个RAII class应该提供一个“取得其所管理之资源”的办法</p><p>对原始资源的访问可能经由显式转换或隐式转换。一般而言显式转换比较安全，但隐式转换对客户比较方便。</p></blockquote><h2 id="条款16：成对使用new和delete时要采用相同形式"><a href="#条款16：成对使用new和delete时要采用相同形式" class="headerlink" title="条款16：成对使用new和delete时要采用相同形式"></a>条款16：成对使用new和delete时要采用相同形式</h2><h5 id="Remember：-14"><a href="#Remember：-14" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果你在 new 表达式中使用[ ]，必须在相应的 delete 表达式中也使用[]。如果你在 new 表达式中不使用[ ]，一定不要在相应的 delete 表达式中使用[ ]。</p></blockquote><h2 id="条款17：以独立语句将newed对象置入智能指针"><a href="#条款17：以独立语句将newed对象置入智能指针" class="headerlink" title="条款17：以独立语句将newed对象置入智能指针"></a>条款17：以独立语句将newed对象置入智能指针</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">priority</span><span class="params">()</span></span>;    <span class="comment">//揭示处理程序的优先权</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">processWidget</span><span class="params">(std::tr1::shared_ptr&lt;Widget&gt; pw, <span class="type">int</span> priority)</span></span>;  <span class="comment">//用来在某动态分配所得的Widget上进行某些带有优先权的处理</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">processWidget</span>(std::tr1::<span class="built_in">shared_ptr</span>&lt;Widget&gt;(<span class="keyword">new</span> Widget), <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>​    第一个实参<code>std::tr1::shared_ptr&lt;Widget&gt;(new Widget)</code>由两部分组成：</p><ul><li><strong>执行“new Widget”表达式</strong></li><li><strong>调用tr1::shared_ptr构造函数</strong></li></ul><p>于是在调用processWidget之前，编译器必须创建代码，做以下三件事：</p><ul><li><strong>调用priority</strong></li><li><strong>执行“new Widget”</strong></li><li><strong>调用tr1::shared_ptr</strong></li></ul><p>可以确定的是 “new Widget” 一定执行于trl::shared ptr构造函数调用之前，因为这个表达式的结果还要被传递作为trl::shared_ptr 构造函数的一个实参，但对 priority的调用则可以排在第一或第二或第三执行。</p><p>​    在对processWidget的调用过程中可能引发资源泄漏，因为在<strong>“资源被创建（经由“new Widget”）”</strong>和<strong>“资源被转换为资源管理对象”</strong>两个时间点之间有可能发生异常干扰。</p><p>​    使用<strong>分离语句</strong>，分别写出 (1) 创建widge, (2) 将它置入一个智能指针内，然后再把那个智能指针传给 processWidget：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="function">tr1::shared_ptr&lt;Widget&gt; <span class="title">pw</span><span class="params">(<span class="keyword">new</span> Widget)</span></span>;</span><br><span class="line"><span class="built_in">processWidget</span>(pw, <span class="built_in">priority</span>());</span><br></pre></td></tr></table></figure><p>​    编译器对于<strong>“跨越语句的各项操作”没有重新排列的自由</strong>(只有在同一语句内它才拥有那个自由度)。</p><h5 id="Remember：-15"><a href="#Remember：-15" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>以独立语句将 newed 对象存储于(置入)智能指针内。如果不这样做，一旦异常被抛出，有可能导致难以察觉的资源泄漏。</p></blockquote><h1 id="设计与声明"><a href="#设计与声明" class="headerlink" title="设计与声明"></a>设计与声明</h1><h2 id="条款18：让接口容易被正确使用，不易被误用"><a href="#条款18：让接口容易被正确使用，不易被误用" class="headerlink" title="条款18：让接口容易被正确使用，不易被误用"></a>条款18：让接口容易被正确使用，不易被误用</h2><p>​    加上const可以限制类型内什么事可做，什么事不能做。</p><p>​    “让types容易被正确使用，不容易被误用”的表现形式：“除非有好理由，否则应该尽量令你的types的行为与内置types一致”。</p><p>​    tr1::shared_ptr提供的某个构造函数接受两个实参：一个是<code>被管理的指针</code>，另一个是<code>引用次数变成0时</code>将被调用的<code>“删除器”</code>。</p><h5 id="Remember：-16"><a href="#Remember：-16" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>好的接口很容易被正确使用，不容易被误用。你应该在你的所有接口中努力达成这些性质。</p><p>“促进正确使用”的办法包括接口的一致性，以及与内置类型的行为兼容。</p><p>“阻止误用”的办法包括建立新类型、限制类型上的操作，束缚对象值，以及消除客户的资源管理责任。</p><p>trl::shared_ptr 支持定制型删除器（<em>custom deleter</em>）。这可防范 DLL 问题，可被用来自动解除<a href="# 条款14：在资源管理类中小心coping行为">互斥锁</a>（<em>mutexes</em>）等等。</p></blockquote><h2 id="条款19：设计class犹如设计type"><a href="#条款19：设计class犹如设计type" class="headerlink" title="条款19：设计class犹如设计type"></a>条款19：设计class犹如设计type</h2><p>​    class设计规范：</p><ul><li><strong>新type的对象应该如何被创建和销毁？</strong></li><li><strong>对象的初始化和对象的赋值该有什么样的差别？</strong></li><li><strong>新type的对象如果被passed by value（以值传递），意味着什么？</strong></li><li><strong>什么是新type的“合法值”？</strong></li><li><strong>你的新type需要配合某个继承图系（inheritance graph）吗？</strong></li><li><strong>你的新type需要什么样的转换？</strong></li><li><strong>什么样的操作符和函数对此新type而言是合理的？</strong></li><li><strong>什么样的标准函数应该驳回？</strong></li><li><strong>谁该取用新type的成员？</strong></li><li><strong>什么是新type的“未声明接口”（<em>undeclared interface</em>）？</strong></li><li><strong>你的新type有多么一般化？</strong></li><li><strong>你真的需要一个新type吗？</strong></li></ul><h5 id="Remember：-17"><a href="#Remember：-17" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>Class的设计就是type的设计。在定义一个新type之前，请确定你已经考虑过本条款覆盖的所有讨论主题。</p></blockquote><h2 id="条款20：宁以pass-by-reference-to-const替换pass-by-value"><a href="#条款20：宁以pass-by-reference-to-const替换pass-by-value" class="headerlink" title="条款20：宁以pass-by-reference-to-const替换pass-by-value"></a>条款20：宁以pass-by-reference-to-const替换pass-by-value</h2><p>​    pass by reference-to-const效率高，没有任何构造函数或析构函数被调用，因为没有任何新对象被创建。</p><p>​    以by reference方式传递参数也可以避免<code>slicing</code>（对象切割）问题。</p><p>​    references往往以<strong>指针实现</strong>出来，因此pass by reference通常意味着真正传递的是指针。</p><h5 id="Remember：-18"><a href="#Remember：-18" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>尽量以 pass-by-reference-to-const 替换 pass-by-value。前者通常比较高效，并可避免切割问题（<em>slicing problem</em>）。<br>以上规则并不适用于内置类型，以及 STL 的迭代器和函数对象。对它们而言， pass-by-value 往往比较适当。</p></blockquote><h2 id="条款21：必须返回对象时，别妄想返回其reference"><a href="#条款21：必须返回对象时，别妄想返回其reference" class="headerlink" title="条款21：必须返回对象时，别妄想返回其reference"></a>条款21：必须返回对象时，别妄想返回其reference</h2><p>​    reference只是个名称，代表某个既有对象。</p><p>​    函数有两种创建新对象的途径：<strong>在stack空间或在heap空间创建</strong>。如果定义一个local变量，就是在stack空间创建对象。</p><p>​    任何函数如果返回一个reference指向某个local对象，都将一败涂地。（如果函数返回指针指向一个local对象，也是一样）。</p><h5 id="Remember：-19"><a href="#Remember：-19" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝不要返回pointer或reference指向一个local stack对象，或返回reference指向一个heap-allocated对象，或返回pointer或reference指向一个local static对象而有可能同时需要多个这样的对象。<a href="# 条款4：确定对象被使用前已先被初始化">条款4</a>为“在单线程环境中合理返回reference指向一个local static对象”提供了设计实例。</p></blockquote><h2 id="条款22：将成员变量声明为private"><a href="#条款22：将成员变量声明为private" class="headerlink" title="条款22：将成员变量声明为private"></a>条款22：将成员变量声明为private</h2><p>​    成员变量的封装性与”成员变量的内容改变时所破坏的代码数量”成反比。所谓改变，也许是从class中移除它。</p><p>​    从封装的角度看，只有两种访问权限：<strong>private（提供封装）</strong>和<strong>其他（不提供封装）</strong>。</p><h5 id="Remember：-20"><a href="#Remember：-20" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>切记将成员变量声明为private。这可赋予客户访问数据的一致性、可细微划分访问控制、允诺约束条件获得保证，并提供class作者以充分的实现弹性。</p><p>protected并不比public更具封装性。</p></blockquote><h2 id="条款23：宁以non-member、non-friend替换member函数"><a href="#条款23：宁以non-member、non-friend替换member函数" class="headerlink" title="条款23：宁以non-member、non-friend替换member函数"></a>条款23：宁以non-member、non-friend替换member函数</h2><p>​    推崇封装的原因：它使我们能够改变事物而只影响有限客户（能够看到改变的人）。</p><p>​    考虑对象内的数据：越少代码可以看到数据（也就是访问它），越多的数据可被封装，越能自由地改变对象数据。</p><p>​    对于“有多少代码可以看到某一块数据”的一种粗糙测量：<strong>越多函数可以访问，数据的封装性就越低</strong>。</p><p>​    member函数不只可以访问class内的private数据，也可以取用private函数、enums、typedefs等等。non-member和non-friend函数无法访问上述任何东西。</p><h5 id="Remember：-21"><a href="#Remember：-21" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>宁可拿non-member non-friend函数替换member函数。这样做可以增加封装性、包裹弹性（<em>packaging flexibility</em>）和机能扩充性。</p></blockquote><h2 id="条款24：若所有参数皆需类型转换，请为此采用non-member函数"><a href="#条款24：若所有参数皆需类型转换，请为此采用non-member函数" class="headerlink" title="条款24：若所有参数皆需类型转换，请为此采用non-member函数"></a>条款24：若所有参数皆需类型转换，请为此采用non-member函数</h2><p>​    在non-explicit构造函数的情况下，只有当参数被列于<code>参数列</code>（<em>parameter list</em>）内，这个参数才是隐式类型转换的合格参与者。地位相当于“被调用之成员函数所隶属的那个对象”——即this对象——的那个隐喻参数，绝不是隐式转换的合格参与者。</p><p>​    member函数的反面是non-member函数，不是friend函数。</p><p>​    不能够只因函数不该成为member，就自动让它成为friend。</p><h5 id="Remember：-22"><a href="#Remember：-22" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果你需要为某个函数的所有参数（包括被this指针所指的那个隐喻参数）进行类型转换，那么这个函数必须是个non-member。</p></blockquote><h2 id="条款25：考虑写出一个不抛异常的swap函数"><a href="#条款25：考虑写出一个不抛异常的swap函数" class="headerlink" title="条款25：考虑写出一个不抛异常的swap函数"></a>条款25：考虑写出一个不抛异常的swap函数</h2><p>​    <code>pimpl</code>手法：以指针指向一个对象，内含真正数据。</p><p>​    通常我们不能够（不被允许）改变std命名空间内的任何东西，但可以（被允许）为标准templates（如swap）制造特化版本，使它专属于我们自己的classes。</p><p>​    所有STL容器都提供有public swap成员函数和std::swap<code>特化</code>版本（用以调用前者）。</p><p>​    C++只允许对class templates<code>偏特化</code>（<em>partially specialize</em>），在function templates身上偏特化是行不通的。</p><p>​    客户可以全特化std内的templates，但不可以添加新的templates（或classes或functions或其他任何东西）到std里头。std的内容完全由C++标准委员会决定，标准委员会禁止我们膨胀那些已经声明好的东西。</p><p>​    C++<code>名称查找法则</code>（<em>name lookup rules</em>）：更具体地说是所谓argument-dependent lookup（实参取决之查找规则）或Koenig lookup法则。</p><p>​    如果swap的缺省实现码对class或class template提供可接受的效率，不需要额外做任何事，任何尝试置换（<em>swap</em>）对象都会取得缺省版本。</p><p>​    如果swap缺省实现版的效率不足（几乎总是意味着你的class或template使用了某种pimpl手法），可以做以下事情：</p><blockquote><p>1.提供一个public swap成员函数，让它高效地置换你的类型的两个对象值。这个函数绝不该抛出异常。</p><p>2.在你的class或template所在的命名空间内提供一个non-member swap，并令它调用上述swap成员函数。</p><p>3.如果你正编写一个class（而非class template），为你的class特化std::swap。并令他调用你的swap成员函数。</p><p>如果调用swap，确定包含一个using声明式，以便让std::swap在函数内曝光可见，然后不加任何namespace修饰符，赤裸裸地调用swap。</p></blockquote><p>​    <code>成员版swap绝不可抛出异常</code>。因为swap的一个最好的应用是<strong>帮助classes（和class templates）提供强烈的异常安全性（<em>exception-safety</em>）保障</strong>。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="条款26：尽可能延后变量定义式的出现时间"><a href="#条款26：尽可能延后变量定义式的出现时间" class="headerlink" title="条款26：尽可能延后变量定义式的出现时间"></a>条款26：尽可能延后变量定义式的出现时间</h2><p>​    延后变量的定义，直到非得使用该变量的前一刻为止，尝试延后这份定义直到能够给它初值实参为止。能够避免构造（和析构）非必要对象，还可以避免无意义的default构造行为。</p><h5 id="Remember：-23"><a href="#Remember：-23" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>尽可能延后变量定义式的出现。这样做可增加程序的清晰度并改善程序效率。</p></blockquote><h2 id="条款27：尽量少做转型动作"><a href="#条款27：尽量少做转型动作" class="headerlink" title="条款27：尽量少做转型动作"></a>条款27：尽量少做转型动作</h2><p>​    C风格转型(<em>old-style casts</em>)：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(T)expression  <span class="comment">//将expression转型为T</span></span><br></pre></td></tr></table></figure><p>​    函数风格转型动作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">T</span>(expression)  <span class="comment">//将expression转型为T</span></span><br></pre></td></tr></table></figure><p>​    C++还提供四种新式转型（<em>new-style</em>或<em>C++-style casts</em>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">const_cast</span>&lt;T&gt;( expression )</span><br><span class="line"><span class="built_in">dynamic_cast</span>&lt;T&gt;( expression )</span><br><span class="line"><span class="built_in">reinterpret_cast</span>&lt;T&gt;( expression )</span><br><span class="line"><span class="built_in">static_cast</span>&lt;T&gt;( expression )</span><br></pre></td></tr></table></figure><ul><li>const_cast 通常被用来将<code>对象的常量性转除</code>（<em>cast away the constness</em>） 。它也是<code>唯一</code>有此能力的C++-style 转型操作符。</li><li>dynamic_cast 主要用来执行<code>“安全向下转型”</code>(<em>safe downcasting</em>)，也就是用来决定某对象是否归属继承体系中的某个类型。它是<code>唯一无法由旧式语法执行的动作</code>，也是<code>唯一可能耗费重大运行成本</code>的转型动作。</li><li>reinterpret_cast 意图执行<code>低级转型</code>，实际动作（及结果）可能取决于编译器,，这也就表示它<code>不可移植</code>。例如将一个 pointer to int转型为一个int。这一类转型在低级代码以外很少见。</li><li>static_cast用来<code>强迫隐式转换</code>（<em>implicit conversions</em>），例如将 non-const 对象转为 const 对象（就像<a href="# 条款3：尽可能使用const">条款3</a>所为），或将int转为double等等。它也可以用来执行上述<code>多种转换的反向转换</code>，例如将 void* 指针转为 typed 指针，将 pointer-to-base 转为 pointer-to-derived。但它无法将 const 转为 non-const——这个只有 const_cast 才办得到。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span> &#123; ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base &#123; ... &#125;;</span><br><span class="line">Derived d;</span><br><span class="line">Base* pb = &amp;d;    <span class="comment">//隐喻地将Derived*转换为Base*</span></span><br></pre></td></tr></table></figure><p>​    建立一个base class指针指向一个derived class对象，但有时候这两个指针值并不相同。这种情况下（有时候）会有个<code>偏移量</code>（<em>offset</em>）在运行期被施行于<strong>Derived*</strong>指针身上，用以取得正确的<strong>Base*</strong>指针。对象的布局方式和它们的地址计算方式随编译器的不同而不同，那意味“由于知道对象如何布局”而设计的转型，在某一平台行得通，在其他平台并不一定行得通。</p><p>​    之所以需要dynamic_cast，通常是因为想在derived class对象身上执行derived class操作函数，但只有一个“指向base”的pointer或reference，只能靠它们来处理对象。有两个一般性做法可以避免：</p><p>​    1.使用容器并在其中存储直接指向derived class对象的指针（通常是智能指针，见<a href="# 条款13：以对象管理资源">条款13</a>），消除了“通过base class接口处理对象”的需要。</p><blockquote><p>弊端：无法在同一个容器内存储指针“指向所有可能的各种派生类”。如果要处理多种窗口类型，需要多个容器，它们都必须具备类型安全性（<em>type-safe</em>）。</p></blockquote><p>​    2.在base class内提供virtual函数，做你想对各个派生类做的事。</p><p>​    绝对必须避免所谓的“连串dynamic_casts”。</p><h5 id="Remember：-24"><a href="#Remember：-24" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>如果可以，尽量避免转型，特别是在注重效率的代码中避免dynamic_casts。如果有个设计需要转型动作，试着发展无需转型的替代设计。</p><p>如果转型是必要的，试着将它隐藏于某个函数背后。客户随后可以调用该函数，而不需将转型放进他们自己的代码内。</p><p>宁可使用C++-style（新式）转型，不要使用旧式转型。前者很容易辨识出来，而且也比较有着分门别类的职掌。</p></blockquote><h2 id="条款28：避免返回handles指向对象内部成分"><a href="#条款28：避免返回handles指向对象内部成分" class="headerlink" title="条款28：避免返回handles指向对象内部成分"></a>条款28：避免返回handles指向对象内部成分</h2><ol><li>成员变量的封装性最多只等于”返回其reference“的函数的访问级别。</li><li>如果const成员函数传出一个reference，后者所指数据与对象自身有关联，而它又被存储于对象之外，那么这个函数的调用者可以修改那笔数据。</li></ol><p>如果返回的是指针或迭代器，相同的情况还是发生，原因也相同。</p><p>​    Reference、指针和迭代器统统都是所谓的handles（号码牌，用来取得某个对象），而返回一个”代表对象内部数据“的handle，随之而来的便是”降低对象封装性“的风险。</p><p>​    绝对不该令成员函数返回一个指针指向”访问级别较低“的成员函数。</p><p>​    dangling handles（空悬的号码牌）：这种handles所指东西（的所属对象）不复存在。</p><h5 id="Remember：-25"><a href="#Remember：-25" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>避免返回handles（包括references、指针、迭代器）指向对象内部。遵守这个条款可增加封装性，帮助const成员函数的行为像个const，并将发生”虚吊号码牌“（<em>dangling handles</em>）的可能性降至最低。</p></blockquote><h2 id="条款29：为”异常安全“而努力是值得的"><a href="#条款29：为”异常安全“而努力是值得的" class="headerlink" title="条款29：为”异常安全“而努力是值得的"></a>条款29：为”异常安全“而努力是值得的</h2><p>​    当异常被抛出时，带有<code>异常安全性</code>的函数会：</p><ul><li><strong>不泄露任何资源</strong>。</li><li><p><strong>不允许数据败坏</strong>。</p><p>解决资源泄漏：以对象（例如智能指针tr1::shared_ptr）管理资源。</p></li></ul><p>​    一般性规则：较少的码就是较好的码，因为出错机会比较少，而且一旦有所改变，被误解的机会也比较少。</p><p>​    异常安全函数（<em>Exception-safe functions</em>）提供三个保证之一：</p><ul><li><strong>基本承诺</strong>：如果异常被抛出，程序内的任何事物仍然保持在有效状态下。没有任何对象或数据结构会因此而败坏，所有对象都处于一种内部前后一致的状态（例如所有的class约束条件都继续获得满足）。然而程序的现实状态（<em>exact state</em>）恐怕不可预料。</li><li><strong>强烈保证</strong>：如果异常被抛出，程序状态不改变。调用这样的函数需有这样的认知：如果函数成功，就是完全成功，如果函数失败，程序会回复到”调用函数之前“的状态。与基本承诺对比，如果调用一个只提供基本承诺的函数，而真的出现异常，程序有可能处于任何状态——只要那是个合法状态。</li><li><strong>不抛掷（<em>nothrow</em>）保证</strong>，承诺绝不抛出异常，因为它们总是能够完成它们原先承诺的功能。作用于内置类型（例如ints，指针等等）身上的所有操作都提供nothrow保证。这是异常安全码中一个必不可少的关键基础材料。</li></ul><p>异常安全码（<em>Exception-safe code</em>）必须提供上述三种保证之一。如果它不这样做，它就不具备异常安全性。</p><p>​    可能的话请提供nothrow保证，但对大部分函数而言，抉择往往落在基本保证和强烈保证之间。</p><p>​    <code>copy and swap</code>策略会导致强烈保证：</p><blockquote><p>原则：为你打算修改的对象（原件）做出一份副本，然后在那副本身上做一切必要修改。若有任何修改动作抛出异常，原对象仍保持未改变状态。待所有改变都成功后，再将修改过的那个副本和原对象在一个不抛出异常的操作中置换（<em>swap</em>）。</p></blockquote><p>​    实现上通常是将所有”隶属对象的数据“从原对象放进另一个对象内，然后赋予原对象一个指针，指向那个所谓的实现对象（<em>implementation object</em>，即副本）。这种手法常被称为<code>pimpl idiom</code>，<a href="# 条款31：将文件间的编译依存关系降至最低">条款31</a>详细描述了它。</p><p>​    “copy-and-swap”策略是对对象状态做出”全有或全无“改变的一个很好办法，但一般而言它并不保证整个函数有强烈的异常安全性。原因：</p><blockquote><p>”连带影响“（<em>side effects</em>）：如果函数只操作局部性状态（local state），便相对容易地提供强烈保证。但是当函数对”非局部性数据“（non-local data）有连带影响时，提供强烈保证就困难得多。</p></blockquote><p>​    “强烈保证”并非在任何时刻都显得实际。当”强烈保证“不切实际时，就必须提供”基本保证“。</p><p>​    一个软件系统要不就具备异常安全性，要不就全然否定，没有所谓的”局部异常安全系统“。</p><h5 id="Remember：-26"><a href="#Remember：-26" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>异常安全函数（<em>Exception-safe functions</em>）即使发生异常也不会泄漏资源或允许任何数据结构败坏。这样的函数区分为三种可能的保证：基本型、强烈型、不抛异常型。</p><p>”强烈保证“往往能够以copy-and-swap实现出来，但”强烈保证“并非对所有函数都可实现或具备现实意义。</p><p>函数提供的”异常安全保证“通常最高只等于其所调用的各个函数的”异常安全保证“中的最弱者。</p></blockquote><h2 id="条款30：透彻了解inlining的里里外外"><a href="#条款30：透彻了解inlining的里里外外" class="headerlink" title="条款30：透彻了解inlining的里里外外"></a>条款30：透彻了解inlining的里里外外</h2><p>​    inline函数，看起来像函数，动作像函数，比宏好得多，可以调用它们又不需要蒙受函数调用所招致的额外开销。</p><p>​    编译器最优化机制通常被设计用来浓缩那些”不含函数调用”的代码，当inline某个函数，或许编译器就因此有能力对它（函数本体）执行<code>语境相关最优化</code>。</p><p>​    inline函数，“对此函数的每一个调用”都以函数本体替换之。</p><p>​    过度热衷inlining会造成程序体积太大（可用空间而言）。 即使拥有虚内存，inline造成的代码膨胀亦会导致额外的换页行为（<em>paging</em>），降低指令高速缓存装置的击中率（<em>instruction cache hit rate</em>）以及伴随这些而来的效率损失。</p><p>​    如果inline函数的本体很小，编译器针对“函数本体”所产出的码可能比针对“函数调用”所产出的码更小。函数inlining确实可能导致较小的目标码（<em>object code</em>）和较高的指令高速缓存装置击中率。</p><p>​    inline只是对编译器的一个申请，不是强制命令。</p><p>​    inline申请：</p><ul><li>隐喻方式：将函数定义于class定义式内（通常是成员函数，friend函数也是）。</li><li>明确声明：在函数定义式前加上关键字inline。</li></ul><p>inline函数<code>通常</code>一定被置于头文件内，因为<code>大多数建置环境</code>（<em>build environments</em>）在编译过程中进行inlining，而为了将一个“函数调用”替换为“被调用函数的本体”，编译器必须知道那个函数长什么样子。Templates<code>通常</code>也被置于头文件内，因为它一旦被使用，编译器为了将它具现化，需要知道它长什么样子。<code>Template的具现化与inlining无关</code>。</p><p>​    大部分编译器拒绝将太过复杂（例如带有循环或递归）的函数inlining，而所有对virtual函数的调用（除非是最平淡无奇的）也都会使inlining 落空。这不该令你惊讶，因为virtual意味“等待，直到运行期才确定调用哪个函数”，而inline意味“执行前，先将调用动作替换为被调用函数的本体”。</p><p>​    一个表面上看似inline的函数是否真是inline，取决于你的建置环境，主要取决于编译器。幸运的是大多数编译器提供了一个诊断级别：如果它们无法将你要求的函数inline化，会给你一个警告信息（见<a href="#">条款53</a>）。</p><p>​    编译器通常不对“函数指针而进行的调用”实施inlining。</p><p>​    inline函数无法随着程序库的升级而升级。</p><p>​    决定哪些函数该被声明为inline的<code>逻辑策略</code>：一开始先不要将任何函数声明为inline，或至少将inlining施行范围局限在那些“一定成为inline”（见<a href="#">条款46</a>）或“十分平淡无奇”的函数身上。</p><h5 id="Remember：-27"><a href="#Remember：-27" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>将大多数inlining限制在小型、被频繁调用的函数身上。这可使日后的调试过程和二进制升级（<em>binary upgradability</em>）更容易，也可使潜在的代码膨胀问题最小化，使程序的速度提升机会最大化。</p><p>不要只因为function templates出现在头文件，就将它们声明为inline。</p></blockquote><h2 id="条款31：将文件间的编译依存关系降至最低"><a href="#条款31：将文件间的编译依存关系降至最低" class="headerlink" title="条款31：将文件间的编译依存关系降至最低"></a>条款31：将文件间的编译依存关系降至最低</h2><p>​    两个classes，一个只提供接口，另一个负责实现该接口。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span>  <span class="comment">//标准程序库组件不该被前置声明</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span>  <span class="comment">//含入tr1::shared_ptr</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonImpl</span>;  <span class="comment">//Person实现类的前置声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span>;      <span class="comment">//Person接口用到的classes的前置声明</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Person</span>(<span class="type">const</span> std::string&amp; name, <span class="type">const</span> Date&amp; birthday, <span class="type">const</span> Address&amp; addr);</span><br><span class="line">    <span class="function">std::string <span class="title">name</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">birthDate</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">address</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::tr1::shared_ptr&lt;PersonImpl&gt; pImpl;  <span class="comment">//指针, 指向实现物;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    在这里，main class（<em>Person</em>）只内含一个指针成员（这里使用std::tr1::shared_ptr，指向其实现类（<em>PersonImpl</em>）。<code>pimpl idiom</code>（pimpl是“pointer to implementation”的缩写）。</p><p>​    <code>接口与实现分离</code>，分离的关键在于以“声明的依存性”替换“定义的依存性”，设计策略：</p><ul><li><strong>如果使用object reference或object pointers可以完成任务，就不要使用objects</strong>。可以只靠一个类型声明式就定义出指向该类型的references和pointers；但如果定义某类型的objects，就需要用到该类型的定义式。</li><li><strong>如果能够，尽量以class声明式替换class定义式</strong>。声明一个函数而它用到某个class时，并不需要该class的定义；纵使函数以by value方式传递该类型的参数（或返回值）亦然。</li><li><strong>为声明式和定义式提供不同的头文件</strong>。</li></ul><p>使用pimple idiom的classes，往往被称为<code>Handle classes</code>。让class变成一个Handle class并不会改变它做的事，只会改变它做事的方法。</p><p>另一个制作<code>Handle class</code>的办法是，令Person成为一种特殊的 abstract base class（抽象基类），称为<code>Interface class</code>。这种 class的目的是详细一一描述derived classes的接口（见<a href="# 条款34：区分接口继承和实现继承">条款34</a>），因此它通常不带成员变量，也没有构造函数，只有一个 virtual析构函数（见<a href="# 条款7：为多态基类声明virtual析构函数">条款7</a>）以及一组pure virtual函数，用来叙述整个接口。</p><p>​    Interface class的客户必须有办法为这种class创建新对象。它们通常调用一个特殊函数，此函数扮演“真正将被具现化”的那个derived classes的构造函数角色。这样的函数通常称为<code>factory（工厂）函数</code>或<code>virtual构造函数</code>。它们返回指针（或更为可取的智能指针，见<a href="# 条款18：让接口容易被正确使用，不易被误用">条款18</a>），指向动态分配所得对象，而该对象支持interface class的接口。这样的函数又往往在interface class内被声明为<code>static</code>。</p><p>​    支持interface class接口的那个具象类（<em>concrete classes</em>）必须被定义出来，而且真正的构造函数必须被调用。一切都在virtual构造函数实现码所在的文件内秘密发生。</p><p>​    Handle classes和interface classes解除了接口和实现之间的耦合关系，从而降低文件间的编译依存性（<em>compilation dependencies</em>）。</p><p>​    将会付出一些代价：运行期丧失若干速度，为每个对象超额付出若干内存。</p><p>​    不论Handle classes或interface classes，一旦脱离inline函数都无法有太大做为。</p><p>​    应该考虑以渐进方式使用这些技术。在程序发展过程中使用Handle classes或interface classes以求实现码有所变化时对其客户带来最小冲击。而当它们导致速度和/或大小差异过于重大以至于classes之间的耦合相形之下不成为关键时，就以具象类（<em>concrete classes</em>）替换Handle classes或interface classes。</p><h5 id="Remember：-28"><a href="#Remember：-28" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>支持“编译依存性最小化”的一般构想是：相依于声明式，不要相依于定义式。基于此构想的两个手段是Handle classes或interface classes。</p><p>程序库头文件应该以“完全且仅有声明式”（<em>full and declaration-only formas</em>）的形式存在。这种做法不论是否涉及templates都适用。</p></blockquote><h1 id="继承与面向对象设计"><a href="#继承与面向对象设计" class="headerlink" title="继承与面向对象设计"></a>继承与面向对象设计</h1><p>​    “public继承”意味”is-a”；virtual函数意味“接口必须被继承”，non-virtual函数意味“接口和实现都必须被继承”。</p><h2 id="条款32：确定你的public继承塑模出is-a关系"><a href="#条款32：确定你的public继承塑模出is-a关系" class="headerlink" title="条款32：确定你的public继承塑模出is-a关系"></a>条款32：确定你的public继承塑模出is-a关系</h2><p>​    规则：<strong>public inheritance</strong>（公开继承）意味着<strong>“is-a”</strong>（是一种）的关系。</p><p>​    令class D（“Derived”）以public形式继承class B（“Base”），则每一个类型为D的对象同时也是一个类型为B的对象，反之不成立。B比D表现出更一般化的概念，而D比B表现出更特殊化的概念。</p><p>​     代码通过编译并不表示就可以正确运作。</p><h5 id="Remember：-29"><a href="#Remember：-29" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>“public继承”意味<strong>is-a</strong>。适用于base classes身上的没意见事情一定也适用于derived classes身上，因为每一个derived class对象也都是一个base class对象。</p></blockquote><h2 id="条款33：避免遮掩继承而来的名称"><a href="#条款33：避免遮掩继承而来的名称" class="headerlink" title="条款33：避免遮掩继承而来的名称"></a>条款33：避免遮掩继承而来的名称</h2><p>​    内层作用域的名称会遮掩（遮蔽）外围作用域的名称。</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231115192506634.png" alt="image-20231115192506634"></p><p>​    当编译器处于SomeFunc的作用域内并遭遇名称x时，它在local作用域内查找是否有什么东西带着这个名称。 如果找到就不再找其他作用域。</p><p>​    derived class作用域被嵌套在base class作用域内：</p><p><img src="https://picyuan-1321960394.cos.ap-beijing.myqcloud.com/image-20231115194625399.png" alt="image-20231115194625399"></p><p>​    如果继承base class并加上重载函数，希望重新定义或覆写（推翻）其中一部分，则必须为那些原本会被遮掩的每个名称引入一个<code>using声明式</code>，否则某些希望继承的名称会被遮掩。</p><p>​    inline<code>转交函数</code>（<em>forwarding function</em>）的另一个用途是为那些不支持using声明式（注：这并非正确行为）的老旧编译器另辟一条新路，将继承而得的名称汇入derived class作用域内。</p><h5 id="Remember：-30"><a href="#Remember：-30" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>derived classes内的名称会遮掩base classes内的名称。在public继承下从来没有人希望如此。</p><p>为了让被遮掩的名称再见天日，可使用using声明式或转交函数（<em>forwarding functions</em>）。</p></blockquote><h2 id="条款34：区分接口继承和实现继承"><a href="#条款34：区分接口继承和实现继承" class="headerlink" title="条款34：区分接口继承和实现继承"></a>条款34：区分接口继承和实现继承</h2><p>​    public继承概念：函数接口（<em>function interfaces</em>）继承和函数实现（<em>function implementations</em>）继承。</p><p>​    public形式继承：</p><ul><li><strong>成员函数的接口总是会被继承8</strong>。</li><li><strong>声明一个pure virtual函数的目的是为了让derived classes只继承函数接口</strong>。pure virtual函数有两个最突出的特性：它们必须被任何”继承了它们“的具象class重新声明，而且它们在抽象class中通常没有定义。可以为pure virtual函数提供定义，但调用它的唯一途径是”调用时明确指出其class名称“。</li><li><strong>声明简朴的（非纯）impure virtual函数的目的，是让derived classes继承该函数的接口和缺省实现</strong>。</li><li><strong>声明non-virtual函数的目的是为了令derived classes继承函数的接口及一份强制性实现</strong>。non-virtual函数代表的意义是不变性（<em>invariant</em>）凌驾特异性（<em>specialization</em>）。</li></ul><h5 id="Remember：-31"><a href="#Remember：-31" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>接口继承和实现继承不同。在public继承之下，derived classes总是继承base class的接口</p><p>pure virtual函数只具体指定接口继承。</p><p>简朴的（非纯）impure virtual函数具体指定接口继承及缺省实现继承。</p><p>non-virtual函数具体指定接口继承以及强制性实现继承。</p></blockquote><h2 id="条款35：考虑virtual函数以外的其他选择"><a href="#条款35：考虑virtual函数以外的其他选择" class="headerlink" title="条款35：考虑virtual函数以外的其他选择"></a>条款35：考虑virtual函数以外的其他选择</h2><h3 id="藉由Non-Virtual-Interface手法实现Template-Method模式"><a href="#藉由Non-Virtual-Interface手法实现Template-Method模式" class="headerlink" title="藉由Non-Virtual Interface手法实现Template Method模式"></a>藉由Non-Virtual Interface手法实现Template Method模式</h3><p>​    <strong>Template Method</strong>设计模式（与C++ templates并无关联）的一个独特表现形式：令客户通过public non-virtual成员函数间接调用private virtual函数，称为<code>non-virtual interface（NVI）手法</code>。这个non-virtual函数称为virtual函数的外覆器（<em>wrapper</em>）。</p><p>​    外覆器（<em>wrapper</em>）确保virtual函数被<code>调用之前</code>设定好适当场景，并在<code>调用结束之后</code>清理场景。</p><ul><li>“事前工作”可以包括：锁定互斥器（<em>locking a mutex</em>）、制造运转日志记录项（<em>log entry</em>）、验证class约束条件、验证函数先决条件。</li><li>“事后工作”可以包括：互斥器解除锁定（<em>unlocking a mutex</em>）、验证函数的事后条件、再次验证class约束条件。</li></ul><blockquote><p>使用non-virtual interface（NVI）手法，那是<strong>Template Method</strong>设计模式的一种特殊形式。它以public non-virtual成员函数包裹较低访问性（private或protected）的virtual函数。</p></blockquote><h3 id="藉由Function-Pointers实现Strategy模式"><a href="#藉由Function-Pointers实现Strategy模式" class="headerlink" title="藉由Function Pointers实现Strategy模式"></a>藉由Function Pointers实现Strategy模式</h3><blockquote><p>将virtual函数替换为”函数指针成员变量“，这是<strong>Strategy</strong>设计模式的一种分解表现形式。</p></blockquote><h3 id="藉由tr1-function完成Strategy模式"><a href="#藉由tr1-function完成Strategy模式" class="headerlink" title="藉由tr1::function完成Strategy模式"></a>藉由tr1::function完成Strategy模式</h3><p>​    以tr1::function替换函数指针，将因此允许客户在计算人物健康指数时，使用任何兼容的可调用物（<em>callable entity</em>）。</p><blockquote><p>以tr1::function成员变量替换virtual函数，因而允许使用任何可调用物（<em>callable entity</em>）搭配一个兼容于需求的签名式。这也是<strong>Strategy</strong>设计模式的某种形式。</p></blockquote><h3 id="古典的Strategy模式"><a href="#古典的Strategy模式" class="headerlink" title="古典的Strategy模式"></a>古典的Strategy模式</h3><blockquote><p>将继承体系内的virtual函数替换为另一个继承体系内的virtual函数。这是<strong>Strategy</strong>设计模式的传统实现手法。</p></blockquote><h5 id="Remember：-32"><a href="#Remember：-32" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>virtual函数的替代方案包括NVI手法及<strong>Strategy</strong>设计模式的多种形式。NVI手法自身是一个特殊形式的<strong>Template Method</strong>设计模式。</p><p>将机能从成员函数移到class外部函数，带来的一个缺点是，非成员函数无法访问class的non-public成员。</p><p>tr1::function对象的行为就像一般函数指针。这样的对象可接纳”与给定的目标签名式（<em>target signature</em>）兼容“的所有可调用物（<em>callable entity</em>）。</p></blockquote><h2 id="条款36：绝不重新定义继承而来的non-virtual函数"><a href="#条款36：绝不重新定义继承而来的non-virtual函数" class="headerlink" title="条款36：绝不重新定义继承而来的non-virtual函数"></a>条款36：绝不重新定义继承而来的non-virtual函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">mf</span><span class="params">()</span></span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: <span class="keyword">public</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">mf</span><span class="params">()</span></span>;<span class="comment">//遮掩了B::mf</span></span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>public继承以为<strong>is-a</strong>（是一种）的关系。class内声明一个non-virtual函数会为该class建立起一个不变性凌驾其特异性。</p><ul><li>适用于B对象的每一件事，也适用于D对象，因为每个D对象都是一个B对象；</li><li>B的derived classes一定会继承mf的接口和实现，因为mf是B的一个non-virtual函数。</li></ul><p>任何情况下都不该重新定义一个继承而来的non-virtual函数。</p><h5 id="Remember：-33"><a href="#Remember：-33" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝对不要重新定义继承而来的non-virtual函数。</p></blockquote><h2 id="条款37：绝不重新定义继承而来的缺省参数值"><a href="#条款37：绝不重新定义继承而来的缺省参数值" class="headerlink" title="条款37：绝不重新定义继承而来的缺省参数值"></a>条款37：绝不重新定义继承而来的缺省参数值</h2><p>​    <code>virtual函数</code>是<code>动态绑定</code>（<em>dynamically bound</em>），而<code>缺省参数值</code>是<code>静态绑定</code>（<em>statically bound</em>）。    </p><p>​    静态绑定又名前期绑定，early binding；动态绑定又名后期绑定，late binding。</p><p>​    对象静态类型（<em>static type</em>）：对象在程序中被声明时所采用的类型。</p><p>​    对象动态类型（<em>dynamic type</em>）：目前所指对象的类型。动态类型可以表现出一个对象将会有什么行为。可在程序执行过程中改变（通常是由赋值动作）。</p><p>​    virtual函数是动态绑定而来，意思是调用一个virtual函数时，究竟调用哪一份函数实现代码，取决于发出调用的那个对象的动态类型。</p><p>​    为何缺省参数值是静态绑定？为了程序的执行速度和编译器是实现上的简易度。如果缺省参数值是动态绑定，编译器就必须有某种办法在运行期为virtual函数决定适当的参数缺省值。</p><h5 id="Remember：-34"><a href="#Remember：-34" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>绝对不要重新定义一个继承而来的缺省参数值，因为缺省参数值都是静态绑定，而virtual函数——你唯一应该覆写的东西——却是动态绑定。</p></blockquote><h2 id="条款38：通过复合塑模出has-a或”根据某物实现出“"><a href="#条款38：通过复合塑模出has-a或”根据某物实现出“" class="headerlink" title="条款38：通过复合塑模出has-a或”根据某物实现出“"></a>条款38：通过复合塑模出has-a或”根据某物实现出“</h2><p>​    <code>复合</code>（<em>composition</em>）：是类型之间的一种关系。某种类型的对象内含它种类型的对象。</p><p>​    当复合发生于<code>应用域</code>内的对象之间，表现出<strong>has-a</strong>关系；当复合发生于<code>实现域</code>内则是表现出<strong>is-implemented-in-terms-of</strong>的关系。</p><h5 id="Remember：-35"><a href="#Remember：-35" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>复合（<em>composition</em>）的意义和public继承完全不同。</p><p>在应用域（<em>application domain</em>），复合意味has-a（有一个）。在实现域（<em>implementation domain</em>），复合意味is-implemented-in-terms-of（根据某物实现出）。</p></blockquote><h2 id="条款39：明智而审慎地使用private继承"><a href="#条款39：明智而审慎地使用private继承" class="headerlink" title="条款39：明智而审慎地使用private继承"></a>条款39：明智而审慎地使用private继承</h2><p>​    private继承纯粹只是一种实现技术。</p><p>​    Private继承意味is-implemented-in-terms-of（根据某物实现出）。复合（<em>composition</em>）的意义也是如此。<strong>尽可能</strong>使用复合，<strong>必要</strong>时才使用private继承。</p><p>​    何时才是必要？</p><ul><li>当protected成员和/或virtual函数牵扯进来时。</li><li>当空间方面的利害关系足以踢翻private继承的支柱时（这是一种激进情况）。</li></ul><p>C++裁定凡是独立（非附属）对象都必须有非零大小。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Empty</span>&#123; &#125;;</span><br><span class="line"><span class="comment">//在大多数编译器中sizeof(Empty)获得1，因为面对“大小为零的独立（非附属）对象”，通常C++官方勒令默默安插一个char到空对象内。齐位需求（alignment）可能造成编译器为内含Empty class加上一些衬垫（padding）。</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HoldsAnInt</span> : <span class="keyword">private</span> Empty&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>EBO</code>（<em>empty base optimization</em>；空白基类最优化）：几乎可以确定sizeof（HoldAnInt）==sizeof（int）。EBO一般只在<code>单一继承</code>（而非多重继承）下才可行。</p><h5 id="Remember：-36"><a href="#Remember：-36" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>Private继承意味is-implemented-in-terms-of（根据某物实现出）。它通常比复合（<em>composition</em>）的级别低。但是当derived class需要访问protected base class的成员，或需要重新定义继承而来的virtual函数时，这么设计是合理的。</p><p>和复合（<em>composition</em>）不同，private继承可以造成empty base最优化。这对致力于”对象尺寸最小化”的程序库开发者而言，可能很重要。</p></blockquote><h2 id="条款40：明智而审慎地使用多重继承"><a href="#条款40：明智而审慎地使用多重继承" class="headerlink" title="条款40：明智而审慎地使用多重继承"></a>条款40：明智而审慎地使用多重继承</h2><p>​    <code>“砖石型多重继承”</code>：某个基类被间接地重复继承多次，这将是致命的。</p><p>​    解决：将该基类成为一个virtual base class，令所有直接继承自它的classes采用<code>“virtual继承”</code>。</p><p>​    使用virtual继承的classes所产生的对象往往比使用non-virtual继承的兄弟们体积大，访问virtual base classes的成员变量时，也比访问non-virtual base classes的成员变量速度慢。</p><p>​    对virtual base classes（亦相当于对virtual继承）忠告：</p><ol><li>非必要不使用virtual bases。平常请使用non-virtual继承。</li><li>如果必须使用virtual base classes，尽可能避免在其中放置数据。</li></ol><h5 id="Remember：-37"><a href="#Remember：-37" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>多重继承比单一继承复杂。它可能导致新的歧义性，以及对virtual继承的需要。</p><p>virtual继承会增加大小、速度、初始化（及赋值）复杂度等等成本。如果virtual base classes不带任何数据，将是最具实用价值的情况。</p><p>多重继承的确有正当用途。其中一个情节涉及“public继承某个Interface class”和“private继承某个协助实现的class”的两相组合。</p></blockquote><h1 id="模板与泛型编程"><a href="#模板与泛型编程" class="headerlink" title="模板与泛型编程"></a>模板与泛型编程</h1><p>​    <code>C++ template机制</code>自身是一部完整的图灵机（<em>Turing-complete</em>）：<strong>它可以被用来计算任何可计算的值</strong>。</p><p>​    <code>模板元编程</code>（<em>template metaprogramming</em>），创造出<strong>“在C++编译器内执行并于编译完成时停止执行”</strong>的程序。</p><h2 id="条款41：了解隐式接口和编译期多态"><a href="#条款41：了解隐式接口和编译期多态" class="headerlink" title="条款41：了解隐式接口和编译期多态"></a>条款41：了解隐式接口和编译期多态</h2><p>​    <strong>显示接口</strong>（<em>explicit interface</em>）：源码中明确可见。通常由<code>函数的签名式</code>（也就是函数名称、参数类型、 返回类型）构成。</p><p>​    <strong>隐式接口</strong>：并不基于函数签名式，而是由<code>有效表达式</code>（<em>valid expressions</em>）组成。</p><p>​    <strong>运行期多态</strong>：类创建的对象对virtual成员函数的调用表现出运行期多态（<em>runtime polymorphism</em>）。</p><p>​    <strong>编译期多态</strong>：“以不同的template参数具现化function templates”会导致调用不同的函数。具现行为发生在编译器。</p><p>​    “运行期多态”和“编译期多态”的之间差异类似于<strong>“哪一个重载函数该被调用”</strong>（发生在编译期）和<strong>“哪一个virtual函数该被绑定”</strong>（发生在运行期）之间的差异。</p><h5 id="Remember：-38"><a href="#Remember：-38" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>classes和templates都支持接口（<em>interfaces</em>）和多态（<em>polymorphism</em>）。</p><p>对classes而言接口是显示的（<em>explicit</em>），以函数签名为中心。多态则是通过virtual函数发生于运行期。</p><p>对template参数而言，接口是隐式的（<em>implicit</em>），奠基于有效表达式。多态则是通过template具现化和函数重载解析（<em>function overloading resolution</em>）发生于编译期。</p></blockquote><h2 id="条款42：了解typename的双重意义"><a href="#条款42：了解typename的双重意义" class="headerlink" title="条款42：了解typename的双重意义"></a>条款42：了解typename的双重意义</h2><p>​    当声明template类型参数，class和typename的意义完全相同。</p><p>​    <code>template内</code>出现名称如果相依于某个<code>template参数</code>，称之为<code>从属名称</code>（<em>dependent names</em>）。如果从属名称为<code>class内呈嵌套状</code>，称它为<code>嵌套从属名称</code>（<em>nested dependent name</em>）。</p><p>​    int是一个并不依赖任何template参数的名称。这样的名称是谓<code>非从属名称</code>（<em>non-dependent names</em>）。</p><p>​    C++有个解析规则：如果解析器在template中遭遇一个嵌套从属名称，它便假设这个名称不是这个类型，除非你告诉它是。所以缺省情况下嵌套从属名称不是类型。（<code>有例外</code>）</p><p>​    一般性规则：任何时候当你想要在template中指涉一个嵌套从属类型名称，就必须在紧邻它的前一个位置放上<code>关键字typename</code>。</p><p>​    typename只被用来验明嵌套从属类型名称，其他名称不该有它存在。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> C&gt;       <span class="comment">//允许使用“typename”（或“class”）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> C&amp; container,     <span class="comment">//不允许使用“typename”</span></span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">typename</span> C::iterator iter)</span></span>;<span class="comment">//一定要使用“typename”</span></span><br></pre></td></tr></table></figure><p>​    <code>例外</code>：typename不可以出现在<code>base classes list</code>内的嵌套从属类型名称之前，也不可在<code>member initialization list</code>（成员初值列）中作为base class修饰符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> Base&lt;T&gt;::Nested&#123;  <span class="comment">//base class list中不允许“typename&quot;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Derived</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">  :Base&lt;T&gt;::Nested(x)//member initialization list中不允许”typename“嵌套从属类型名称</span></span><br><span class="line"><span class="function">    &#123;</span></span><br><span class="line">        <span class="keyword">typename</span> Base&lt;T&gt;::Nested temp;<span class="comment">//既不在base class list中也不在member initialization list中，</span></span><br><span class="line">                        <span class="comment">//作为一个base class修饰符需加上typename</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>std::iterator_traits&lt;IterT&gt;::value_type</code>：类型为IterT的对象所指之物的类型。</p><h5 id="Remember：-39"><a href="#Remember：-39" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>声明template参数时，前缀关键字class和typename可互换。</p><p>请使用关键字typename标识嵌套从属类型名称；但不得在base classes list（基类列）或member initialization list（成员初值列）内以它作为base class修饰符。</p></blockquote><h2 id="条款43：学习处理模板化基类内的名称"><a href="#条款43：学习处理模板化基类内的名称" class="headerlink" title="条款43：学习处理模板化基类内的名称"></a>条款43：学习处理模板化基类内的名称</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MsgSender</span>&lt;CompanyZ&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ...    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    class定义式最前头的”template&lt;&gt;”语法象征这既不是template也不是标准class，而是个特化版的MsgSender template，在template实参是CompanyZ时被使用。这是所谓的<code>模板全特化</code>（<em>total template specialization</em>）：template MsgSender针对类型CompanyZ特化了，而且其特化是全面性的，也就是说一旦类型参数被定义为CompanyZ，再没有其他template参数可供变化。</p><p>​    C++编译器往往拒绝在<code>templatized base classes</code>（模板化基类）内寻找继承而来的<code>名称</code>。原因：它知道base class templates有可能被特化，而那个特化版本可能不提供和一般性template相同的接口。</p><p>​    面对“指涉base class members”的无效references编译器的诊断时间可能发生在<code>早期</code>（当解析derived class template的定义式时），也可能发生在<code>晚期</code>（当那些templates被特定的template实参具现化时）。C++政策宁愿较早诊断。</p><h5 id="Remember：-40"><a href="#Remember：-40" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>可在derived class templates内通过<code>“this-&gt;”</code>指涉base class templates内的成员名称，或藉由一个明白写出的“base class资格修饰符”（<code>using声明式</code>）完成。</p></blockquote><h2 id="条款44：将与参数无关的代码抽离templates"><a href="#条款44：将与参数无关的代码抽离templates" class="headerlink" title="条款44：将与参数无关的代码抽离templates"></a>条款44：将与参数无关的代码抽离templates</h2><p>​    Templates是节省时间和避免代码重复的一个奇方妙法。class templates的成员函数只有在被使用时才被暗中具现化。</p><p>​    类型为<code>size_t</code>的参数是个非类型参数（<em>non-type parameter</em>）。</p><p>​    non-type template parameters（非类型模板参数）和type parameters（类型参数）都会导致<code>膨胀</code>。</p><p>​    type parameters（类型参数）导致膨胀：在许多平台上int和long有相同的二进制表述，所以像<code>vector&lt;int&gt;</code>和<code>vector&lt;long&gt;</code>的成员函数有可能完全相同——这正是膨胀的最佳定义。类似情况，在大多数平台上，所有指针类型都有相同的二进制表述，因此凡templates持有指针者（例如<code>list&lt;int*&gt;，list&lt;const int*&gt;</code>等等）往往应该对每一个成员函数使用唯一一份底层实现。</p><p>​    如果你实现某些成员函数而它们操作强型指针（<em>strongly typed pointers</em>，即<code>T*</code>），你应该令它们调用另一个操作无类型指针（<em>untyped pointers</em>，即<code>void*</code>）的函数，由后者完成实际工作。</p><h5 id="Remember：-41"><a href="#Remember：-41" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>Templates生成多个classes和多个函数，所以任何template代码都不该与某个造成膨胀的template参数产生相依关系。</p><p>因非类型模板参数（<em>non-type template parameters</em>）而造成的代码膨胀，往往<code>可消除</code>，做法是以<code>函数参数</code>或<code>class成员变量</code>替换template参数。</p><p>因类型参数（<em>type parameters</em>）而造成的代码膨胀，往往<code>可降低</code>，做法是让带有完全相同二进制表述（<em>binary representations</em>）的具现类型（<em>instantiation types</em>）<code>共享实现码</code>。</p></blockquote><h2 id="条款45：运用成员函数模板接受所有兼容类型"><a href="#条款45：运用成员函数模板接受所有兼容类型" class="headerlink" title="条款45：运用成员函数模板接受所有兼容类型"></a>条款45：运用成员函数模板接受所有兼容类型</h2><p>​    <code>智能指针</code>（<em>Smart pointers</em>）是“行为像指针”的对象，并提供指针没有的机能。</p><p>​    真实指针做得很好的一件事是，支持隐式转换（<em>implicit conversions</em>）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Top</span>&#123; ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Middle</span>: <span class="keyword">public</span> Top&#123; ... &#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bottom</span>: <span class="keyword">public</span> Middle&#123; ... &#125;;</span><br><span class="line">Top* pt1 = <span class="keyword">new</span> Middle;  <span class="comment">//将Middle*转换为Top*</span></span><br><span class="line">Top* pt2 = <span class="keyword">new</span> Bottom;  <span class="comment">//将Bottom*转换为Top*</span></span><br><span class="line"><span class="type">const</span> Top* pct2 = pt1;  <span class="comment">//将Top*转换为const Top*</span></span><br></pre></td></tr></table></figure><p>​    智能指针通常以内置（原始）指针完成初始化。    </p><p>​    同一个template的不同具现体（<em>instantiations</em>）之间并不存在什么与生俱来的固有关系（这里意指如果以带有base-derived关系的B，D两类型分别具现化某个template，产生出来的两个具现体并不带有base-derived关系）。</p><h3 id="Templates和泛型编程（Generic-Programming）"><a href="#Templates和泛型编程（Generic-Programming）" class="headerlink" title="Templates和泛型编程（Generic Programming）"></a>Templates和泛型编程（Generic Programming）</h3><p>​    构造模板是所谓member function templates（常简称为member templates），其作用是为class生成函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPtr</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> U&gt;        <span class="comment">//member template,</span></span><br><span class="line">    <span class="built_in">SmartPtr</span>(<span class="type">const</span> SmartPtr&lt;U&gt;&amp; other);  <span class="comment">//为了生成copy构造函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对任何类型T和任何类型U，可以根据SmartPtr&lt;U&gt;生成一个SmartPtr&lt;T&gt;——因为SmartPtr&lt;T&gt;有个构造函数接受一个SmartPtr&lt;U&gt;参数。这一类构造函数根据对象u创建对象t（例如根据SmartPtr&lt;U&gt;创建一个SmartPtr&lt;T&gt;，而u和v的类型是同一个template的不同具现体，有时称之为泛化（generalized）copy构造函数。</span></span><br></pre></td></tr></table></figure><p>​    member function templates（成员函数模板）的效用不限于<code>构造函数</code>，也支持<code>赋值操作</code>。例如：</p><ul><li>TR1的shared_ptr支持所有”来自兼容的内置指针、tr1::shared_ptrs、auto_ptrs和tr1::weak_ptrs“的构造行为，以及所有来自上述各物（tr1::weak_ptrs除外）的赋值操作。</li></ul><p>member function templates（成员函数模板）并不改变语言基本规则。</p><h5 id="Remember：-42"><a href="#Remember：-42" class="headerlink" title="Remember："></a>Remember：</h5><blockquote><p>请使用member function templates（成员函数模板）生成”可接受所有兼容类型“的函数。</p><p>如果你声明member templates用于”泛化copy构造“或”泛化assignment操作“，你还是需要声明正常的copy构造函数和copy assignment操作符。</p></blockquote><h2 id="条款46：需要类型转换时请为模板定义非成员函数"><a href="#条款46：需要类型转换时请为模板定义非成员函数" class="headerlink" title="条款46：需要类型转换时请为模板定义非成员函数"></a>条款46：需要类型转换时请为模板定义非成员函数</h2><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Effective C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
